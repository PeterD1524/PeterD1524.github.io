(window.webpackJsonp = window.webpackJsonp || []).push([["timestep-core"], {
    360: function(t, e, i) {
        "use strict";
        i.r(e),
        i.d(e, "log", (function() {
            return l
        }
        )),
        i.d(e, "bind", (function() {
            return c
        }
        )),
        i.d(e, "merge", (function() {
            return d
        }
        )),
        i.d(e, "delay", (function() {
            return f
        }
        )),
        i.d(e, "logging", (function() {
            return p
        }
        )),
        i.d(e, "logger", (function() {
            return g
        }
        )),
        i.d(e, "deepCopy", (function() {
            return v
        }
        )),
        i.d(e, "GLOBAL", (function() {
            return u
        }
        )),
        i.d(e, "NATIVE", (function() {
            return m
        }
        )),
        i.d(e, "CONFIG", (function() {
            return _
        }
        )),
        i.d(e, "CACHE", (function() {
            return w
        }
        ));
        var n = i(542)
          , r = i.n(n)
          , s = {};
        s.log = r.a.__env.log,
        s.GLOBAL = r.a.__env.global,
        Function.prototype.bind || (Function.prototype.bind = function(t) {
            if ("function" != typeof this)
                throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
            var e = Array.prototype.slice.call(arguments, 1)
              , i = this
              , n = function() {}
              , r = function() {
                return i.apply(this instanceof n ? this : t, e.concat(Array.prototype.slice.call(arguments)))
            };
            return n.prototype = this.prototype,
            r.prototype = new n,
            r
        }
        );
        var o = Array.prototype.slice;
        s.bind = function(t, e) {
            for (var i = arguments.length, n = new Array(i > 2 ? i - 2 : 0), r = 2; r < i; r++)
                n[r - 2] = arguments[r];
            return "function" == typeof e ? e.bind.apply(e, [t].concat(n)) : function() {
                for (var i = arguments.length, r = new Array(i), s = 0; s < i; s++)
                    r[s] = arguments[s];
                return t[e].apply(t, [].concat(n, r))
            }
        }
        ,
        s.Class = function(t, e, i) {
            return s.__class__((function() {
                return this.init && this.init.apply(this, arguments)
            }
            ), t, e, i)
        }
        ,
        s.__class__ = function(t, e, i, n) {
            var r, o = function() {};
            if ("string" != typeof e && (n = i,
            i = e,
            e = null),
            e && (r = s.logging.get(e)),
            !i)
                throw new Error("parent or prototype not provided");
            if (n || (n = i,
            i = null),
            i)
                if (Array.isArray(i)) {
                    o.prototype = {};
                    for (var h = 0; l = i[h]; ++h)
                        for (var u in l == Error && a && (l = a),
                        l.prototype)
                            u in o.prototype || (o.prototype[u] = l.prototype[u]);
                    i = i[0]
                } else
                    i == Error && a && (i = a),
                    o.prototype = i.prototype;
            var l, c = i ? function(t, e, n) {
                var r = i.prototype[e];
                if (!r)
                    throw new Error("method " + e + " does not exist");
                return r.apply(t, n || [])
            }
            : null;
            return (l = t.prototype = new o).constructor = t,
            l.__parentClass__ = i,
            e && (l.__class__ = e),
            n.call(l, r || c, r && c),
            t
        }
        ;
        var a = s.__class__((function() {
            var t = Error.prototype.constructor.apply(this, arguments);
            for (var e in t)
                t.hasOwnProperty(e) && (this[e] = t[e])
        }
        ), (function() {}
        ));
        s.merge = function(t) {
            t = t || {};
            for (var e = 1, i = arguments.length; e < i; ++e) {
                var n = arguments[e];
                for (var r in n)
                    n.hasOwnProperty(r) && !t.hasOwnProperty(r) && (t[r] = n[r])
            }
            return t
        }
        ,
        s.Class.defaults = s.merge,
        s.delay = function(t, e) {
            var i, n, r = null, s = function() {
                t.apply(i, n)
            };
            return function() {
                i = this,
                n = arguments,
                r && clearTimeout(r),
                r = setTimeout(s, e || 0)
            }
        }
        ,
        s.logging = function() {
            var t = {
                DEBUG: 1,
                LOG: 2,
                INFO: 3,
                WARN: 4,
                ERROR: 5,
                NONE: 10
            }
              , e = {}
              , i = !1
              , n = "";
            t.setPrefix = function(t) {
                n = t + " "
            }
            ,
            t.setProduction = function(t) {
                for (var n in i = !!t,
                e)
                    e[n].setProduction(i)
            }
            ,
            t.get = function(t) {
                var n = t in e ? e[t] : e[t] = new r(t);
                return n.setProduction(i),
                n
            }
            ,
            t.set = function(t, i) {
                e[t] = i
            }
            ,
            t.getAll = function() {
                return e
            }
            ,
            t.__create = function(e, i) {
                i.logger = t.get(e)
            }
            ;
            var r = s.__class__((function(e, n) {
                this._name = e,
                this._isProduction = i,
                this.setLevel(n || t.LOG)
            }
            ), (function() {
                function e(e) {
                    var i = t[e];
                    return function() {
                        if (!this._isProduction && i >= this._level) {
                            var t = e + " " + n + this._name
                              , r = this._listener || s.log;
                            return r && r.apply(this._listener, [t].concat(o.call(arguments)))
                        }
                        return arguments[0]
                    }
                }
                this.setProduction = function(e) {
                    this._isProduction = e,
                    e && this.setLevel(t.NONE)
                }
                ,
                this.setLevel = function(e) {
                    this._level = e,
                    this._isProduction && (e = t.NONE),
                    this.DEBUG = e <= t.DEBUG,
                    this.LOG = e <= t.LOG,
                    this.INFO = e <= t.INFO,
                    this.WARN = e <= t.WARN,
                    this.ERROR = e <= t.ERROR
                }
                ,
                this.setListener = function(t) {
                    this._listener = t
                }
                ,
                this.debug = e("DEBUG"),
                this.log = e("LOG"),
                this.info = e("INFO"),
                this.warn = e("WARN"),
                this.error = e("ERROR")
            }
            ));
            return t
        }(),
        s.deepCopy = function(t) {
            return JSON.parse(JSON.stringify(t))
        }
        ;
        var h = s.logging.get("jsiocore");
        s.logger = h;
        var u, l = s.log, c = s.bind, d = s.merge, f = s.delay, p = s.logging, g = s.logger, v = s.deepCopy, _ = "undefined" != typeof CONFIG ? CONFIG : {}, m = "undefined" != typeof NATIVE ? NATIVE : {}, w = "undefined" != typeof CACHE ? CACHE : {};
        if ("undefined" != typeof GLOBAL) {
            if ("undefined" != typeof window)
                throw new Error("Unexpected, GLOBAL should not exist in a webpack build");
            u = GLOBAL
        } else
            u = window,
            window.CACHE = w,
            window.CONFIG = _,
            window.NATIVE = m;
        e.default = s
    },
    361: function(t, e, i) {
        "use strict";
        var n = i(413)
          , r = i(383)
          , s = i(370);
        function o(t, e) {
            for (var i = 0; i < e.length; i++) {
                var n = e[i];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(t, n.key, n)
            }
        }
        function a(t, e) {
            t.prototype = Object.create(e.prototype),
            t.prototype.constructor = t,
            t.__proto__ = e
        }
        var h, u = {};
        u.Filter = function() {
            function t(t, e) {
                this._type = t || "",
                this._views = [],
                this.shader = e || s.c.defaultShader
            }
            var e = t.prototype;
            return e.getType = function() {
                return this._type
            }
            ,
            e.update = function() {}
            ,
            e.setView = function(t) {
                var e = this._views;
                -1 === e.indexOf(t) && e.push(t)
            }
            ,
            e.removeView = function(t) {
                var e = this._views
                  , i = e.indexOf(t);
                -1 !== i && e.splice(i, 1)
            }
            ,
            t
        }(),
        u.ColorFilter = function(t) {
            function e(e, i, r) {
                var s;
                return (s = t.call(this, i, r) || this)._color = new n.a(e),
                s
            }
            var i, r, s;
            return a(e, t),
            e.prototype.update = function(t) {
                this._color.update(t)
            }
            ,
            i = e,
            (r = [{
                key: "color",
                set: function(t) {
                    this._color.update(t)
                },
                get: function() {
                    return this._color
                }
            }]) && o(i.prototype, r),
            s && o(i, s),
            e
        }(u.Filter);
        var l = u.ColorFilter
          , c = u.Filter;
        u.LinearAddFilter = function(t) {
            function e(e) {
                return t.call(this, e, "LinearAdd", s.c.linearAddShader) || this
            }
            return a(e, t),
            e
        }(l),
        u.TintFilter = function(t) {
            function e(e) {
                return t.call(this, e, "Tint", s.c.tintShader) || this
            }
            return a(e, t),
            e
        }(l),
        u.MultiplyFilter = function(t) {
            function e(e) {
                return t.call(this, e, "Multiply", s.c.multiplyShader) || this
            }
            return a(e, t),
            e
        }(l),
        u.PositiveMaskFilter = function(t) {
            function e(e) {
                var i;
                return i = t.call(this, "PositiveMask") || this,
                e.image && (h = h || r.a,
                i._mask = new h({
                    url: e.image
                })),
                i
            }
            return a(e, t),
            e.prototype.getMask = function() {
                return this._mask
            }
            ,
            e
        }(c),
        u.NegativeMaskFilter = function(t) {
            function e(e) {
                var i;
                return i = t.call(this, "NegativeMask") || this,
                e.image && (h = h || r.a,
                i._mask = new h({
                    url: e.image
                })),
                i
            }
            return a(e, t),
            e.prototype.getMask = function() {
                return this._mask
            }
            ,
            e
        }(c),
        u.CustomFilter = function(t) {
            function e(e) {
                return t.call(this, "Custom", e) || this
            }
            return a(e, t),
            e
        }(c),
        e.a = u
    },
    370: function(t, e, i) {
        "use strict";
        var n = i(371)
          , r = i(413)
          , s = i(378);
        function o(t, e) {
            t.prototype = Object.create(e.prototype),
            t.prototype.constructor = t,
            t.__proto__ = e
        }
        var a = ["precision mediump float;", "attribute vec2 aTextureCoord;", "attribute vec2 aPosition;", "attribute vec4 aColor;", "attribute float aAlpha;", "uniform vec2 uResolution;", "varying vec2 vTextureCoord;", "varying float vAlpha;", "varying vec4 vColor;", "void main() {", " vTextureCoord = aTextureCoord;", " vColor = aColor;", " vAlpha = aAlpha;", " vec2 clipSpace = (aPosition / uResolution) * 2.0 - 1.0;", " gl_Position = vec4(clipSpace * vec2(1.0, -1.0), 0.0, 1.0);", "}"].join("\n")
          , h = ["precision mediump float;", "varying vec2 vTextureCoord;", "varying float vAlpha;", "uniform sampler2D uSampler;", "void main(void) {", " gl_FragColor = texture2D(uSampler, vTextureCoord) * vAlpha;", "}"].join("\n")
          , u = function() {
            function t(t) {
                this._gl = t.gl,
                this._vertexSrc = t.vertexSrc || a,
                this._fragmentSrc = t.fragmentSrc || h;
                var e = void 0 === t.useTexture || t.useTexture;
                this.attributes = {
                    aTextureCoord: 0,
                    aPosition: 0,
                    aAlpha: 0,
                    aColor: 0
                },
                this.lastAttributeIndex = Object.keys(this.attributes).length - 1,
                this.enabledAttributes = [],
                this.uniforms = t.uniforms || {
                    uSampler: e ? 0 : -1,
                    uResolution: 0
                },
                this.initGL(),
                O && O.subscribe(A, this, "handleContextReload")
            }
            var e = t.prototype;
            return e.remove = function() {
                O && O.unsubscribe(A, this, "handleContextReload")
            }
            ,
            e.initGL = function() {
                this.createProgram(),
                this.updateLocations()
            }
            ,
            e.handleContextReload = function() {
                this.initGL()
            }
            ,
            e.updateLocations = function() {
                var t = this._gl;
                this.enabledAttributes = [];
                for (var e = 0; e < this.lastAttributeIndex; ++e)
                    this.enabledAttributes[e] = !1;
                for (var i in this.attributes) {
                    -1 !== this.attributes[i] && (this.attributes[i] = t.getAttribLocation(this.program, i));
                    var n = this.attributes[i];
                    this.enabledAttributes[n] = n >= 0
                }
                for (var r in this.uniforms)
                    -1 !== this.uniforms[r] && (this.uniforms[r] = t.getUniformLocation(this.program, r))
            }
            ,
            e.useProgram = function(t) {
                var e = this._gl;
                e.useProgram(this.program);
                var i = this.uniforms;
                e.uniform2f(i.uResolution, t.width, t.height),
                -1 !== i.uSampler && e.uniform1i(i.uSampler, 0),
                e.vertexAttribPointer(this.attributes.aPosition, 2, e.FLOAT, !1, 24, 0),
                this.attributes.aTextureCoord >= 0 && e.vertexAttribPointer(this.attributes.aTextureCoord, 2, e.FLOAT, !1, 24, 8),
                this.attributes.aAlpha >= 0 && e.vertexAttribPointer(this.attributes.aAlpha, 1, e.FLOAT, !1, 24, 16),
                this.attributes.aColor >= 0 && e.vertexAttribPointer(this.attributes.aColor, 4, e.UNSIGNED_BYTE, !0, 24, 20)
            }
            ,
            e.createProgram = function() {
                var t = this._gl
                  , e = t.createShader(t.VERTEX_SHADER);
                t.shaderSource(e, this._vertexSrc),
                t.compileShader(e);
                var i = t.createShader(t.FRAGMENT_SHADER);
                t.shaderSource(i, this._fragmentSrc),
                t.compileShader(i);
                var n = t.createProgram();
                if (t.attachShader(n, e),
                t.attachShader(n, i),
                t.linkProgram(n),
                !t.getProgramParameter(n, t.LINK_STATUS)) {
                    console.log("Could not initialize shaders");
                    var r = t.getShaderInfoLog(e);
                    r && console.log("Vertex shader compiler log: " + r);
                    var s = t.getShaderInfoLog(i);
                    s && console.log("Fragment shader compiler log: " + s)
                }
                this.program = n
            }
            ,
            t
        }()
          , l = {
            DefaultShader: u,
            LinearAddShader: function(t) {
                function e(e) {
                    return e.fragmentSrc = ["precision mediump float;", "varying vec2 vTextureCoord;", "varying float vAlpha;", "varying vec4 vColor;", "uniform sampler2D uSampler;", "void main(void) {", " vec4 vSample = texture2D(uSampler, vTextureCoord);", " gl_FragColor = vec4(vSample.rgb + (vColor.rgb * vColor.a * vSample.a), vSample.a) * vAlpha;", "}"].join("\n"),
                    t.call(this, e) || this
                }
                return o(e, t),
                e
            }(u),
            TintShader: function(t) {
                function e(e) {
                    return e.fragmentSrc = ["precision mediump float;", "varying vec2 vTextureCoord;", "varying float vAlpha;", "varying vec4 vColor;", "uniform sampler2D uSampler;", "void main(void) {", " vec4 vSample = texture2D(uSampler, vTextureCoord);", " gl_FragColor = vec4((vSample.rgb * (1.0 - vColor.a) + (vColor.rgb * vColor.a * vSample.a)) * vAlpha, vSample.a * vAlpha);", "}"].join("\n"),
                    t.call(this, e) || this
                }
                return o(e, t),
                e
            }(u),
            MultiplyShader: function(t) {
                function e(e) {
                    return e.fragmentSrc = ["precision mediump float;", "varying vec2 vTextureCoord;", "varying float vAlpha;", "varying vec4 vColor;", "uniform sampler2D uSampler;", "void main(void) {", " vec4 vSample = texture2D(uSampler, vTextureCoord);", " gl_FragColor = vec4(vSample.rgb * (vColor.rgb * vColor.a), vSample.a) * vAlpha;", "}"].join("\n"),
                    t.call(this, e) || this
                }
                return o(e, t),
                e
            }(u),
            RectShader: function(t) {
                function e(e) {
                    return e.fragmentSrc = ["precision mediump float;", "varying float vAlpha;", "varying vec4 vColor;", "void main(void) {", " gl_FragColor = vColor * vColor.a * vAlpha;", "}"].join("\n"),
                    e.useTexture = !1,
                    t.call(this, e) || this
                }
                return o(e, t),
                e
            }(u)
        }
          , c = i(387)
          , d = i(450)
          , f = i(400);
        function p(t, e, i) {
            return e in t ? Object.defineProperty(t, e, {
                value: i,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = i,
            t
        }
        var g = (new Image).__proto__
          , v = document.createElement("canvas").__proto__
          , _ = function() {
            function t(e, i, n, r, s) {
                this.key = e,
                this.source = i,
                this.width = i.width,
                this.height = i.height,
                this.glTexture = n,
                this.isDisposable = r,
                this.hasMipmaps = s,
                i.__proto__ === g ? this.type = t.TYPE_IMAGE : i.__proto__ === v ? this.type = t.TYPE_CANVAS : i instanceof f.a ? this.type = t.TYPE_WRAPPER : this.type = t.TYPE_UNKNOWN
            }
            var e = t.prototype;
            return e.dispose = function() {
                this.isDisposable = !0
            }
            ,
            e.estimateSize = function() {
                var t = this.width * this.height * 4;
                return this.hasMipmaps ? 1.5 * t : t
            }
            ,
            t
        }();
        p(_, "TYPE_IMAGE", 1),
        p(_, "TYPE_CANVAS", 2),
        p(_, "TYPE_WRAPPER", 3),
        p(_, "TYPE_UNKNOWN", 4);
        var m = 1
          , w = function(t) {
            var e, i;
            function n(e, i) {
                var n;
                return (n = t.call(this) || this).gl = null,
                n.textureDataCache = new d.a(65535),
                n.textureByteCount = 0,
                n.memoryLimit = 1024 * e * 1024 || 134217728,
                n.enableMipmaps = i,
                n
            }
            i = t,
            (e = n).prototype = Object.create(i.prototype),
            e.prototype.constructor = e,
            e.__proto__ = i;
            var r = n.prototype;
            return r.initGL = function(t) {
                this.gl = t,
                this.textureDataCache.removeAll(),
                this.textureByteCount = 0
            }
            ,
            r.isPowerOfTwo = function(t) {
                return t && !(t & t - 1)
            }
            ,
            r.deleteTexture = function(t) {
                if (this.emit(n.TEXTURE_REMOVED),
                t && t.glTexture) {
                    var e = this.gl;
                    e.deleteTexture(t.glTexture),
                    e.getError() !== e.NO_ERROR && console.warn("Failed to delete texture: webgl error"),
                    t.width && t.height ? this.removeFromByteCount(t) : console.warn("Unknown texture dimensions. Possible memory leak!"),
                    t.type !== _.TYPE_WRAPPER && t.type !== _.TYPE_CANVAS || (t.source.__needsUpload = !0),
                    t.source = null,
                    t.glTexture = null
                }
            }
            ,
            r.createTexture = function(t, e) {
                void 0 === e && (e = !0);
                var i = t.width
                  , n = t.height;
                if (0 === i || 0 === n)
                    throw new Error("Image cannot have a width or height of 0.");
                var r = this.gl
                  , s = m++
                  , o = r.createTexture()
                  , a = this.enableMipmaps && this.isPowerOfTwo(i) && this.isPowerOfTwo(n)
                  , h = new _(s,t,o,e,a);
                return h.type === _.TYPE_WRAPPER && (t = t.image),
                this.addToByteCount(h),
                r.bindTexture(r.TEXTURE_2D, o),
                r.texParameteri(r.TEXTURE_2D, r.TEXTURE_WRAP_S, r.CLAMP_TO_EDGE),
                r.texParameteri(r.TEXTURE_2D, r.TEXTURE_WRAP_T, r.CLAMP_TO_EDGE),
                h.type === _.TYPE_UNKNOWN ? r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, i, n, 0, r.RGBA, r.UNSIGNED_BYTE, null) : r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, r.RGBA, r.UNSIGNED_BYTE, t),
                a ? (r.generateMipmap(r.TEXTURE_2D),
                r.texParameteri(r.TEXTURE_2D, r.TEXTURE_MIN_FILTER, r.LINEAR_MIPMAP_NEAREST)) : r.texParameteri(r.TEXTURE_2D, r.TEXTURE_MIN_FILTER, r.LINEAR),
                this.textureDataCache.put(s, h),
                h
            }
            ,
            r.addToByteCount = function(t) {
                this.textureByteCount += t.estimateSize();
                for (var e = this.textureDataCache.size / 2, i = 0; this.textureByteCount > this.memoryLimit && i++ < e; ) {
                    var n = this.textureDataCache.head;
                    if (n) {
                        var r = n.value;
                        if (!r.isDisposable) {
                            this.textureDataCache.get(r.key);
                            continue
                        }
                        this.textureDataCache.remove(r.key),
                        this.deleteTexture(r)
                    }
                }
            }
            ,
            r.removeFromByteCount = function(t) {
                this.textureByteCount -= t.estimateSize()
            }
            ,
            n
        }(s.a);
        function y(t, e) {
            t.prototype = Object.create(e.prototype),
            t.prototype.constructor = t,
            t.__proto__ = e
        }
        w.TEXTURE_REMOVED = "TextureRemoved",
        i.d(e, "b", (function() {
            return S
        }
        )),
        i.d(e, "a", (function() {
            return A
        }
        ));
        var b = function() {
            function t() {
                this.x = 0,
                this.y = 0,
                this.width = 0,
                this.height = 0
            }
            return t.prototype.copy = function(t) {
                this.x = t.x,
                this.y = t.y,
                this.width = t.width,
                this.height = t.height
            }
            ,
            t
        }()
          , x = document.createElement("canvas").getContext("2d")
          , E = function() {
            function t() {
                this.globalCompositeOperation = "source-over",
                this.globalAlpha = 1,
                this.transform = new c.a,
                this.lineWidth = 1,
                this.filter = null,
                this.clip = !1,
                this.clipRectangle = new b,
                this.fillStyle = "",
                this.strokeStyle = ""
            }
            return t.prototype.setState = function(t) {
                return this.globalCompositeOperation = t.globalCompositeOperation,
                this.globalAlpha = t.globalAlpha,
                this.transform.copy(t.transform),
                this.lineWidth = t.lineWidth,
                this.filter = t.filter,
                this.clip = t.clip,
                this.clipRectangle.copy(t.clipRectangle),
                this.fillStyle = t.fillStyle,
                this.strokeStyle = t.strokeStyle,
                this
            }
            ,
            t
        }()
          , T = {}
          , C = function(t) {
            var e = T[t];
            return e || (e = T[t] = r.a.parse(t)),
            e
        }
          , R = function(t) {
            function e(e, i) {
                var r;
                return (r = t.call(this) || this)._manager = e,
                r.canvas = i,
                r.width = i.width,
                r.height = i.height,
                r.font = "11px " + n.a.defaultFontFamily,
                r.frameBuffer = null,
                r.frameBufferTexture = null,
                r.filter = null,
                r.isWebGL = !0,
                r.stack = [],
                r.parentStateIndex = -1,
                r
            }
            y(e, t);
            var i = e.prototype;
            return i.save = function() {
                this.parentStateIndex += 1,
                this.parentStateIndex <= this.stack.length && (this.stack[this.parentStateIndex] = new E),
                this.stack[this.parentStateIndex].setState(this)
            }
            ,
            i.restore = function() {
                var t = this.stack[this.parentStateIndex];
                this.setState(t),
                this.parentStateIndex -= 1
            }
            ,
            i.createOffscreenFrameBuffer = function() {
                var t = this._manager.gl
                  , e = this._manager._activeCtx;
                this.frameBufferTexture = this._manager.createTexture(this.canvas, !1),
                this.frameBuffer = t.createFramebuffer(),
                this._texture = this.frameBufferTexture.glTexture,
                t.bindFramebuffer(t.FRAMEBUFFER, this.frameBuffer),
                t.bindTexture(t.TEXTURE_2D, this._texture),
                t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, this._texture, 0),
                this.canvas.texture = this._texture,
                this._manager.activate(e, !0)
            }
            ,
            i.loadIdentity = function() {
                this.transform.identity()
            }
            ,
            i.setTransform = function(t, e, i, n, r, s) {
                this.transform.setTo(t, e, i, n, r, s)
            }
            ,
            i.transform = function(t, e, i, n, r, s) {
                this._helperTransform.setTo(t, e, i, n, r, s),
                this.transform.transform(this._helperTransform)
            }
            ,
            i.scale = function(t, e) {
                this.transform.scale(t, e)
            }
            ,
            i.translate = function(t, e) {
                this.transform.translate(t, e)
            }
            ,
            i.rotate = function(t) {
                this.transform.rotate(t)
            }
            ,
            i.getElement = function() {
                return this.canvas
            }
            ,
            i.reset = function() {}
            ,
            i.clear = function() {
                this._manager.activate(this),
                this._manager.flush(),
                this._manager.disableScissor();
                var t = this._manager.gl;
                t && t.clear(t.COLOR_BUFFER_BIT)
            }
            ,
            i.resize = function(t, e) {
                if (this.width = t,
                this.height = e,
                this.canvas instanceof HTMLCanvasElement && (this.canvas.width = t,
                this.canvas.height = e),
                this._manager.activate(this, !0),
                this._texture && this._manager.gl) {
                    var i = this._manager.gl;
                    i.bindTexture(i.TEXTURE_2D, this._texture),
                    i.texImage2D(i.TEXTURE_2D, 0, i.RGBA, t, e, 0, i.RGBA, i.UNSIGNED_BYTE, null)
                }
            }
            ,
            i.clipRect = function(t, e, i, n) {
                var r, s, o, a, h, u = this.transform, l = t + i, c = e + n, d = t * u.a + e * u.c + u.tx, f = t * u.b + e * u.d + u.ty, p = l * u.a + e * u.c + u.tx, g = l * u.b + e * u.d + u.ty, v = t * u.a + c * u.c + u.tx, _ = t * u.b + c * u.d + u.ty, m = l * u.a + c * u.c + u.tx, w = l * u.b + c * u.d + u.ty;
                if (this.parentStateIndex >= 0) {
                    var y = this.stack[this.parentStateIndex];
                    h = y.clip && y.clipRectangle
                }
                h ? (r = h.x,
                o = h.y,
                s = h.x + h.width,
                a = h.y + h.height) : (r = 0,
                o = 0,
                s = this.width,
                a = this.height);
                var b = Math.min(s, d, p, v, m)
                  , x = Math.max(r, d, p, v, m)
                  , E = Math.min(a, f, g, _, w)
                  , T = Math.max(o, f, g, _, w);
                b < r && (b = r),
                x > s && (x = s),
                E < o && (E = o),
                T > a && (T = a),
                this.clip = !0;
                var C = this.clipRectangle;
                C.x = b,
                C.y = E,
                C.width = x - b,
                C.height = T - E
            }
            ,
            i.swap = function() {
                this._manager.flush()
            }
            ,
            i.execSwap = function() {}
            ,
            i.setFilter = function(t) {
                this.filter = t
            }
            ,
            i.clearFilter = function() {
                this.filter = null
            }
            ,
            i.clearFilters = function() {
                this.clearFilter()
            }
            ,
            i.circle = function() {}
            ,
            i.drawPointSprites = function() {}
            ,
            i.roundRect = function() {}
            ,
            i.measureText = function(t) {
                return x.font = this.font,
                x.measureText(t)
            }
            ,
            i.drawImage = function(t, e, i, n, r, s, o, a, h) {
                var u = this.globalAlpha;
                if (0 !== u) {
                    var l = this._manager;
                    if (l.activate(this),
                    t.__needsUpload) {
                        var c = l.createTexture(t);
                        t.texture = c.glTexture,
                        t.__needsUpload = !1
                    }
                    var d = l.addToBatch(this, t.texture)
                      , f = this.transform
                      , p = s + a
                      , g = o + h
                      , v = s * f.a + o * f.c + f.tx
                      , _ = s * f.b + o * f.d + f.ty
                      , m = p * f.a + o * f.c + f.tx
                      , w = p * f.b + o * f.d + f.ty
                      , y = s * f.a + g * f.c + f.tx
                      , b = s * f.b + g * f.d + f.ty
                      , x = p * f.a + g * f.c + f.tx
                      , E = p * f.b + g * f.d + f.ty
                      , T = 1 / t.width
                      , C = 1 / t.height
                      , R = l._vertices
                      , S = 6 * d * 4
                      , A = e * T
                      , L = (e + n) * T
                      , O = i * C
                      , M = (i + r) * C;
                    if (R[S + 0] = v,
                    R[S + 1] = _,
                    R[S + 2] = A,
                    R[S + 3] = O,
                    R[S + 4] = u,
                    R[S + 6] = m,
                    R[S + 7] = w,
                    R[S + 8] = L,
                    R[S + 9] = O,
                    R[S + 10] = u,
                    R[S + 12] = y,
                    R[S + 13] = b,
                    R[S + 14] = A,
                    R[S + 15] = M,
                    R[S + 16] = u,
                    R[S + 18] = x,
                    R[S + 19] = E,
                    R[S + 20] = L,
                    R[S + 21] = M,
                    R[S + 22] = u,
                    this.filter && this.filter._color) {
                        var P = this.filter._color
                          , k = l._colors
                          , I = 255 & P.r | (255 & P.g) << 8 | (255 & P.b) << 16 | (255 * P.a & 255) << 24;
                        k[S + 5] = k[S + 11] = k[S + 17] = k[S + 23] = I
                    }
                }
            }
            ,
            i.fillRect = function(t, e, i, n) {
                0 !== this.globalAlpha && this._fillRect(t, e, i, n, C(this.fillStyle))
            }
            ,
            i.strokeRect = function(t, e, i, n) {
                var r = this.lineWidth
                  , s = r / 2
                  , o = C(this.strokeStyle);
                this._fillRect(t + s, e - s, i - r, r, o),
                this._fillRect(t + s, e + n - s, i - r, r, o),
                this._fillRect(t - s, e - s, r, n + r, o),
                this._fillRect(t + i - s, e - s, r, n + r, o)
            }
            ,
            i._fillRect = function(t, e, i, n, r) {
                var s = this.transform
                  , o = t + i
                  , a = e + n
                  , h = t * s.a + e * s.c + s.tx
                  , u = t * s.b + e * s.d + s.ty
                  , l = o * s.a + e * s.c + s.tx
                  , c = o * s.b + e * s.d + s.ty
                  , d = t * s.a + a * s.c + s.tx
                  , f = t * s.b + a * s.d + s.ty
                  , p = o * s.a + a * s.c + s.tx
                  , g = o * s.b + a * s.d + s.ty
                  , v = this._manager;
                v.activate(this);
                var _ = v.addToBatch(this, null)
                  , m = v._vertices
                  , w = 6 * _ * 4;
                m[w + 0] = h,
                m[w + 1] = u,
                m[w + 4] = this.globalAlpha,
                m[w + 6] = l,
                m[w + 7] = c,
                m[w + 10] = this.globalAlpha,
                m[w + 12] = d,
                m[w + 13] = f,
                m[w + 16] = this.globalAlpha,
                m[w + 18] = p,
                m[w + 19] = g,
                m[w + 22] = this.globalAlpha;
                var y = v._colors
                  , b = (255 & r.r) + ((255 & r.g) << 8) + ((255 & r.b) << 16) + ((255 * r.a & 255) << 24);
                y[w + 5] = y[w + 11] = y[w + 17] = y[w + 23] = b
            }
            ,
            e
        }(E)
          , S = "ReloadTextures"
          , A = "ReloadShaders"
          , L = new (function(t) {
            function e(e) {
                var i;
                return (i = t.call(this) || this)._canvas = e || document.createElement("canvas"),
                i
            }
            y(e, t);
            var i = e.prototype;
            return i.init = function(t) {
                var e, i = "webgl";
                try {
                    var r = document.createElement("canvas");
                    (e = !!r.getContext(i)) || (i = "experimental-webgl",
                    e = !!r.getContext(i))
                } catch (t) {
                    e = !1
                }
                if (this.width = n.a.screen.width,
                this.height = n.a.screen.height,
                this.isSupported = e && t.useWebGL,
                this.isSupported) {
                    this.textureManager = new w(t.maxTextureMegabytes,t.enableMipmaps),
                    this.textureManager.on(w.TEXTURE_REMOVED, this.flush.bind(this)),
                    this._helperTransform = new c.a,
                    this._canvas.width = this.width,
                    this._canvas.height = this.height,
                    this._canvas.getWebGLContext = this._canvas.getContext.bind(this._canvas, i, {
                        depth: !1,
                        antialias: !1,
                        alpha: !0,
                        premultipliedAlpha: !0,
                        preserveDrawingBuffer: !1
                    }),
                    this._indexCache = new Uint16Array(3072),
                    this._vertexCache = new ArrayBuffer(49152),
                    this._vertices = new Float32Array(this._vertexCache),
                    this._colors = new Uint32Array(this._vertexCache);
                    for (var s = 0, o = 0; s < 3072; s += 6,
                    o += 4)
                        this._indexCache[s] = o,
                        this._indexCache[s + 1] = o + 2,
                        this._indexCache[s + 2] = o + 3,
                        this._indexCache[s + 3] = o,
                        this._indexCache[s + 4] = o + 3,
                        this._indexCache[s + 5] = o + 1;
                    this._batchQueue = new Array(512);
                    for (var a = 0; a <= 512; a++)
                        this._batchQueue[a] = {
                            texture: null,
                            index: 0,
                            shader: null,
                            globalCompositeOperation: null,
                            clip: !1,
                            clipRectangle: new b
                        };
                    this.contexts = [],
                    this.initGL(),
                    this._primaryContext = new R(this,this._canvas),
                    this.activate(this._primaryContext),
                    this.contextActive = !0,
                    this._canvas.addEventListener("webglcontextlost", this.handleContextLost.bind(this), !1),
                    this._canvas.addEventListener("webglcontextrestored", this.handleContextRestored.bind(this), !1)
                }
            }
            ,
            i.handleContextLost = function(t) {
                t.preventDefault(),
                this.contextActive = !1
            }
            ,
            i.handleContextRestored = function() {
                this.initGL(this.gl),
                this.emit(S),
                this.emit(A),
                this.emit("Reload"),
                this.contextActive = !0
            }
            ,
            i.initGL = function(t) {
                var e = this.gl = t || this._canvas.getWebGLContext();
                e.clearColor(0, 0, 0, 0),
                e.disable(e.DEPTH_TEST),
                e.disable(e.CULL_FACE),
                e.enable(e.BLEND),
                e.blendEquation(e.FUNC_ADD),
                e.activeTexture(e.TEXTURE0),
                this._scissorEnabled = !1,
                this._activeScissor = new b,
                this._activeCompositeOperation = "",
                this.setActiveCompositeOperation("source-over"),
                this._activeShader = null,
                e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !0),
                this._drawIndex = 0,
                this._batchIndex = 0,
                this._indexBuffer = e.createBuffer(),
                this._vertexBuffer = e.createBuffer(),
                e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this._indexBuffer),
                e.bufferData(e.ELEMENT_ARRAY_BUFFER, this._indexCache, e.STATIC_DRAW),
                e.bindBuffer(e.ARRAY_BUFFER, this._vertexBuffer),
                e.bufferData(e.ARRAY_BUFFER, this._vertexCache, e.DYNAMIC_DRAW),
                t || (this.defaultShader = this.createShader(l.DefaultShader),
                this.rectShader = this.createShader(l.RectShader),
                this.linearAddShader = this.createShader(l.LinearAddShader),
                this.tintShader = this.createShader(l.TintShader),
                this.multiplyShader = this.createShader(l.MultiplyShader)),
                this.textureManager.initGL(e),
                this.updateContexts()
            }
            ,
            i.createShader = function(t) {
                var e = new t({
                    gl: this.gl
                });
                return this.subscribe(A, e, "handleContextReload"),
                e
            }
            ,
            i.updateContexts = function() {
                for (var t = 0; t < this.contexts.length; t++)
                    this.contexts[t].createOffscreenFrameBuffer()
            }
            ,
            i.updateCanvasDimensions = function() {
                this._primaryContext.resize(this._canvas.width, this._canvas.height)
            }
            ,
            i.getContext = function(t, e) {
                var i;
                return !1 === (e = e || {}).offscreen ? (i = this._primaryContext).resize(e.width, e.height) : ((i = new R(this,t)).createOffscreenFrameBuffer(),
                this.contexts.push(i)),
                i
            }
            ,
            i.setActiveCompositeOperation = function(t) {
                if (t = t || "source-over",
                this._activeCompositeOperation !== t && this.gl) {
                    this._activeCompositeOperation = t;
                    var e, i, n = this.gl;
                    switch (t) {
                    case "source-over":
                        e = n.ONE,
                        i = n.ONE_MINUS_SRC_ALPHA;
                        break;
                    case "source-atop":
                        e = n.DST_ALPHA,
                        i = n.ONE_MINUS_SRC_ALPHA;
                        break;
                    case "source-in":
                        e = n.DST_ALPHA,
                        i = n.ZERO;
                        break;
                    case "source-out":
                        e = n.ONE_MINUS_DST_ALPHA,
                        i = n.ZERO;
                        break;
                    case "destination-atop":
                        e = n.DST_ALPHA,
                        i = n.SRC_ALPHA;
                        break;
                    case "destination-in":
                        e = n.ZERO,
                        i = n.SRC_ALPHA;
                        break;
                    case "destination-out":
                        e = n.ONE_MINUS_SRC_ALPHA,
                        i = n.ONE_MINUS_SRC_ALPHA;
                        break;
                    case "destination-over":
                        e = n.DST_ALPHA,
                        i = n.SRC_ALPHA;
                        break;
                    case "lighter":
                        e = n.ONE,
                        i = n.ONE;
                        break;
                    case "xor":
                    case "copy":
                    default:
                        e = n.ONE,
                        i = n.ONE_MINUS_SRC_ALPHA
                    }
                    n.blendFunc(e, i)
                }
            }
            ,
            i.flush = function() {
                if (0 !== this._batchIndex && this.contextActive) {
                    var t = this.gl;
                    t.bufferSubData(t.ARRAY_BUFFER, 0, this._vertexCache),
                    this._batchQueue[this._batchIndex + 1].index = this._drawIndex;
                    for (var e = 1; e <= this._batchIndex; e++) {
                        var i = this._batchQueue[e];
                        if (i.clip) {
                            var n = i.clipRectangle;
                            this.enableScissor(n.x, n.y, n.width, n.height)
                        } else
                            this.disableScissor();
                        var r = i.texture;
                        r && t.bindTexture(t.TEXTURE_2D, r),
                        this.setActiveCompositeOperation(i.globalCompositeOperation);
                        var s = i.shader;
                        if (s !== this._activeShader) {
                            var o, a = s.enabledAttributes;
                            if (this._activeShader) {
                                var h = this._activeShader.enabledAttributes;
                                for (o = 0; o < h.length; ++o)
                                    h[o] ? a[o] || t.disableVertexAttribArray(o) : a[o] && t.enableVertexAttribArray(o);
                                for (o = h.length; o < a.length; ++o)
                                    a[o] && t.enableVertexAttribArray(o)
                            } else
                                for (o = 0; o < a.length; ++o)
                                    a[o] && t.enableVertexAttribArray(o);
                            s.useProgram(this._activeCtx),
                            this._activeShader = s
                        }
                        var u = i.index
                          , l = this._batchQueue[e + 1].index;
                        t.drawElements(t.TRIANGLES, 6 * (l - u), t.UNSIGNED_SHORT, 12 * u)
                    }
                    this._drawIndex = 0,
                    this._batchIndex = 0
                }
            }
            ,
            i.createTexture = function(t, e) {
                return this.textureManager.createTexture(t, e)
            }
            ,
            i.enableScissor = function(t, e, i, n) {
                var r = this.gl;
                this._scissorEnabled || (r.enable(r.SCISSOR_TEST),
                this._scissorEnabled = !0);
                var s = this._activeScissor
                  , o = this._activeCtx.height - n - e;
                t === s.x && o === s.y && i === s.width && n === s.height || (s.x = t,
                s.y = o,
                s.width = i,
                s.height = n,
                r.scissor(t, o, i, n))
            }
            ,
            i.disableScissor = function() {
                if (this._scissorEnabled) {
                    var t = this.gl;
                    this._scissorEnabled = !1,
                    t.disable(t.SCISSOR_TEST)
                }
            }
            ,
            i.addToBatch = function(t, e) {
                if (!this.contextActive)
                    return 0;
                this._drawIndex >= 511 && this.flush();
                var i = t.filter
                  , n = i ? i.shader : e ? this.defaultShader : this.rectShader
                  , r = t.clip
                  , s = t.clipRectangle
                  , o = this._batchQueue[this._batchIndex]
                  , a = o.texture !== e || o.globalCompositeOperation !== t.globalCompositeOperation || o.shader !== n || o.clip !== r || r && (o.clipRectangle.x !== s.x || o.clipRectangle.y !== s.y || o.clipRectangle.width !== s.width || o.clipRectangle.height !== s.height)
                  , h = this._drawIndex++;
                if (a) {
                    var u = this._batchQueue[++this._batchIndex];
                    u.texture = e,
                    u.index = h,
                    u.globalCompositeOperation = t.globalCompositeOperation,
                    u.shader = n,
                    u.clip = r,
                    r && (u.clipRectangle.x = s.x,
                    u.clipRectangle.y = s.y,
                    u.clipRectangle.width = s.width,
                    u.clipRectangle.height = s.height)
                }
                return h
            }
            ,
            i.isPowerOfTwo = function(t, e) {
                return t > 0 && 0 == (t & t - 1) && e > 0 && 0 == (e & e - 1)
            }
            ,
            i.activate = function(t, e) {
                var i = t === this._activeCtx;
                i && !e || (i || (this.flush(),
                this.gl.finish(),
                this._activeCtx = t),
                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, t.frameBuffer),
                this.gl.viewport(0, 0, t.width, t.height),
                this._activeShader = null)
            }
            ,
            i.onReload = function(t) {
                this.subscribe("Reload", t)
            }
            ,
            e
        }(s.a))(window.canvas)
          , O = e.c = L
    },
    371: function(t, e, i) {
        "use strict";
        var n = i(384)
          , r = {};
        r.screen = new n.a;
        var s = Math.min(2, window.devicePixelRatio || 1);
        r.devicePixelRatio = s,
        r.screen.defaultDevicePixelRatio = s,
        r.screen.devicePixelRatio = s,
        r.screen.width = window.innerWidth * s,
        r.screen.height = window.innerHeight * s,
        r.setDevicePixelRatio = function(t) {
            r.devicePixelRatio = r.screen.devicePixelRatio = t;
            var e = Math.floor(window.innerWidth * t)
              , i = Math.floor(window.innerHeight * t);
            r.width = r.screen.width = e,
            r.height = r.screen.height = i,
            r.screen.publish("Resize", e, i)
        }
        ,
        r.defaultFontFamily = "Helvetica",
        r.defaultFontWeight = "",
        r.width = window.innerWidth * s,
        r.height = window.innerHeight * s,
        r.init = function(t) {
            var e = t.heightMargin || 0;
            r.heightMargin = e;
            var i = function() {
                var t = r.screen.devicePixelRatio
                  , i = window.document
                  , n = i.documentElement
                  , s = (n && n.clientWidth || i.clientWidth || window.innerWidth) * t
                  , o = (n && n.clientHeight || i.clientHeight || window.innerHeight) * t;
                o -= e * t,
                s === r.width && o === r.height && r.screen.orientation || (r.width = s,
                r.height = o,
                r.screen.width = s,
                r.screen.height = o,
                r.screen.orientation = s > o ? "landscape" : "portrait",
                r.screen.publish("Resize", s, o))
            };
            window.addEventListener("resize", i, !1),
            i(),
            r.screen.width = r.width,
            r.screen.height = r.height
        }
        ,
        e.a = r
    },
    373: function(t, e, i) {
        "use strict";
        var n = {}
          , r = navigator.language && navigator.language.split("-")
          , s = (r[0] || "en").toLowerCase()
          , o = (r[1] || "US").toUpperCase()
          , a = ["AD", "AT", "BE", "BL", "CY", "DE", "EE", "ES", "EU", "FI", "FR", "GR", "IE", "IT", "LU", "LV", "MC", "ME", "MT", "MQ", "NL", "PM", "PT", "RE", "SI", "SK", "SM", "VA", "YT"];
        n.localizeResourceMap = function(t) {
            var e = {}
              , i = "resources-" + s + "-" + o
              , n = "resources-" + s
              , r = "resources-" + o;
            for (var h in t) {
                var u = h
                  , l = h.indexOf(i)
                  , c = h.indexOf(n)
                  , d = h.indexOf(r)
                  , f = h.indexOf("resources-EU");
                0 === l ? u = "resources" + h.substring(i.length) : 0 === c ? u = "resources" + h.substring(n.length) : 0 === d ? u = "resources" + h.substring(r.length) : 0 === f && -1 !== a.indexOf(o) && (u = "resources" + h.substring("resources-EU".length)),
                e[u] = t[h]
            }
            return e
        }
        ,
        n.applyResourceMap = function(t, e) {
            var i = {}
              , n = "resources-" + e;
            for (var r in t) {
                var s = r;
                0 === r.indexOf(n) ? i[s = "resources" + r.substring(n.length)] = t[r] : void 0 === i[s] && (i[s] = t[r])
            }
            return i
        }
        ;
        var h = n
          , u = i(449)
          , l = i(370)
          , c = i(400)
          , d = {}
          , f = {
            598: !0,
            599: !0,
            429: !0
        }
          , p = {};
        d.overrideImageSize = function(t, e, i) {
            p[t] = {
                width: e,
                height: i
            }
        }
        ,
        d.loadImage = function(t, e) {
            return e._assetLoadingCount += 1,
            new Promise((function(i) {
                var n = new Image;
                n.crossOrigin = "anonymous";
                var r = 4
                  , s = 100;
                n.onload = function() {
                    var n = this;
                    if (this.width) {
                        this.onload = null,
                        this.onerror = null;
                        var r = this
                          , s = p[t];
                        if (s) {
                            var o = document.createElement("canvas")
                              , a = s.width
                              , h = s.height;
                            o.width = a,
                            o.height = h,
                            o.getContext("2d").drawImage(r, 0, 0, a, h),
                            r = o
                        }
                        var u = l.c.isSupported ? new c.a(r,t) : r;
                        e._assetLoadingCount -= 1,
                        i(u)
                    } else
                        var d = 0
                          , f = setInterval((function() {
                            return n.width ? (clearInterval(f),
                            void n.onload()) : 5 === (d += 1) ? (clearInterval(f),
                            void n.onerror({
                                reason: "image has no dimension",
                                status: 200
                            })) : void 0
                        }
                        ), 0)
                }
                ,
                n.onerror = function(n) {
                    var o = this;
                    if (window.navigator.onLine) {
                        if (f[n.status] && r > 0)
                            return r -= 1,
                            setTimeout((function() {
                                o.src = t
                            }
                            ), s),
                            void (s *= 2);
                        this.onload = null,
                        this.onerror = null,
                        e._assetLoadingCount -= 1,
                        i(null)
                    } else
                        setTimeout((function() {
                            o.src = t
                        }
                        ), 650)
                }
                ,
                n.src = t
            }
            ))
        }
        ;
        var g = function(t, e, i) {
            return e._assetLoadingCount += 1,
            new Promise((function(n) {
                var r = new XMLHttpRequest;
                i && (r.responseType = i);
                var s = 4
                  , o = 100;
                r.onreadystatechange = function() {
                    if (4 == ~~r.readyState) {
                        if (200 != ~~r.status)
                            return window.navigator.onLine ? f[r.status] && s > 0 ? (s -= 1,
                            setTimeout((function() {
                                r.open("GET", t, !0, e._user, e._password),
                                r.send()
                            }
                            ), o),
                            void (o *= 2)) : (r.onreadystatechange = null,
                            e._assetLoadingCount -= 1,
                            void n(null)) : void setTimeout((function() {
                                r.open("GET", t, !0, e._user, e._password),
                                r.send()
                            }
                            ), 650);
                        var i = r.response;
                        r.abort(),
                        e._assetLoadingCount -= 1,
                        n(i)
                    }
                }
                ,
                r.withCredentials = !!e._password,
                r.open("GET", t, !0, e._user, e._password),
                r.send()
            }
            ))
        };
        d.loadFile = g,
        d.loadJSON = function(t, e) {
            return g(t, e).then((function(t) {
                try {
                    return JSON.parse(t)
                } catch (t) {
                    return null
                }
            }
            ))
        }
        ,
        d.loadSound = function(t, e) {
            return g(t, e, "arraybuffer").then((function(t) {
                return t && u.a ? new Promise((function(e) {
                    u.a.decodeAudioData(t, (function(t) {
                        e(t)
                    }
                    ))
                }
                )) : null
            }
            ))
        }
        ;
        var v = d
          , _ = (i(401),
        v.loadFile)
          , m = v.loadJSON
          , w = v.loadImage
          , y = v.loadSound
          , b = {
            ".js": _,
            ".json": m,
            ".png": w,
            ".jpg": w,
            ".bmp": w,
            ".mp3": y,
            ".ogg": y,
            ".mp4": y,
            ".3gp": y,
            ".m4a": y,
            ".aac": y,
            ".flac": y,
            ".mkv": y,
            ".wav": y,
            ".css": _,
            ".html": _
        }
          , x = function(t) {
            var e = this;
            this.url = t,
            this.inProcess = !1,
            this.promise = new Promise((function(t) {
                e.resolve = t
            }
            ))
        }
          , E = function() {
            function t() {
                this._user = null,
                this._password = null,
                this._crossOrigin = void 0,
                this.cache = {},
                this._map = {},
                this._originalMap = this._map,
                this._audioMap = {},
                this._priorities = {},
                this._loadRequests = {},
                this._assetCrossOrigins = {},
                this._pendingRequests = [],
                this._pendingRequestsLowPriority = [],
                this._assetLoadingCount = 0
            }
            var e = t.prototype;
            return e.init = function(t) {
                for (var e in t)
                    this.cache[e] = t[e]
            }
            ,
            e.setAssetCrossOrigin = function(t, e) {
                this._assetCrossOrigins[t] = e
            }
            ,
            e.setAudioMap = function(t) {
                this._audioMap = t
            }
            ,
            e.has = function(t) {
                return this._map[t]
            }
            ,
            e.restoreMap = function() {
                this._map = this._originalMap
            }
            ,
            e.getMap = function() {
                return this._map
            }
            ,
            e.setMap = function(t) {
                for (var e in this.restoreMap(),
                this._map = t ? h.applyResourceMap(this._map, t) : h.localizeResourceMap(this._map),
                this._map) {
                    var i = this._map[e]
                      , n = this._getAbsoluteUrl(e);
                    this._map[n] = i
                }
            }
            ,
            e.addSheets = function(t) {
                for (var e in t)
                    for (var i = t[e], n = 0; n < i.length; n += 1) {
                        var r = i[n]
                          , s = r.f;
                        this._map[s] = {
                            sheet: e,
                            x: r.x || 0,
                            y: r.y || 0,
                            width: r.w || 0,
                            height: r.h || 0,
                            scale: r.s || 1,
                            marginTop: r.t || 0,
                            marginRight: r.r || 0,
                            marginBottom: r.b || 0,
                            marginLeft: r.l || 0
                        }
                    }
            }
            ,
            e._updateImageMap = function(t, e, i, n, r, s) {
                if (i = i || 0,
                n = n || 0,
                r = void 0 === r ? -1 : r,
                s = void 0 === s ? -1 : s,
                e) {
                    var o = this._map[e];
                    if (!o || !o.sheet)
                        return t.x = i,
                        t.y = n,
                        t.width = r,
                        t.height = s,
                        t.scale = 1,
                        void (t.url = e);
                    var a = o.scale || 1;
                    return t.x = o.x - o.marginLeft,
                    t.y = o.y - o.marginTop,
                    t.width = o.width + o.marginLeft + o.marginRight,
                    t.height = o.height + o.marginTop + o.marginBottom,
                    t.x += i * a,
                    t.y += n * a,
                    r > 0 && (t.width = r * a),
                    s > 0 && (t.height = s * a),
                    t.marginLeft = Math.max(0, o.x - t.x),
                    t.marginTop = Math.max(0, o.y - t.y),
                    t.marginRight = Math.max(0, t.x + t.width - (o.x + o.width)),
                    t.marginBottom = Math.max(0, t.y + t.height - (o.y + o.height)),
                    t.x += t.marginLeft,
                    t.y += t.marginTop,
                    t.width -= t.marginLeft + t.marginRight,
                    t.height -= t.marginTop + t.marginBottom,
                    t.scale = a,
                    t.url = o.sheet,
                    t
                }
            }
            ,
            e._getAbsoluteUrl = function(t) {
                new RegExp("^");
                return t
            }
            ,
            e._getLoadRequest = function(t) {
                if (t = this.getImageURL(t),
                t = this._getAbsoluteUrl(t),
                e = this._loadRequests[t])
                    return e;
                var e = new x(t);
                if (!t)
                    return e.inProcess = !0,
                    e.resolve(null),
                    e;
                var i = this.cache[t];
                return void 0 !== i ? (e.inProcess = !0,
                e.resolve(i),
                e) : (this._loadRequests[t] = e,
                e)
            }
            ,
            e.getLoadPromise = function(t) {
                return this._getLoadRequest(t).promise
            }
            ,
            e._requestAsset = function(t, e) {
                var i = this
                  , n = e.url;
                return t(n, this).then((function(t) {
                    i.cache[n] = t,
                    delete i._loadRequests[n],
                    e.resolve(t),
                    i._pendingRequests.length > 0 ? i._pendingRequests.shift()() : 0 === i._assetLoadingCount && i._pendingRequestsLowPriority.length > 0 && i._pendingRequestsLowPriority.shift()()
                }
                ))
            }
            ,
            e._loadAsset = function(t, e, i) {
                var n = this;
                if (!e)
                    return Promise.resolve(null);
                var r = this._getLoadRequest(t);
                return !0 === r.inProcess ? r.promise : (r.inProcess = !0,
                1 === i && 0 === this._assetLoadingCount ? (this._pendingRequestsLowPriority.push((function() {
                    return n._requestAsset(e, r)
                }
                )),
                r.promise) : 7 === this._assetLoadingCount ? (this._pendingRequests.push((function() {
                    return n._requestAsset(e, r)
                }
                )),
                r.promise) : (this._requestAsset(e, r),
                r.promise))
            }
            ,
            e.loadAsset = function(t, e) {
                var i = this._getLoadMethod(t);
                return this._loadAsset(t, i, e)
            }
            ,
            e.loadAssets = function(t, e) {
                for (var i = [], n = 0; n < t.length; n += 1) {
                    var r = t[n]
                      , s = this._getLoadMethod(r);
                    i.push(this._loadAsset(r, s, e))
                }
                return Promise.all(i)
            }
            ,
            e._loadAssets = function(t, e, i) {
                for (var n = [], r = 0; r < t.length; r += 1)
                    n.push(this._loadAsset(t[r], e, i));
                return Promise.all(n)
            }
            ,
            e.loadSound = function(t, e) {
                return this._loadAsset(t, y, e)
            }
            ,
            e.loadJSON = function(t, e) {
                return this._loadAsset(t, m, e)
            }
            ,
            e.loadImage = function(t, e) {
                return this._loadAsset(t, w, e)
            }
            ,
            e.loadSounds = function(t, e) {
                return this._loadAssets(t, y, e)
            }
            ,
            e.loadJSONs = function(t, e) {
                return this._loadAssets(t, m, e)
            }
            ,
            e.loadImages = function(t, e) {
                return this._loadAssets(t, w, e)
            }
            ,
            e._getLoadMethod = function(t) {
                var e = t.substring(t.lastIndexOf(".")).split("?")[0];
                return b[e]
            }
            ,
            e.getImageURL = function(t) {
                var e = this._map[t];
                if (e) {
                    var i = e.sheet;
                    if (i)
                        return i
                }
                return t
            }
            ,
            e.constructURLs = function(t) {
                var e;
                if ("string" != typeof t && t instanceof Array) {
                    e = [];
                    for (var i = 0; i < t.length; i += 1)
                        Array.prototype.push.apply(e, this.constructURLs(t[i]));
                    return e
                }
                var n, r = {};
                t = t.replace(/^\//, "");
                var s = this._map;
                for (n in s)
                    if (0 === n.indexOf(t)) {
                        var o = this.getImageURL(n);
                        r[o] || (r[o] = !0)
                    }
                var a = this._audioMap;
                for (n in a)
                    0 === n.indexOf(t) && (r[n] || (r[n] = !0));
                return 0 === (e = Object.keys(r)).length ? [t] : e
            }
            ,
            e.preload = function(t) {
                var e = this.constructURLs(t);
                return this.loadAssets(e)
            }
            ,
            e.setCrossOrigin = function(t) {
                this._crossOrigin = t
            }
            ,
            e.setCredentials = function(t, e) {
                this._user = t,
                this._password = e || null
            }
            ,
            t
        }();
        E.prototype.PRIORITY_LOW = 1,
        E.prototype.PRIORITY_MEDIUM = 2;
        var T = {};
        T.loadImage = w,
        T.loadJSON = m,
        T.loadSound = y,
        T.loadFile = _,
        E.prototype.loadMethods = T;
        e.a = new E
    },
    374: function(t, e, i) {
        "use strict";
        var n = {};
        (n = function() {
            function t(t, e) {
                switch (arguments.length) {
                case 0:
                    this.x = 0,
                    this.y = 0;
                    break;
                case 1:
                    this.x = t.x || 0,
                    this.y = t.y || 0;
                    break;
                case 2:
                    this.x = t || 0,
                    this.y = e || 0
                }
            }
            var e = t.prototype;
            return e.rotate = function(t) {
                var e = this.x
                  , i = this.y
                  , n = Math.cos(t)
                  , r = Math.sin(t);
                return this.x = e * n - i * r,
                this.y = e * r + i * n,
                this
            }
            ,
            e.add = function(t, e) {
                return "number" == typeof t ? (this.x += t,
                this.y += e) : (this.x += t.x,
                this.y += t.y),
                this
            }
            ,
            e.subtract = function(t, e) {
                return "number" == typeof t ? (this.x -= t,
                this.y -= e) : (this.x -= t.x,
                this.y -= t.y),
                this
            }
            ,
            e.scale = function(t, e) {
                return void 0 === e && (e = t),
                this.x *= t,
                this.y *= e,
                this
            }
            ,
            e.setMagnitude = function(t) {
                var e = this.getAngle();
                return this.x = t * Math.cos(e),
                this.y = t * Math.sin(e),
                this
            }
            ,
            e.normalize = function() {
                var t = this.getMagnitude();
                return this.x /= t,
                this.y /= t,
                this
            }
            ,
            e.addMagnitude = function(t) {
                return this.setMagnitude(this.getMagnitude() + t)
            }
            ,
            e.getMagnitude = function() {
                return Math.sqrt(this.x * this.x + this.y * this.y)
            }
            ,
            e.getSquaredMagnitude = function() {
                return this.x * this.x + this.y * this.y
            }
            ,
            e.getAngle = function() {
                return Math.atan2(this.y, this.x)
            }
            ,
            t
        }()).prototype.translate = n.prototype.add,
        n.prototype.getDirection = n.prototype.getAngle;
        var r = n;
        r.getPolarR = function(t, e) {
            throw "notImplemented"
        }
        ,
        r.getPolarTheta = function(t, e) {
            var i = Math.atan2(e, t) + 2 * Math.PI;
            return i > 2 * Math.PI ? i % (2 * Math.PI) : i
        }
        ,
        r.add = r.translate = function(t, e, i, n) {
            switch (arguments.length) {
            case 2:
                return new r(t).add(e);
            case 3:
                return new r(t).add(e, i);
            case 4:
                return new r(t,e).add(i, n)
            }
        }
        ,
        r.subtract = function(t, e, i, n) {
            switch (arguments.length) {
            case 2:
                return new r(t).subtract(e);
            case 3:
                return new r(t).subtract(e, i);
            case 4:
                return new r(t,e).subtract(i, n)
            }
        }
        ,
        r.scale = function(t, e, i) {
            switch (arguments.length) {
            case 2:
                return new r(t).scale(e);
            case 3:
                return new r(t,e).scale(i)
            }
        }
        ,
        r.setMagnitude = function(t, e, i) {
            switch (arguments.length) {
            case 2:
                return new r(t).setMagnitude(i);
            case 3:
                return new r(t,e).setMagnitude(i)
            }
        }
        ,
        r.addMagnitude = function(t, e, i) {
            switch (arguments.length) {
            case 2:
                pt = new r(t);
                break;
            case 3:
                pt = new r(t,e),
                e = i
            }
            return pt.addMagnitude(e)
        }
        ,
        r.getMagnitude = function(t, e) {
            return new r(t,e).getMagnitude()
        }
        ,
        r.rotate = function(t, e, i) {
            switch (arguments.length) {
            case 2:
                return new r(t).rotate(e);
            case 3:
                return new r(t,e).rotate(i)
            }
        }
        ,
        r.project = function(t, e) {
            var i = new r(e).normalize();
            return i.scale(i.x * t.x + i.y * t.y)
        }
        ,
        e.a = n
    },
    377: function(t, e, i) {
        "use strict";
        var n = i(371)
          , r = i(413)
          , s = i(361)
          , o = i(360)
          , a = {}
          , h = "px|pt|pc|in|cm|mm|%"
          , u = new RegExp("^ *(?:(normal|bold|bolder|lighter|[1-9]00) *)?(?:(normal|italic|oblique) *)?([\\d\\.]+)(" + h + ")(([\\w\"'\\- ]+(?:,|$))+)","i")
          , l = new RegExp("([\\d\\.]+)(" + h + ")","i")
          , c = {
            pt: 1,
            px: .75,
            in: 72,
            mm: 72 / 25.4,
            cm: 72 / 2.54
        }
          , d = {
            pt: 4 / 3,
            px: 1,
            in: 96,
            mm: 96 / 25.4,
            cm: 96 / 2.54
        };
        var f = null
          , p = {
            name: f,
            size: 20,
            unit: "px",
            style: "",
            weight: ""
        }
          , g = function() {
            function t(t) {
                var e;
                "string" == typeof t ? (a[t] = this,
                this._string = t,
                t = function(t) {
                    var e = t.match(u);
                    if (!e)
                        throw "invalid font string";
                    var i = {};
                    i.weight = e[1] || "normal",
                    i.style = e[2] || "normal",
                    i.size = {
                        value: parseFloat(e[3]),
                        unit: e[4]
                    };
                    var n = e[5].split(",");
                    i.names = n.map((function(t) {
                        return t.replace(/[-_]/g, " ").replace(/\s+/g, " ").replace(/['"]/g, "").replace(/^\s+|\s+$/g, "")
                    }
                    )),
                    i.name = i.names[0];
                    var r = n.map((function(t) {
                        return t.replace(/\s+/g, " ").replace(/['"]/g, "").replace(/^\s+|\s+$/g, "")
                    }
                    ));
                    return i.origName = r[0],
                    i
                }(t)) : t = Object(o.merge)(t, p),
                "string" == typeof t.size && (t.size = function(t) {
                    var e = t.match(l);
                    if (!e)
                        throw "invalid font size";
                    return {
                        value: parseFloat(e[1]),
                        unit: e[2]
                    }
                }(t.size)),
                this._name = t.name,
                this._origName = t.origName,
                this._style = t.style,
                this.size = t.size,
                this.sizePx = (e = this.size,
                {
                    value: e.value * d[e.unit],
                    unit: "px"
                }).value,
                this.sizePt = function(t) {
                    return {
                        value: t.value * c[t.unit],
                        unit: "pt"
                    }
                }(this.size).value,
                this._weight = t.weight,
                this._isBold = /bold/i.test(this._weight)
            }
            var e = t.prototype;
            return e.getSize = function() {
                return this.sizePx
            }
            ,
            e.getName = function() {
                return this._name
            }
            ,
            e.getOrigName = function() {
                return this._origName
            }
            ,
            e.getWeight = function() {
                return this._weight
            }
            ,
            t
        }();
        g.parse = function(t) {
            return t in a ? a[t] : new g(t)
        }
        ,
        g.prototype.constructor.setDefaultFontFamily = function(t) {
            f = t
        }
        ;
        var v, _ = {}, m = {}, w = function(t, e, i) {
            var r = e.customFont
              , s = r.dimensions
              , o = e.scale
              , a = (r.settings.spacing || 0) * o
              , h = 0
              , u = !0;
            if (s) {
                u = !1;
                for (var l = 0, c = 0, d = i.length; c < d; c++) {
                    var f = i.charCodeAt(c);
                    if (9 === f)
                        h += 4 * r.horizontal.width * o;
                    else if (32 === f)
                        h += r.horizontal.width * o;
                    else if (s[f]) {
                        var p = s[f]
                          , g = p.kerning[l] || 0;
                        h += (p.xadvance + g) * o + a
                    } else
                        u = !0;
                    if (u)
                        break;
                    l = f
                }
            }
            if (u) {
                var _ = t.font;
                t.font = e.size.value + e.size.unit + " " + (t.defaultFontFamily || n.a.defaultFontFamily);
                var m = {
                    failed: !0,
                    width: v.apply(t, [i])
                };
                return t.font = _,
                m
            }
            return {
                failed: !1,
                width: h
            }
        }, y = function(t, e, i, n, r, s, o, a) {
            var h = w(t, o, r);
            if (h.failed)
                return !1;
            var u = o.customFont
              , l = 0 === a ? u.images : u.strokeImages
              , c = u.dimensions
              , d = o.scale
              , f = h.width;
            f > n && (d *= n / f);
            var p = (u.settings.spacing || 0) * d;
            "alphabetic" === t.textBaseline ? i -= u.vertical.baseline * d : "middle" === t.textBaseline ? i -= u.vertical.bottom / 2 * d : "bottom" === t.textBaseline && (i -= u.vertical.bottom * d),
            "center" === t.textAlign ? e -= f / 2 : "right" === t.textAlign && (e -= f);
            for (var g = 0, v = 0, _ = r.length; v < _; v++) {
                var m = r.charCodeAt(v);
                if (9 === m)
                    e += 4 * u.horizontal.width * d;
                else if (32 === m)
                    e += u.horizontal.width * d;
                else {
                    var y = c[m];
                    e += y.kerning[g] || 0,
                    l[y.sheetIndex].render(t, y.x, y.y, y.w, y.h, e + y.ox * d, i + y.oy * d, y.w * d, y.h * d),
                    e += y.xadvance * d + p
                }
                g = m
            }
            return !0
        };
        _.findFontInfo = function(t) {
            var e = g.parse(t.font)
              , i = e.getName();
            if (i && m[i]) {
                var n = m[i];
                return e.customFont = n,
                e.scale = e.getSize() / n.settings.size,
                e
            }
            return null
        }
        ,
        _.wrapMeasureText = function(t) {
            return v = t,
            function(e) {
                var i = _.findFontInfo(this);
                if (!i)
                    return t.apply(this, arguments);
                var n = w(this, i, e);
                return n.failed ? t.apply(this, arguments) : n
            }
        }
        ,
        _.wrapFillText = function(t) {
            return function(e, i, o, a) {
                var h = _.findFontInfo(this);
                if (!h)
                    return t.apply(this, arguments);
                isNaN(i) && (i = 0),
                isNaN(o) && (o = 0);
                var u = r.a.parse(this.fillStyle);
                if (this.filter || (this.filter = new s.a.TintFilter(u)),
                this.__bmpTxtColor !== u && (this.__bmpTxtColor = u,
                this.filter.update(u)),
                !y(this, i, o, a, e + "", this.fillStyle, h, 0)) {
                    var l = this.font;
                    this.font = h.size.value + h.size.unit + " " + (this.defaultFontFamily || n.a.defaultFontFamily),
                    t.apply(this, [e, i, o]),
                    this.font = l
                }
            }
        }
        ,
        _.wrapStrokeText = function(t) {
            return function(e, i, o, a) {
                var h = _.findFontInfo(this);
                if (!h)
                    return t.apply(this, arguments);
                isNaN(i) && (i = 0),
                isNaN(o) && (o = 0);
                var u = r.a.parse(this.strokeStyle);
                if (this.filter || (this.filter = new s.a.TintFilter(u)),
                this.__bmpTxtColor !== u && (this.__bmpTxtColor = u,
                this.filter.update(u)),
                !y(this, i, o, a, e + "", this.strokeStyle, h, 1)) {
                    var l = this.font;
                    this.font = h.size.value + h.size.unit + " " + (this.defaultFontFamily || n.a.defaultFontFamily),
                    t.apply(this, [e, i, o]),
                    this.font = l
                }
            }
        }
        ;
        var b = _
          , x = i(370);
        function E(t) {
            var e = t && t.el || document.createElement("canvas");
            e.width = t.width,
            e.height = t.height;
            var i = e.getContext("2d");
            i.font = "11px " + n.a.defaultFontFamily,
            i.getElement = function() {
                return e
            }
            ,
            i.texture = null,
            e.__needsUpload = !0,
            Object.defineProperty(i, "needsUpload", {
                get: function() {
                    return e.__needsUpload
                },
                set: function(t) {
                    e.__needsUpload = t
                }
            }),
            i.reset = function() {}
            ,
            Object.defineProperty(i, "filter", {
                get: function() {
                    return this._filter
                },
                set: function(t) {
                    this._filter = t
                }
            }),
            i.clear = function() {
                this.save(),
                this.setTransform(1, 0, 0, 1, 0, 0),
                this.clearRect(0, 0, e.width, e.height),
                this.restore()
            }
            ,
            i.clipRect = function(t, e, n, r) {
                i.beginPath(),
                i.rect(t, e, n, r),
                i.clip()
            }
            ,
            i.swap = function() {}
            ,
            i.execSwap = function() {}
            ,
            i.circle = function(t, e, i) {
                this.beginPath(),
                this.arc(t, e, i, 0, 2 * Math.PI, !0)
            }
            ;
            var r = {
                img: null,
                color: null,
                canvas: null
            };
            return i.drawPointSprites = function(t, e, i, n) {
                var s = this.pointSprite;
                if (s && s.complete) {
                    var o = s.width
                      , a = s.height
                      , h = r.canvas || (r.canvas = document.createElement("canvas"));
                    if (s != r.img || this.strokeStyle != r.color) {
                        r.img = s,
                        r.color = this.strokeStyle,
                        h.width = o,
                        h.height = a;
                        var u = h.getContext("2d");
                        u.fillStyle = this.strokeStyle,
                        u.fillRect(0, 0, o, a),
                        u.globalCompositeOperation = "destination-in",
                        u.drawImage(s, 0, 0)
                    }
                    var l = i - t
                      , c = n - e
                      , d = Math.ceil(Math.sqrt(l * l + c * c) / this.pointSpriteStep);
                    d < 1 && (d = 1);
                    for (var f = this.lineWidth, p = 0; p < d; ++p) {
                        var g = t + l * p / d
                          , v = e + c * p / d;
                        this.drawImage(h, 0, 0, o, a, g - f / 2, v - f / 2, f, f)
                    }
                }
            }
            ,
            i.roundRect = function(t, e, i, n, r) {
                this.beginPath(),
                this.moveTo(t, e + r),
                this.lineTo(t, e + n - r),
                this.quadraticCurveTo(t, e + n, t + r, e + n),
                this.lineTo(t + i - r, e + n),
                this.quadraticCurveTo(t + i, e + n, t + i, e + n - r),
                this.lineTo(t + i, e + r),
                this.quadraticCurveTo(t + i, e, t + i - r, e),
                this.lineTo(t + r, e),
                this.quadraticCurveTo(t, e, t, e + r)
            }
            ,
            i.loadIdentity = function() {
                this.setTransform(1, 0, 0, 1, 0, 0)
            }
            ,
            i.measureText = b.wrapMeasureText(i.measureText),
            i.fillText = b.wrapFillText(i.fillText),
            i.strokeText = b.wrapStrokeText(i.strokeText),
            i.filter = null,
            i.setFilter = function(t) {
                this.filter = t
            }
            ,
            i.clearFilter = function() {
                this.filter = null
            }
            ,
            i.clearFilters = function() {
                this.clearFilter()
            }
            ,
            x.c.isSupported && (i._drawImage = i.drawImage,
            i.drawImage = function(t, e, i, n, r, s, o, a, h) {
                var u = t.image;
                u && (t = u),
                void 0 === s ? this._drawImage(t, e, i, n, r) : this._drawImage(t, e, i, n, r, s, o, a, h)
            }
            ),
            i
        }
        function T(t, e, i) {
            return e in t ? Object.defineProperty(t, e, {
                value: i,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = i,
            t
        }
        function C(t, e) {
            for (var i = 0; i < e.length; i++) {
                var n = e[i];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(t, n.key, n)
            }
        }
        var R = function() {
            function t(t) {
                var e;
                t = function(t) {
                    for (var e = 1; e < arguments.length; e++) {
                        var i = null != arguments[e] ? arguments[e] : {}
                          , n = Object.keys(i);
                        "function" == typeof Object.getOwnPropertySymbols && (n = n.concat(Object.getOwnPropertySymbols(i).filter((function(t) {
                            return Object.getOwnPropertyDescriptor(i, t).enumerable
                        }
                        )))),
                        n.forEach((function(e) {
                            T(t, e, i[e])
                        }
                        ))
                    }
                    return t
                }({
                    width: 300,
                    height: 200
                }, t),
                this._width = t.width,
                this._height = t.height,
                this.isWebGL = !!t.useWebGL && x.c.isSupported,
                e = this.isWebGL ? x.c.getContext(this, t) : new E(t);
                var i = this._el = e.getElement();
                return i.isWebGL = this.isWebGL,
                i.complete = !0,
                i.style && (i.style.userSelect = i.style.webkitUserSelect = i.style.webkitTouchCallout = "none"),
                i.getContext = function() {
                    return e
                }
                ,
                i
            }
            var e, i, n;
            return t.prototype.resize = function(t, e) {
                this._width = t,
                this._height = e,
                this.isWebGL && this.getContext().resize(t, e)
            }
            ,
            e = t,
            (i = [{
                key: "width",
                get: function() {
                    return this._width
                },
                set: function(t) {
                    this._width = t,
                    this.isWebGL && this.getContext().resize(this.width, this.height)
                }
            }, {
                key: "height",
                get: function() {
                    return this._height
                },
                set: function(t) {
                    this._height = t,
                    this.isWebGL && this.getContext().resize(this.width, this.height)
                }
            }]) && C(e.prototype, i),
            n && C(e, n),
            t
        }();
        e.a = R
    },
    378: function(t, e, i) {
        "use strict";
        var n = i(360)
          , r = {}
          , s = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
        r.uuid = function(t, e) {
            var i = s
              , n = []
              , r = Math.random;
            if (e = e || i.length,
            t)
                for (var o = 0; o < t; o++)
                    n[o] = i[0 | r() * e];
            else {
                var a;
                n[8] = n[13] = n[18] = n[23] = "-",
                n[14] = "4";
                for (o = 0; o < 36; o++)
                    n[o] || (a = 0 | 16 * r(),
                    n[o] = i[19 == o ? 3 & a | 8 : 15 & a])
            }
            return n.join("")
        }
        ;
        var o = r;
        i.d(e, "a", (function() {
            return u
        }
        ));
        var a = o.uuid
          , h = Array.prototype.slice
          , u = function() {
            function t() {
                this._subscribers = {},
                this._listeningTo = {}
            }
            var e = t.prototype;
            return e.publish = function(t) {
                var e, i = this._subscribers[t];
                if (!i)
                    return this;
                arguments.length > 1 && (e = h.call(arguments, 1));
                for (var r = 0; r < i.length; ++r)
                    i[r].apply(n.GLOBAL, e);
                return this
            }
            ,
            e.subscribe = function(t, e, i) {
                var r;
                2 == arguments.length ? r = e : ((r = n.bind.apply(n.GLOBAL, h.call(arguments, 1)))._ctx = e,
                r._method = i);
                var s = this._subscribers[t];
                return s = s ? s.concat([r]) : [r],
                this._subscribers[t] = s,
                this
            }
            ,
            e.subscribeOnce = function(t, e, i) {
                var r = arguments
                  , s = Object(n.bind)(this, (function() {
                    this.unsubscribe(t, s),
                    2 == r.length ? e.apply(n.GLOBAL, arguments) : n.bind.apply(n.GLOBAL, h.call(r, 1)).apply(n.GLOBAL, arguments)
                }
                ));
                return r.length >= 3 && (s._ctx = e,
                s._method = i),
                this.subscribe(t, s)
            }
            ,
            e.unsubscribe = function(t, e, i) {
                var n = this._subscribers[t];
                if (!n)
                    return this;
                for (var r = [], s = 0; s < n.length; s++) {
                    var o = n[s];
                    o !== e && (o._ctx !== e || i && o._method !== i) && r.push(n[s])
                }
                return this._subscribers[t] = r,
                this
            }
            ,
            e.listeners = function(t) {
                return this.hasOwnProperty.call(this._subscribers, t) ? this._subscribers[t] : this._subscribers[t] = []
            }
            ,
            e.on = function(t, e) {
                return this.listeners(t).length + 1 > this._maxListeners && 0 !== this._maxListeners && "undefined" != typeof console && console.warn("Possible EventEmitter memory leak detected. " + this._subscribers[t].length + " listeners added. Use emitter.setMaxListeners() to increase limit."),
                this.emit("newListener", t, e),
                this.subscribe(t, this, e)
            }
            ,
            e.once = function(t, e) {
                return this.subscribeOnce(t, this, e)
            }
            ,
            e.removeListener = function(t, e) {
                return this.unsubscribe(t, this, e),
                this
            }
            ,
            e.removeAllListeners = function(t) {
                for (var e in this._subscribers)
                    null != t && t != e || delete this._subscribers[e];
                return this
            }
            ,
            e.emit = function(t) {
                return this.publish.apply(this, arguments),
                this.listeners(t).length > 0
            }
            ,
            e.setMaxListeners = function(t) {
                this._maxListeners = t
            }
            ,
            e.hasListeners = function(t) {
                return this._subscribers[t] && this._subscribers[t].length
            }
            ,
            e.listenTo = function(t, e, i) {
                var n = t._listenId || (t._listenId = a(8, 16));
                return this._listeningTo[n] = t,
                t.subscribe(e, this, i),
                this
            }
            ,
            e.stopListening = function(t, e, i) {
                var r, s, o, a, h, u, l = this._listeningTo;
                n.logger.log(t);
                var c = !e && !i;
                for (var d in t && ((l = {})[t._listenId] = t),
                l) {
                    for (t = l[d],
                    s = e ? [e] : Object.keys(t._subscribers),
                    a = 0; a < s.length; a++)
                        if (e = s[a],
                        r = t._subscribers[e]) {
                            for (t._subscribers[e] = o = [],
                            h = 0; h < r.length; h++)
                                u = r[h],
                                (i && i !== u._method || this && this !== u._ctx) && o.push(u);
                            o.length || delete t._subscribers[e]
                        }
                    c && delete this._listeningTo[d]
                }
                return this
            }
            ,
            t
        }();
        u.prototype.addListener = u.prototype.on,
        u.prototype._maxListeners = 10
    },
    383: function(t, e, i) {
        "use strict";
        var n = i(378)
          , r = i(360)
          , s = function() {
            function t() {
                this._run = []
            }
            var e = t.prototype;
            return e.fired = function() {
                return this._fired
            }
            ,
            e.reset = function() {
                this._args = [],
                this._fired = !1
            }
            ,
            e.clear = function() {
                this.reset(),
                this._run = [],
                this._pending = null,
                this._stat = null
            }
            ,
            e.forward = function(t) {
                this.run.apply(this, t)
            }
            ,
            e.run = function(t, e) {
                var i = e ? r.bind.apply(this, arguments) : t;
                return i && (this._fired ? i.apply(this, this._args) : this._run.push(i)),
                this
            }
            ,
            e.runOrTimeout = function(t, e, i) {
                if (t || e)
                    if (this._fired)
                        t.apply(this, this._args);
                    else {
                        var n = Object(r.bind)(this, (function() {
                            clearTimeout(s),
                            t.apply(this, this._args)
                        }
                        ));
                        this.run(n);
                        var s = setTimeout(Object(r.bind)(this, (function() {
                            for (var t = 0, i = this._run.length; t < i; ++t)
                                if (this._run[t] == n) {
                                    this._run.splice(t, 1);
                                    break
                                }
                            e()
                        }
                        )), i)
                    }
            }
            ,
            e.fire = function() {
                if (!this._fired) {
                    this._fired = !0;
                    var t = this._run;
                    this._args = arguments;
                    for (var e = 0, i = t.length; e < i; ++e)
                        t[e] && t[e].apply(this, arguments)
                }
            }
            ,
            e.chain = function(t) {
                return this._pending || (this._pending = {}),
                void 0 === t && (t = this._id++),
                this._pending[t] = !0,
                this.reset(),
                Object(r.bind)(this, "_deferred", t)
            }
            ,
            e._deferred = function(t) {
                if (this._stat || (this._stat = {}),
                !this._stat.hasOwnProperty(t)) {
                    this._stat[t] = Array.prototype.slice.call(arguments, 1);
                    var e = this._pending;
                    for (var t in delete e[t],
                    e)
                        if (e.hasOwnProperty(t))
                            return;
                    this.fire(this._stat)
                }
            }
            ,
            t
        }();
        s.prototype._fired = !1,
        s.prototype._id = 0,
        s.prototype._pending = null,
        s.prototype.hasFired = s.prototype.fired;
        var o = s
          , a = i(373)
          , h = i(450)
          , u = i(431)
          , l = i(377)
          , c = null
          , d = null
          , f = {}
          , p = {}
          , g = 0
          , v = !0
          , _ = function() {
            function t() {}
            var e = t.prototype;
            return e.initialize = function() {
                var t = (c = new l.a({
                    useWebGL: !1
                })).getContext("2d")
                  , e = t.globalCompositeOperation;
                t.globalCompositeOperation = "multiply",
                this._compositeMultiplySupported = "multiply" === t.globalCompositeOperation,
                t.globalCompositeOperation = e,
                v = !1,
                this.useWebGL = u.a.useWebGL,
                this.isCacheEnabled = !1
            }
            ,
            e.enableCache = function() {
                this.isCacheEnabled = !0,
                u.a.subscribe("Tick", this, this.onTick)
            }
            ,
            e.onTick = function() {
                g++,
                f = p,
                p = {}
            }
            ,
            e.renderFilter = function(t, e, i, n, r, s) {
                v && this.initialize();
                var o, a, h = t.filter, u = h && h.getType && h.getType(), l = "NegativeMask" === u || "PositiveMask" === u, f = t.isWebGL && !l;
                if (!h || f || !h.getType)
                    return null;
                var p = !1;
                if (!this.useWebGL || l) {
                    if (this.isCacheEnabled || this.enableCache(),
                    o = this.getCacheKey(e.getOriginalURL(), i, n, r, s, h),
                    a = this.cache.get(o))
                        return a;
                    p = this.testShouldCache(o)
                }
                p ? a = this.getCanvas(r, s) : ((a = c).needsUpload = !0,
                a.width = r,
                a.height = s);
                var g = a.getContext("2d");
                switch (g.needsUpload = !0,
                u) {
                case "LinearAdd":
                    this.renderColorFilter(t, e, i, n, r, s, h, "lighter", g);
                    break;
                case "Tint":
                    this.renderColorFilter(t, e, i, n, r, s, h, "source-over", g);
                    break;
                case "Multiply":
                    this._compositeMultiplySupported ? this.renderColorFilter(t, e, i, n, r, s, h, "multiply", g) : this.renderMultiply(t, e, i, n, r, s, h, g);
                    break;
                case "NegativeMask":
                    this.renderMask(t, e, i, n, r, s, h.getMask(), "source-in", g);
                    break;
                case "PositiveMask":
                    this.renderMask(t, e, i, n, r, s, h.getMask(), "source-out", g)
                }
                if (p) {
                    var _ = this.cache.put(o, a);
                    d = _ ? _.value : null
                }
                return a
            }
            ,
            e.testShouldCache = function(t) {
                var e = p[t] = f[t] || g;
                return g - e > 3
            }
            ,
            e.renderColorFilter = function(t, e, i, n, r, s, o, a, h) {
                h.globalCompositeOperation = "source-over",
                e.render(h, i, n, r, s, 0, 0, r, s),
                h.globalCompositeOperation = a,
                h.fillStyle = o._color.toString(),
                h.fillRect(0, 0, r, s),
                h.globalCompositeOperation = "destination-in",
                e.render(h, i, n, r, s, 0, 0, r, s)
            }
            ,
            e.renderMultiply = function(t, e, i, n, r, s, o, a) {
                for (var h = o._color.get(), u = e.getImageData(i, n, r, s), l = u.data, c = h.a, d = 1 + c * (h.r / 255 - 1), f = 1 + c * (h.g / 255 - 1), p = 1 + c * (h.b / 255 - 1), g = 0, v = l.length; g < v; g += 4)
                    l[g] *= d,
                    l[g + 1] *= f,
                    l[g + 2] *= p;
                a.putImageData(u, 0, 0)
            }
            ,
            e.renderMask = function(t, e, i, n, r, s, o, a, h) {
                var u = o.getBounds()
                  , l = u.x
                  , c = u.y
                  , d = u.width
                  , f = u.height
                  , p = r / o.getWidth()
                  , g = s / o.getHeight()
                  , v = u.marginLeft * p
                  , _ = u.marginTop * g
                  , m = r - (u.marginLeft + u.marginRight) * p
                  , w = s - (u.marginTop + u.marginBottom) * g;
                h.globalCompositeOperation = "source-over",
                o.render(h, l, c, d, f, v, _, m, w),
                h.globalCompositeOperation = a,
                e.render(h, i + v, n + _, m, w, v, _, m, w)
            }
            ,
            e.clearCache = function() {
                this.cache.removeAll()
            }
            ,
            e.getCacheKey = function(t, e, i, n, r, s) {
                var o, a = s && s.getType && s.getType();
                if ("NegativeMask" === a || "PositiveMask" === a)
                    o = s.getMask().getOriginalURL();
                else {
                    var h = s._color.get();
                    o = (255 * h.a & 255) + "|" + h.r + "|" + h.g + "|" + h.b
                }
                return a + "|" + t + "|" + e + "|" + i + "|" + n + "|" + r + "|" + o
            }
            ,
            e.getCanvas = function(t, e) {
                var i;
                return d ? ((i = d).width = t,
                i.height = e,
                d = null) : i = new l.a({
                    width: t,
                    height: e
                }),
                i
            }
            ,
            t
        }();
        _.prototype.cache = new h.a(1024);
        var m = new _;
        i(400);
        i.d(e, "a", (function() {
            return x
        }
        ));
        var w = function(t, e, i, n, r, s, o, a, h, u) {
            this.url = u,
            this.x = e,
            this.y = i,
            this.width = n,
            this.height = r,
            this.marginTop = s,
            this.marginRight = o,
            this.marginBottom = a,
            this.marginLeft = h
        }
          , y = null
          , b = null
          , x = function(t) {
            var e, i;
            function n(e) {
                var i;
                return e || (e = {}),
                (i = t.call(this) || this)._cb = new o,
                i._map = new w(function(t) {
                    if (void 0 === t)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t
                }(i),0,0,-1,-1,0,0,0,0,e.url || ""),
                i._originalURL = e.url || "",
                i._scale = e.scale || 1,
                i._loadRequest = null,
                i._crossOrigin = e.crossOrigin,
                a.a._updateImageMap(i._map, e.url, e.sourceX, e.sourceY, e.sourceW, e.sourceH),
                i._onMapUpdate(),
                i._setSrcImg(e.srcImage, i._map.url, !1),
                i
            }
            i = t,
            (e = n).prototype = Object.create(i.prototype),
            e.prototype.constructor = e,
            e.__proto__ = i;
            var r = n.prototype;
            return r._setSrcImg = function(t, e, i) {
                var n = this;
                if (void 0 === t) {
                    this._crossOrigin && a.a.setAssetCrossOrigin(e, this._crossOrigin);
                    var r = a.a.getImageURL(e);
                    if (void 0 === (t = a.a.cache[r])) {
                        this._cb.reset(),
                        this._isError = !1,
                        this._srcImg = null;
                        var s = i ? a.a.loadImage(e) : a.a.getLoadPromise(e);
                        return this._loadRequest = s,
                        s.then((function(t) {
                            s === n._loadRequest && n._onLoad(t)
                        }
                        ))
                    }
                }
                this._loadRequest = null,
                this._onLoad(t)
            }
            ,
            r._forceLoad = function(t) {
                var e;
                this._originalURL || (e = this._srcImg);
                var i = this._setSrcImg(e, this._originalURL, !0);
                return i ? i.then((function() {
                    return t && t()
                }
                )) : t && t()
            }
            ,
            r._addAssetsToList = function(t) {
                var e = this._originalURL;
                -1 === t.indexOf(e) && t.push(e)
            }
            ,
            r.getSrcImg = function() {
                return this._srcImg
            }
            ,
            r.setSrcImg = function(t) {
                this._setSrcImg(t)
            }
            ,
            r.reload = function(t) {
                this._srcImg && (t && t.chain && (t = t.chain()),
                t && (this._cb.fired() ? setTimeout(t, 0) : this._cb.run(t)))
            }
            ,
            r._onMapUpdate = function() {
                var t = this._map;
                this._x = t.x,
                this._y = t.y,
                this._width = t.width,
                this._height = t.height;
                var e = t.marginLeft
                  , i = t.marginTop
                  , n = 1 / (e + this._width + t.marginRight)
                  , r = 1 / (i + this._height + t.marginBottom);
                this._marginLeftRatio = e * n,
                this._marginRightRatio = i * r,
                this._widthRatio = this._width * n,
                this._heightRatio = this._height * r
            }
            ,
            r.getURL = function() {
                return this._map.url
            }
            ,
            r.getOriginalURL = function() {
                return this._originalURL
            }
            ,
            r.getSourceX = function() {
                return this._map.x
            }
            ,
            r.getSourceY = function() {
                return this._map.y
            }
            ,
            r.getSourceW = function() {
                return this._map.width
            }
            ,
            r.getSourceH = function() {
                return this._map.height
            }
            ,
            r.getOrigW = function() {
                return this._srcImg.width
            }
            ,
            r.getOrigH = function() {
                return this._srcImg.height
            }
            ,
            r.setSourceX = function(t) {
                this._map.x = t,
                this._onMapUpdate()
            }
            ,
            r.setSourceY = function(t) {
                this._map.y = t,
                this._onMapUpdate()
            }
            ,
            r.setSourceW = function(t) {
                this._map.width = t,
                this._onMapUpdate()
            }
            ,
            r.setSourceH = function(t) {
                this._map.height = t,
                this._onMapUpdate()
            }
            ,
            r.setMarginTop = function(t) {
                this._map.marginTop = t,
                this._onMapUpdate()
            }
            ,
            r.setMarginRight = function(t) {
                this._map.marginRight = t,
                this._onMapUpdate()
            }
            ,
            r.setMarginBottom = function(t) {
                this._map.marginBottom = t,
                this._onMapUpdate()
            }
            ,
            r.setMarginLeft = function(t) {
                this._map.marginLeft = t,
                this._onMapUpdate()
            }
            ,
            r.setURL = function(t) {
                a.a._updateImageMap(this._map, t),
                this._setSrcImg(null, this._map.url)
            }
            ,
            r.getWidth = function() {
                var t = this._map;
                return (-1 == t.width ? 0 : t.width + t.marginLeft + t.marginRight) / t.scale
            }
            ,
            r.getHeight = function() {
                var t = this._map;
                return (-1 === t.height ? 0 : t.height + t.marginTop + t.marginBottom) / t.scale
            }
            ,
            r.getBounds = function() {
                return this._map
            }
            ,
            r.setBounds = function(t, e, i, n, r, s, o, a) {
                var h = this._map;
                h.x = t,
                h.y = e,
                h.width = i,
                h.height = n,
                h.marginTop = r || 0,
                h.marginRight = s || 0,
                h.marginBottom = o || 0,
                h.marginLeft = a || 0,
                this._onMapUpdate(),
                this.emit("changeBounds")
            }
            ,
            r.doOnLoad = function() {
                return this._cb.forward(arguments),
                this
            }
            ,
            r._onLoad = function(t) {
                if (!t)
                    return this._isError = !0,
                    void this._cb.fire({
                        NoImage: !0
                    });
                this._srcImg = t,
                this._isError = !1;
                var e = this._map;
                1 === this._scale || -1 === e.width && -1 === e.height ? (-1 === e.width && (e.width = t.width),
                -1 === e.height && (e.height = t.height)) : (-1 === e.width && (e.width = t.width * e.height / t.height),
                -1 === e.height && (e.height = t.height * e.width / t.width),
                t.width = e.width,
                t.height = e.height),
                e.url = t.src,
                this._onMapUpdate(),
                this._cb.fire(null, this)
            }
            ,
            r.isError = function() {
                return this._isError
            }
            ,
            r.isReady = function() {
                return !this._isError && this._cb.fired()
            }
            ,
            r.renderShort = function(t, e, i, n, r) {
                e += n * this._marginLeftRatio,
                i += r * this._marginRightRatio,
                n *= this._widthRatio,
                r *= this._heightRatio,
                this.render(t, this._x, this._y, this._width, this._height, e, i, n, r)
            }
            ,
            r.render = function(t, e, i, n, r, s, o, a, h) {
                if (this.isReady()) {
                    var u = this._srcImg;
                    if (t.filter) {
                        var l = m.renderFilter(t, this, e, i, n, r);
                        l && (u = l,
                        e = 0,
                        i = 0)
                    }
                    t.drawImage(u, e, i, n, r, s, o, a, h)
                }
            }
            ,
            r.getImageData = function(t, e, i, n) {
                null === y && (y = new l.a,
                b = y.getContext("2d"));
                var r = this._map;
                if (!r.width || !r.height)
                    throw "Not loaded";
                return t = t || 0,
                e = e || 0,
                i = i || r.width,
                n = n || r.height,
                y.width = i,
                y.height = n,
                b.clear(),
                this.render(b, t, e, i, n, 0, 0, i, n),
                b.getImageData(0, 0, i, n)
            }
            ,
            n
        }(n.a);
        x.prototype.getSource = x.prototype.getSrcImg,
        x.prototype.setSource = x.prototype.setSrcImg,
        x.prototype.getSourceWidth = x.prototype.getSourceW,
        x.prototype.getSourceHeight = x.prototype.getSourceH,
        x.prototype.getOrigWidth = x.prototype.getOrigW,
        x.prototype.getOrigHeight = x.prototype.getOrigH,
        x.prototype.setSourceWidth = x.prototype.setSourceW,
        x.prototype.setSourceHeight = x.prototype.setSourceH,
        x.prototype.getMap = x.prototype.getBounds,
        x.prototype.setMap = x.prototype.setBounds,
        x.prototype.isLoaded = x.prototype.isReady
    },
    384: function(t, e, i) {
        "use strict";
        var n = i(378);
        e.a = n.a
    },
    385: function(t, e, i) {
        "use strict";
        var n = i(374)
          , r = i(386)
          , s = {};
        s.eventTypes = new r.a("START","MOVE","SELECT","SCROLL","CLEAR"),
        s.VERTICAL_AXIS = 2,
        s.HORIZONTAL_AXIS = 1,
        s.dispatchEvent = function(t, e) {
            e.root = t,
            s.traceEvt(t, e, e.srcPt);
            var i = e.depth;
            s._evtHistory[e.type] = e;
            for (var n, r, o = s._evtCb[e.type] || s.getEvtCbName(e.type), a = i - 1; a >= 0; a--)
                if (n = e.trace[a],
                r = e.pt[n.uid],
                n.publish(o + "Capture", e, r, 0 === a),
                e.cancelled || n.__input.blockEvents)
                    return;
            for (var h = "on" + o, u = 0; u < i && (!(n = e.trace[u]).__input.canHandleEvents || (r = e.pt[n.uid],
            n[h] && n[h](e, r, 0 === u),
            n.publish(o, e, r, 0 === u),
            n._onEventPropagate(e, r, 0 === u),
            !e.cancelled)); u++)
                ;
        }
        ,
        s.traceEvt = function(t, e, i) {
            var r = t.style.localizePoint(new n.a(i));
            if (!t.getInput().containsEvent(e, r))
                return !1;
            var o = t.getInput().canHandleEvents;
            o && (e.depth++,
            e.trace.unshift(t),
            e.pt[t.uid] = r);
            for (var a = t.getVisibleViewBackings(), h = a.length - 1; h >= 0; --h)
                if (s.traceEvt(a[h]._view, e, r))
                    return !0;
            return o ? (e.target = t,
            !0) : void 0
        }
        ,
        s._evtHistory = {},
        s._activeInputOver = {},
        s.clearOverState = function(t) {
            if (t) {
                var e = s._activeInputOver[t];
                if (e) {
                    delete s._activeInputOver[t];
                    var i = e.trace;
                    if (i)
                        for (var n = 0; n < i.length; ++n)
                            i[n].__input.onLeave(t, null, e)
                }
            } else
                for (t in s._activeInputOver)
                    s.clearOverState(t)
        }
        ,
        s._isDragging = !1,
        s.isDragging = function() {
            return s._isDragging
        }
        ,
        s._evtCb = {},
        s.getEvtCbName = function(t) {
            var e = s.eventTypes[t];
            return s._evtCb[t] = "Input" + e.charAt(0) + e.substring(1).toLowerCase()
        }
        ,
        e.a = s
    },
    386: function(t, e, i) {
        "use strict";
        var n;
        n = function() {
            if (1 == arguments.length) {
                if ("object" == typeof arguments[0]) {
                    var t = arguments[0];
                    for (var e in t)
                        t[e]in t || (t[t[e]] = e);
                    return t
                }
                "string" != typeof arguments[0] && (i = arguments[0])
            }
            if (!i)
                var i = arguments;
            t = {},
            e = 0;
            for (var n = i.length; e < n; ++e)
                i[e] && (t[i[e]] = e + 1),
                t[e + 1] = i[e];
            return t
        }
        ,
        e.a = n
    },
    387: function(t, e, i) {
        "use strict";
        i.d(e, "a", (function() {
            return n
        }
        ));
        var n = function() {
            function t() {
                this.identity()
            }
            var e = t.prototype;
            return e.identity = function() {
                this.a = 1,
                this.b = 0,
                this.c = 0,
                this.d = 1,
                this.tx = 0,
                this.ty = 0
            }
            ,
            e.clone = function() {
                var e = new t;
                return e.copy(this),
                e
            }
            ,
            e.copy = function(t) {
                this.a = t.a,
                this.b = t.b,
                this.c = t.c,
                this.d = t.d,
                this.tx = t.tx,
                this.ty = t.ty
            }
            ,
            e.scale = function(t, e) {
                this.a *= t,
                this.b *= t,
                this.c *= e,
                this.d *= e
            }
            ,
            e.rotate = function(t) {
                var e = this.a
                  , i = this.b
                  , n = this.c
                  , r = this.d
                  , s = Math.sin(t)
                  , o = Math.cos(t);
                this.a = e * o + n * s,
                this.b = i * o + r * s,
                this.c = e * -s + n * o,
                this.d = i * -s + r * o
            }
            ,
            e.translate = function(t, e) {
                this.tx += this.a * t + this.c * e,
                this.ty += this.b * t + this.d * e
            }
            ,
            e.transform = function(t) {
                var e = this.a
                  , i = this.b
                  , n = this.c
                  , r = this.d
                  , s = this.tx
                  , o = this.ty;
                return 1 === t.a && 0 === t.b && 0 === t.c && 1 === t.d || (this.a = e * t.a + n * t.b,
                this.b = i * t.a + r * t.b,
                this.c = e * t.c + n * t.d,
                this.d = i * t.c + r * t.d),
                this.tx = e * t.tx + n * t.ty + s,
                this.ty = i * t.tx + r * t.ty + o,
                this
            }
            ,
            e.setTo = function(t, e, i, n, r, s) {
                this.a = t,
                this.b = e,
                this.c = i,
                this.d = n,
                this.tx = r,
                this.ty = s
            }
            ,
            e.invert = function() {
                var t = this.a * this.d - this.b * this.c;
                if (0 !== t) {
                    t = 1 / t;
                    var e = this.a
                      , i = this.b
                      , n = this.c
                      , r = this.d
                      , s = this.tx
                      , o = this.ty;
                    return this.a = r * t,
                    this.b = -i * t,
                    this.c = -n * t,
                    this.d = e * t,
                    this.tx = (n * o - r * s) * t,
                    this.ty = (i * s - e * o) * t,
                    this
                }
            }
            ,
            e.isEqualTo = function(t) {
                return this.a === t.a && this.b === t.b && this.c === t.c && this.d === t.d && this.tx === t.tx && this.ty === t.ty
            }
            ,
            e.concat = function(t) {
                var e = this.a
                  , i = this.b
                  , n = this.c
                  , r = this.d
                  , s = this.tx
                  , o = this.ty;
                return 1 === t.a && 0 === t.b && 0 === t.c && 1 === t.d || (this.a = e * t.a + n * t.b,
                this.b = i * t.a + r * t.b,
                this.c = e * t.c + n * t.d,
                this.d = i * t.c + r * t.d),
                this.tx = t.a * s + t.c * o + t.tx,
                this.ty = t.b * s + t.d * o + t.ty,
                this
            }
            ,
            t
        }()
    },
    397: function(t, e, i) {
        "use strict";
        for (var n, r = {}, s = null, o = window.requestAnimationFrame, a = window.cancelAnimationFrame, h = ["", "webkit", "moz", "o", "ms"], u = 0; u < h.length && !o; ++u)
            o = window[h[u] + "RequestAnimationFrame"],
            a = window[h[u] + "CancelAnimationFrame"] || window[h[u] + "CancelRequestAnimationFrame"];
        function l() {
            if (s) {
                var t = Date.now()
                  , e = t - r.last;
                r.last = t,
                n = o(l),
                s(e)
            }
        }
        r.last = 0,
        r.start = function(t) {
            s = t,
            r.last = Date.now(),
            n = o(l)
        }
        ,
        r.stop = function() {
            s = null,
            n && (a(n),
            n = null)
        }
        ;
        var c = r
          , d = {
            now: 0,
            frames: 0
        }
          , f = 0
          , p = 0;
        d.reset = function() {
            f = window.performance.now(),
            p = d.frames
        }
        ;
        var g = 60;
        d.init = function(t) {
            g = t
        }
        ,
        d.tick = function(t) {
            t > g && (t = g),
            d.now += t,
            d.frames++,
            d.onTick(t)
        }
        ,
        d.onLargeTick = function(t, e) {}
        ,
        d.onTick = function() {}
        ,
        d.debug = !1,
        d.start = function(t) {
            this.reset(),
            this.isRunning = !0,
            c.start(d.tick, t)
        }
        ,
        d.stop = function() {
            this.reset(),
            this.isRunning = !1,
            c.stop()
        }
        ,
        d.getTickProgress = function() {
            var t = +new Date;
            return t - (c.last || t)
        }
        ,
        d.getAverageFPS = function() {
            var t = window.performance.now();
            return 1e3 * (this.frames - p) / (t - f)
        }
        ;
        e.a = d
    },
    400: function(t, e, i) {
        "use strict";
        i.d(e, "a", (function() {
            return r
        }
        ));
        var n = i(370)
          , r = function() {
            function t(t) {
                this.image = t,
                this.texture = t.texture || null,
                this.width = t.width,
                this.height = t.height,
                this.__needsUpload = !1,
                null === this.texture && this.createTexture(),
                n.c.subscribe(n.b, this, "handleContextReload")
            }
            var e = t.prototype;
            return e.remove = function() {
                n.c.unsubscribe(n.b, this, "handleContextReload")
            }
            ,
            e.createTexture = function() {
                var t = n.c.createTexture(this);
                this.texture = t.glTexture
            }
            ,
            e.handleContextReload = function() {
                this.__needsUpload || this.createTexture()
            }
            ,
            t
        }()
    },
    401: function(t, e, i) {
        "use strict";
        var n = {}
          , r = jsio.__jsio.__util;
        n.join = r.buildPath,
        n.resolveRelativePath = r.resolveRelativePath,
        n.splitPath = r.splitPath,
        n.relative = r.relative,
        n.splitExt = function(t) {
            var e = n.splitPath(t)
              , i = e.filename.lastIndexOf(".");
            return -1 == i ? (e.basename = e.filename,
            e.ext = "") : (e.basename = e.filename.substring(0, i),
            e.ext = e.filename.substring(i)),
            e
        }
        ,
        e.a = n
    },
    408: function(t, e, i) {
        "use strict";
        var n = i(386)
          , r = i(374)
          , s = {};
        (s = function() {
            function t(t, e, i, n) {
                switch (arguments.length) {
                case 0:
                    this.start = new r.a,
                    this.end = new r.a;
                    break;
                case 1:
                    this.start = new r.a(t.start),
                    this.end = new r.a(t.end);
                    break;
                case 2:
                    this.start = new r.a(t),
                    this.end = new r.a(e);
                    break;
                case 3:
                    this.start = new r.a(t),
                    this.end = new r.a(e,i);
                    break;
                case 4:
                default:
                    this.start = new r.a(t,e),
                    this.end = new r.a(i,n)
                }
            }
            return t.prototype.getLength = function() {
                var t = this.end.x - this.start.x
                  , e = this.end.y - this.start.y;
                return Math.sqrt(t * t + e * e)
            }
            ,
            t
        }()).prototype.getMagnitude = s.prototype.getLength;
        var o = s
          , a = {};
        a.pointAndRect = a.ptAndRect = function(t, e) {
            var i = t.x
              , n = t.y;
            return i >= e.x && i <= e.x + e.width && n >= e.y && n <= e.y + e.height
        }
        ,
        a.rectAndPoint = a.rectAndPt = function(t, e) {
            return a.pointAndRect(e, t)
        }
        ,
        a.pointAndCircle = a.ptAndCirc = function(t, e) {
            var i = t.x - e.x
              , n = t.y - e.y;
            return i * i + n * n < e.radius * e.radius
        }
        ,
        a.circleAndPoint = a.circAndPt = function(t, e) {
            return a.pointAndCircle(e, t)
        }
        ,
        a.circleAndCircle = function(t, e) {
            var i = e.x - t.x
              , n = e.y - t.y
              , r = t.radius + e.radius;
            return i * i + n * n <= r * r
        }
        ,
        a.isRectAndRect = function(t, e) {
            return !(t.y + t.height < e.y || e.y + e.height < t.y || t.x + t.width < e.x || e.x + e.width < t.x)
        }
        ,
        a.circleAndRect = function(t, e) {
            return !!a.pointAndRect(t, e) || (a.lineAndCircle(e.getSide(1), t) || a.lineAndCircle(e.getSide(2), t) || a.lineAndCircle(e.getSide(3), t) || a.lineAndCircle(e.getSide(4), t))
        }
        ,
        a.rectAndCircle = function(t, e) {
            return a.circleAndRect(e, t)
        }
        ,
        a.lineAndCircle = function(t, e) {
            return a.pointToLine(e, t).getMagnitude() < e.radius
        }
        ,
        a.circleAndLine = function(t, e) {
            return a.lineAndCircle(e, t)
        }
        ,
        a.pointToLine = a.ptToLine = function(t, e) {
            var i, n = e.end.x - e.start.x, s = e.end.y - e.start.y, a = ((t.x - e.start.x) * n + (t.y - e.start.y) * s) / (n * n + s * s);
            return i = a < 0 ? new r.a(e.start) : a > 1 ? new r.a(e.end) : new r.a(e.start.x + a * n,e.start.y + a * s),
            new o(i,t)
        }
        ,
        a.rectAndRect = function(t, e) {
            return (a.rectAndRect = function(t, e) {
                if (!0 === t)
                    return new f(e);
                if (!0 === e)
                    return new f(e);
                if (a.isRectAndRect(t, e)) {
                    var i = Math.max(t.x, e.x)
                      , n = Math.max(t.y, e.y)
                      , r = Math.min(t.x + t.width, e.x + e.width)
                      , s = Math.min(t.y + t.height, e.y + e.height);
                    return new f(i,n,r - i,s - n)
                }
                return null
            }
            )(t, e)
        }
        ;
        var h, u = a, l = h = function() {
            function t(t, e, i, n) {
                switch (arguments.length) {
                case 0:
                    this.width = this.height = this.x = this.y = 0;
                    break;
                case 1:
                    this.width = t.width,
                    this.height = t.height,
                    this.x = t.x,
                    this.y = t.y;
                    break;
                case 2:
                    this.x = t.x,
                    this.y = t.y,
                    this.width = e.x,
                    this.height = e.y;
                    break;
                case 3:
                    this.x = t.x,
                    this.y = t.y,
                    this.width = e,
                    this.height = i;
                    break;
                case 4:
                    this.x = t,
                    this.y = e,
                    this.width = i,
                    this.height = n
                }
            }
            var e = t.prototype;
            return e.normalize = function() {
                return this.width < 0 && (this.x -= this.width,
                this.width = -this.width),
                this.height < 0 && (this.y -= this.height,
                this.height = -this.height),
                this
            }
            ,
            e.intersectRect = function(t) {
                if (u.isRectAndRect(this, t)) {
                    var e = this.x
                      , i = this.y
                      , n = this.x + this.width
                      , r = this.y + this.height;
                    this.x = Math.max(e, t.x),
                    this.y = Math.max(i, t.y),
                    this.width = Math.min(n, t.x + t.width) - this.x,
                    this.height = Math.min(r, t.y + t.height) - this.y
                } else
                    this.width = 0,
                    this.height = 0
            }
            ,
            e.unionRect = function(t) {
                this.normalize(),
                t.normalize && t.normalize();
                var e = this.x + this.width
                  , i = this.y + this.height
                  , n = t.x + t.width
                  , r = t.y + t.height;
                this.x = this.x < t.x ? this.x : t.x,
                this.y = this.y < t.y ? this.y : t.y,
                this.width = (e > n ? e : n) - this.x,
                this.height = (i > r ? i : r) - this.y
            }
            ,
            e.getCorner = function(t) {
                switch (t) {
                case d.TOP_LEFT:
                    return new r.a(this.x,this.y);
                case d.TOP_RIGHT:
                    return new r.a(this.x + this.width,this.y);
                case d.BOTTOM_LEFT:
                    return new r.a(this.x,this.y + this.height);
                case d.BOTTOM_RIGHT:
                    return new r.a(this.x + this.width,this.y + this.height)
                }
            }
            ,
            e.getSide = function(t) {
                switch (t) {
                case c.TOP:
                    return new o(this.getCorner(d.TOP_LEFT),this.getCorner(d.TOP_RIGHT));
                case c.RIGHT:
                    return new o(this.getCorner(d.TOP_RIGHT),this.getCorner(d.BOTTOM_RIGHT));
                case c.BOTTOM:
                    return new o(this.getCorner(d.BOTTOM_RIGHT),this.getCorner(d.BOTTOM_LEFT));
                case c.LEFT:
                    return new o(this.getCorner(d.BOTTOM_LEFT),this.getCorner(d.TOP_LEFT))
                }
            }
            ,
            e.getCenter = function() {
                return new r.a(this.x + this.width / 2,this.y + this.height / 2)
            }
            ,
            t
        }(), c = l.SIDES = Object(n.a)("TOP", "BOTTOM", "LEFT", "RIGHT"), d = l.CORNERS = Object(n.a)("TOP_LEFT", "TOP_RIGHT", "BOTTOM_RIGHT", "BOTTOM_LEFT"), f = e.a = h
    },
    413: function(t, e, i) {
        "use strict";
        i.d(e, "a", (function() {
            return s
        }
        ));
        var n, r = /rgba?\(\s*([.0-9]+)\s*,\s*([.0-9]+)\s*,\s*([.0-9]+)\s*,?\s*([.0-9]+)?\s*\)/;
        var s = function() {
            function t() {
                this.r = 0,
                this.g = 0,
                this.b = 0,
                this.a = 1,
                this.update.apply(this, arguments)
            }
            var e = t.prototype;
            return e.update = function(t) {
                if (arguments.length > 2)
                    this.r = arguments[0],
                    this.g = arguments[1],
                    this.b = arguments[2],
                    this.a = void 0 !== arguments[3] ? arguments[3] : 1;
                else if ("string" == typeof t) {
                    var e = n[t];
                    e ? this.set(e) : this.parse(t)
                } else
                    t && this.set(t)
            }
            ,
            e.get = function() {
                return {
                    r: this.r,
                    g: this.g,
                    b: this.b,
                    a: this.a
                }
            }
            ,
            e.set = function(t) {
                void 0 !== t && (this.r = t.r || 0,
                this.g = t.g || 0,
                this.b = t.b || 0,
                this.a = void 0 !== t.a ? t.a : 1)
            }
            ,
            e.parse = function(t) {
                var e, i = t.match(r);
                if (i)
                    this.r = parseInt(i[1]) || 0,
                    this.g = parseInt(i[2]) || 0,
                    this.b = parseInt(i[3]) || 0,
                    void 0 !== i[4] ? (e = parseFloat(i[4]),
                    this.a = isNaN(e) ? 1 : e) : this.a = 1;
                else {
                    this.a = 1;
                    var n = t.length;
                    5 === n ? (e = t.substring(4, 5),
                    this.a = ("0x" + e + e | 0) / 255,
                    t = t.substring(0, 4)) : 9 === n && (this.a = ("0x" + t.substring(7, 9) | 0) / 255,
                    t = t.substring(0, 7)),
                    (i = function(t) {
                        return [(t = "0x" + t.slice(1).replace(t.length < 5 && /./g, "$&$&")) >> 16, t >> 8 & 255, 255 & t]
                    }(t)) && (this.r = i[0],
                    this.g = i[1],
                    this.b = i[2])
                }
            }
            ,
            e.toHex = function() {
                return "#" + ((256 + this.r << 8 | this.g) << 8 | this.b).toString(16).slice(1)
            }
            ,
            e.toString = function() {
                return "rgba(" + this.r + "," + this.g + "," + this.b + "," + this.a + ")"
            }
            ,
            t
        }()
          , o = s;
        n = {
            aliceblue: new o(240,248,255),
            antiquewhite: new o(250,235,215),
            aqua: new o(0,255,255),
            aquamarine: new o(127,255,212),
            azure: new o(240,255,255),
            beige: new o(245,245,220),
            bisque: new o(255,228,196),
            black: new o(0,0,0),
            blanchedalmond: new o(255,235,205),
            blue: new o(0,0,255),
            blueviolet: new o(138,43,226),
            brown: new o(165,42,42),
            burlywood: new o(222,184,135),
            cadetblue: new o(95,158,160),
            chartreuse: new o(127,255,0),
            chocolate: new o(210,105,30),
            coral: new o(255,127,80),
            cornflowerblue: new o(100,149,237),
            cornsilk: new o(255,248,220),
            crimson: new o(220,20,60),
            cyan: new o(0,255,255),
            darkblue: new o(0,0,139),
            darkcyan: new o(0,139,139),
            darkgoldenrod: new o(184,134,11),
            darkgray: new o(169,169,169),
            darkgreen: new o(0,100,0),
            darkgrey: new o(169,169,169),
            darkkhaki: new o(189,183,107),
            darkmagenta: new o(139,0,139),
            darkolivegreen: new o(85,107,47),
            darkorange: new o(255,140,0),
            darkorchid: new o(153,50,204),
            darkred: new o(139,0,0),
            darksalmon: new o(233,150,122),
            darkseagreen: new o(143,188,143),
            darkslateblue: new o(72,61,139),
            darkslategray: new o(47,79,79),
            darkslategrey: new o(47,79,79),
            darkturquoise: new o(0,206,209),
            darkviolet: new o(148,0,211),
            deeppink: new o(255,20,147),
            deepskyblue: new o(0,191,255),
            dimgray: new o(105,105,105),
            dimgrey: new o(105,105,105),
            dodgerblue: new o(30,144,255),
            firebrick: new o(178,34,34),
            floralwhite: new o(255,250,240),
            forestgreen: new o(34,139,34),
            fuchsia: new o(255,0,255),
            gainsboro: new o(220,220,220),
            ghostwhite: new o(248,248,255),
            gold: new o(255,215,0),
            goldenrod: new o(218,165,32),
            gray: new o(128,128,128),
            grey: new o(128,128,128),
            green: new o(0,128,0),
            greenyellow: new o(173,255,47),
            honeydew: new o(240,255,240),
            hotpink: new o(255,105,180),
            indianred: new o(205,92,92),
            indigo: new o(75,0,130),
            ivory: new o(255,255,240),
            khaki: new o(240,230,140),
            lavender: new o(230,230,250),
            lavenderblush: new o(255,240,245),
            lawngreen: new o(124,252,0),
            lemonchiffon: new o(255,250,205),
            lightblue: new o(173,216,230),
            lightcoral: new o(240,128,128),
            lightcyan: new o(224,255,255),
            lightgoldenrodyellow: new o(250,250,210),
            lightgray: new o(211,211,211),
            lightgreen: new o(144,238,144),
            lightgrey: new o(211,211,211),
            lightpink: new o(255,182,193),
            lightsalmon: new o(255,160,122),
            lightseagreen: new o(32,178,170),
            lightskyblue: new o(135,206,250),
            lightslategray: new o(119,136,153),
            lightslategrey: new o(119,136,153),
            lightsteelblue: new o(176,196,222),
            lightyellow: new o(255,255,224),
            lime: new o(0,255,0),
            limegreen: new o(50,205,50),
            linen: new o(250,240,230),
            magenta: new o(255,0,255),
            maroon: new o(128,0,0),
            mediumaquamarine: new o(102,205,170),
            mediumblue: new o(0,0,205),
            mediumorchid: new o(186,85,211),
            mediumpurple: new o(147,112,219),
            mediumseagreen: new o(60,179,113),
            mediumslateblue: new o(123,104,238),
            mediumspringgreen: new o(0,250,154),
            mediumturquoise: new o(72,209,204),
            mediumvioletred: new o(199,21,133),
            midnightblue: new o(25,25,112),
            mintcream: new o(245,255,250),
            mistyrose: new o(255,228,225),
            moccasin: new o(255,228,181),
            navajowhite: new o(255,222,173),
            navy: new o(0,0,128),
            oldlace: new o(253,245,230),
            olive: new o(128,128,0),
            olivedrab: new o(107,142,35),
            orange: new o(255,165,0),
            orangered: new o(255,69,0),
            orchid: new o(218,112,214),
            palegoldenrod: new o(238,232,170),
            palegreen: new o(152,251,152),
            paleturquoise: new o(175,238,238),
            palevioletred: new o(219,112,147),
            papayawhip: new o(255,239,213),
            peachpuff: new o(255,218,185),
            peru: new o(205,133,63),
            pink: new o(255,192,203),
            plum: new o(221,160,221),
            powderblue: new o(176,224,230),
            purple: new o(128,0,128),
            red: new o(255,0,0),
            rosybrown: new o(188,143,143),
            royalblue: new o(65,105,225),
            saddlebrown: new o(139,69,19),
            salmon: new o(250,128,114),
            sandybrown: new o(244,164,96),
            seagreen: new o(46,139,87),
            seashell: new o(255,245,238),
            sienna: new o(160,82,45),
            silver: new o(192,192,192),
            skyblue: new o(135,206,235),
            slateblue: new o(106,90,205),
            slategray: new o(112,128,144),
            slategrey: new o(112,128,144),
            snow: new o(255,250,250),
            springgreen: new o(0,255,127),
            steelblue: new o(70,130,180),
            tan: new o(210,180,140),
            teal: new o(0,128,128),
            thistle: new o(216,191,216),
            tomato: new o(255,99,71),
            transparent: new o(0,0,0,0),
            turquoise: new o(64,224,208),
            violet: new o(238,130,238),
            wheat: new o(245,222,179),
            white: new o(255,255,255),
            whitesmoke: new o(245,245,245),
            yellow: new o(255,255,0),
            yellowgreen: new o(154,205,50)
        },
        s.parse = function(t) {
            return n[t] || (n[t] = new o(t))
        }
    },
    431: function(t, e, i) {
        "use strict";
        var n = i(384)
          , r = i(385)
          , s = i(397)
          , o = i(447)
          , a = i(371)
          , h = i(387)
          , u = i(360)
          , l = i(378)
          , c = i(386)
          , d = {
            BACKSPACE: 8,
            TAB: 9,
            ENTER: 13,
            SHIFT: 16,
            CTRL: 17,
            ALT: 18,
            PAUSE: 19,
            BREAK: 19,
            CAPS: 20,
            CAPS_LOCK: 20,
            ESCAPE: 27,
            SPACE: 32,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            END: 35,
            HOME: 36,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            PRINT_SCREEN: 44,
            INSERT: 45,
            DELETE: 46,
            META_LEFT: 91,
            WIN_LEFT: 91,
            META_RIGHT: 92,
            WIN_RIGHT: 92,
            SELECT: 93,
            EQUAL: 187,
            MINUS: 189,
            F1: 112,
            F2: 113,
            F3: 114,
            F4: 115,
            F5: 116,
            F6: 117,
            F7: 118,
            F8: 119,
            F9: 120,
            F10: 121,
            F11: 122,
            F12: 123,
            MUTE: 173,
            VOL_DOWN: 174,
            VOL_UP: 175,
            FORWARD: 176,
            BACK: 177,
            STOP: 178,
            PLAY_PAUSE: 179
        }
          , f = i(408)
          , p = {};
        var g = /^#([\w-]+)$/;
        p.$ = function(t, e) {
            switch (typeof t) {
            case "object":
                return v.isElement(t) ? v.remove(t) : v.isElement(t.document && t.document.body) ? v.size(t) : v.create(t);
            case "string":
                if (g.test(t))
                    return v.id(t.substring(1), e)
            }
        }
        ;
        var v = p.$
          , _ = "object" == typeof HTMLElement;
        function m(t) {
            try {
                return t.filters.item("alpha")
            } catch (t) {}
            try {
                return t.filters.item("progid:DXImageTransform.Microsoft.Alpha")
            } catch (t) {}
            return null
        }
        v.isElement = _ ? function(t) {
            return t && t instanceof HTMLElement
        }
        : function(t) {
            return t && "number" == typeof t.nodeType && "string" == typeof t.nodeName
        }
        ,
        v.id = function(t, e) {
            return "string" == typeof t ? (e || window).document.getElementById(t) : t
        }
        ,
        v.apply = function(t, e) {
            if (e.attrs)
                for (var i in e.attrs)
                    t.setAttribute(i, e.attrs[i]);
            e.id && (t.id = e.id),
            e.style && v.style(t, e.style),
            e.src && (t.src = e.src),
            (e.class || e.className) && (t.className = e.class || e.className);
            var n = e.parent || e.parentNode;
            if (n && e.first ? v.insertBefore(n, t, n.firstChild) : e.before ? v.insertBefore(e.before.parentNode || n, t, e.before) : e.after ? v.insertAfter(e.after.parentNode || n, t, e.after) : n && n.appendChild(t),
            "html"in e && (t.innerHTML = e.html),
            "text"in e && v.setText(t, e.text),
            e.children)
                for (var r = e.children, s = 0, o = r.length; s < o; ++s)
                    t.appendChild(v.isElement(r[s]) ? r[s] : v(r[s]));
            return t
        }
        ,
        v.insertBefore = function(t, e, i) {
            t && e && (i && i.parentNode == t ? t.insertBefore(e, i) : t.appendChild(e))
        }
        ,
        v.insertAfter = function(t, e, i) {
            t && e && (i && i.parentNode == t ? i.nextSibling ? t.insertBefore(e, i.nextSibling) : t.appendChild(e) : v.insertBefore(t, e, t.firstChild))
        }
        ,
        v.create = function(t) {
            var e = (t && t.win || window).document;
            return t && "string" != typeof t ? v.apply(t.el || e.createElement(t.tag || t.tagName || "div"), t) : e.createElement(t || "div")
        }
        ,
        v.show = function(t, e) {
            v.id(t).style.display = e || "block"
        }
        ,
        v.hide = function(t) {
            v.id(t).style.display = "none"
        }
        ,
        v.addClass = function(t, e) {
            if (t) {
                t = v.id(t);
                "string" == typeof e && (e = e.split(" "));
                for (var i = " " + t.className + " ", n = 0, r = e.length; n < r; ++n) {
                    var s = e[n];
                    -1 == i.indexOf(" " + s + " ") && (i += s + " ")
                }
                return t.className = i.replace(/^\s+|\s+$/g, ""),
                v
            }
        }
        ,
        v.hasClass = function(t, e) {
            if (!t)
                return !1;
            for (var i = (t = v.id(t)).className.split(" "), n = 0, r = i.length; n < r; ++n)
                if (i[n].trim() === e)
                    return !0;
            return !1
        }
        ,
        v.getTag = function(t, e) {
            return t.getElementsByTagName(e)
        }
        ,
        v.removeClass = function(t, e) {
            t && ((t = v.id(t)).className = (" " + t.className + " ").replace(" ", "  ").replace(new RegExp("( " + e.replace("s+", " | ").replace("-", "-") + " )","g"), " ").replace(/\s+/, " ").replace(/^\s+|\s+$/g, ""))
        }
        ,
        v.style = function(t, e) {
            if (t instanceof Array)
                for (var i, n = 0; i = t[n]; ++n)
                    v.style(i, e);
            else {
                var r = (t = v.id(t)).style;
                for (var s in e)
                    switch (s) {
                    case "styleFloat":
                    case "cssFloat":
                    case "float":
                        r.styleFloat = r.cssFloat = e[s];
                        break;
                    case "opacity":
                        if (r.opacity = e[s],
                        t.filters)
                            try {
                                var o = m()
                                  , a = 1 == e[s] ? 99.99 : 100 * e[s];
                                o ? o.Opacity = a : r.filter = "alpha(opacity=" + a + ")"
                            } catch (t) {}
                        break;
                    case "borderRadius":
                        r.borderRadius = r.MozBorderRadius = e[s];
                        break;
                    case "boxSizing":
                        r.MsBoxSizing = r.MozBoxSizing = r.WebkitBoxSizing = e[s];
                    default:
                        r[s] = e[s]
                    }
            }
        }
        ,
        v.onEvent = function(t, e, i) {
            "function" != typeof i && (i = u.bind.apply(u.GLOBAL, Array.prototype.slice.call(arguments, 2)));
            var n = i;
            return (t = v.id(t)).addEventListener ? t.addEventListener(e, n, !1) : (n = function(t) {
                var e = t || window.event;
                i(e)
            }
            ,
            t.attachEvent("on" + e, n)),
            Object(u.bind)(v, "removeEvent", t, e, n)
        }
        ,
        v.removeEvent = function(t, e, i) {
            (t = v.id(t)).addEventListener ? t.removeEventListener(e, i, !1) : t.detachEvent("on" + e, i)
        }
        ,
        v.stopEvent = function(t) {
            t && (t.cancelBubble = !0,
            t.stopPropagation && t.stopPropagation(),
            t.preventDefault && t.preventDefault())
        }
        ,
        v.setText = function(t, e) {
            t = v.id(t),
            e = String(e),
            "textContent"in t ? t.textContent = e : "innerText"in t ? t.innerText = e.replace(/\n/g, " ") : (t.innerHTML = "",
            t.appendChild(document.createTextNode(e)))
        }
        ,
        v.setValue = function(t, e) {
            "value"in (t = v.id(t)) ? t.value = e : "value"in t.firstChild && (t.firstChild.value = e)
        }
        ,
        v.remove = function(t) {
            (t = v.id(t)) && t.parentNode && t.parentNode.removeChild(t)
        }
        ,
        v.cursorPos = function(t, e) {
            var i = v.pos(e);
            return i.top = t.clientY - i.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop),
            i.left = t.clientX - i.left + (window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft),
            i
        }
        ,
        v.pos = function(t) {
            for (var e = t, i = {
                top: 0,
                left: 0
            }; e && e != document.body; ) {
                for (i.left += e.offsetLeft,
                i.top += e.offsetTop; e.offsetParent != e.parentNode; )
                    i.top -= e.scrollTop,
                    i.left -= e.scrollLeft,
                    e = e.parentNode;
                e = e.offsetParent
            }
            return i
        }
        ,
        v.size = function(t) {
            if (v.isElement(t))
                return {
                    width: t.offsetWidth,
                    height: t.offsetHeight
                };
            if (t.document) {
                var e = t.document.documentElement || t.document.body;
                return new f.a(e.offsetTop,e.offsetLeft,t.innerWidth || e.clientWidth || e.clientWidth,t.innerHeight || e.clientHeight || e.clientHeight)
            }
        }
        ,
        v.insertCSSFile = function(t) {
            document.getElementsByTagName("head")[0].appendChild(v({
                tag: "link",
                attrs: {
                    rel: "stylesheet",
                    type: "text/css",
                    href: t
                }
            }))
        }
        ;
        var w = p.$
          , y = null
          , b = Object(c.a)(d.SPACE, d.LEFT, d.RIGHT, d.UP, d.DOWN)
          , x = function() {
            function t(t) {
                if (y)
                    return y;
                y = this,
                this._el = t = t || document,
                this._events = [],
                this._shortcuts = [],
                this._isEnabled = !0,
                this._keyMap = {},
                w.onEvent(t, "keydown", this, "onKeyDown"),
                w.onEvent(t, "keypress", this, "onKeyPress"),
                w.onEvent(t, "keyup", this, "onKeyUp"),
                w.onEvent(window, "blur", this, "liftAll")
            }
            var e = t.prototype;
            return e.setEnabled = function(t) {
                this._isEnabled = t
            }
            ,
            e.captureShortcut = function(t) {
                this._shortcuts.push(t)
            }
            ,
            e.getPressed = function() {
                return this._keyMap
            }
            ,
            e.onKeyDown = function(t) {
                if (this._isEnabled) {
                    var e = {
                        code: t.keyCode,
                        ctrl: t.ctrlKey,
                        shift: t.shiftKey,
                        alt: t.altKey,
                        meta: t.metaKey,
                        lifted: !1,
                        dt: s.a.getTickProgress()
                    };
                    if (e.ctrl || e.shift || e.alt || e.meta) {
                        for (var i = !1, n = 0; n < this._shortcuts.length; ++n) {
                            var r = this._shortcuts[n];
                            r.compare(e) && (r.publish("Down", e),
                            i = !0)
                        }
                        i && w.stopEvent(t)
                    } else
                        w.stopEvent(t),
                        t.keyCode in this._keyMap || (this._events.push(e),
                        this._keyMap[t.keyCode] = +new Date)
                }
            }
            ,
            e.liftAll = function() {
                var t = s.a.getTickProgress();
                for (var e in this._keyMap)
                    this._events.push({
                        code: e,
                        lifted: !0,
                        dt: t
                    });
                this._keyMap = {}
            }
            ,
            e.onKeyUp = function(t) {
                var e = s.a.getTickProgress();
                delete this._keyMap[t.keyCode],
                this._events.push({
                    code: t.keyCode,
                    lifted: !0,
                    dt: e
                }),
                w.stopEvent(t)
            }
            ,
            e.onKeyPress = function(t) {
                this._isEnabled && t.keyCode in b && w.stopEvent(t)
            }
            ,
            e.peekEvents = function() {
                return this._events
            }
            ,
            e.popEvents = function() {
                return this._events.splice(0, this._events.length)
            }
            ,
            t
        }();
        Object(u.merge)(x.prototype, d),
        x.Shortcut = function(t) {
            var e, i;
            function n(e, i, n, r, s) {
                var o;
                return (o = t.call(this) || this).ctrl = !!i,
                o.shift = !!n,
                o.alt = !!r,
                o.meta = !!s,
                o.code = !!e,
                o
            }
            return i = t,
            (e = n).prototype = Object.create(i.prototype),
            e.prototype.constructor = e,
            e.__proto__ = i,
            n.prototype.compare = function(t) {
                return this.ctrl == t.ctrl && this.alt == t.alt && this.meta == t.meta && this.shift == t.shift && this.code == t.code
            }
            ,
            n
        }(l.a);
        var E = i(448)
          , T = r.a.eventTypes
          , C = function() {
            function t(t) {
                this._evtQueue = [],
                this._rootView = t.rootView,
                t.el && this.setElement(t.el),
                this._isOver = !1,
                this._keyListener = t.keyListener,
                this._isEnabled || (this._isEnabled = !0,
                document.addEventListener("touchmove", this.handleMouse.bind(this, T.MOVE), {
                    passive: !1
                }),
                document.addEventListener("touchend", this.handleMouse.bind(this, T.SELECT)),
                window.addEventListener("DOMMouseScroll", this.handleMouse.bind(this, T.SCROLL)),
                document.addEventListener("mousemove", this.handleMouse.bind(this, T.MOVE), {
                    passive: !1
                }),
                document.addEventListener("mouseup", this.handleMouse.bind(this, T.SELECT)),
                window.addEventListener("mousewheel", this.handleMouse.bind(this, T.SCROLL), {
                    passive: !1
                }),
                this._hasFocus = !1,
                document.addEventListener && (document.addEventListener("focus", Object(u.bind)(this, "onFocusCapture"), !0),
                document.addEventListener("blur", Object(u.bind)(this, "onBlurCapture"), !0)))
            }
            var e = t.prototype;
            return e.enable = function() {
                this._isEnabled = !0
            }
            ,
            e.disable = function() {
                this._isEnabled = !1
            }
            ,
            e.onInputStart = function(t) {
                this.handleMouse(T.START, t)
            }
            ,
            e.onInputMove = function(t) {
                this.handleMouse(T.MOVE, t)
            }
            ,
            e.onInputEnd = function(t) {
                this.handleMouse(T.SELECT, t)
            }
            ,
            e.onFocusCapture = function(t) {
                var e = t.target.tagName;
                "TEXTAREA" != e && "INPUT" != e || (this._hasFocus = t.target,
                this._keyListener && this._keyListener.setEnabled(!1))
            }
            ,
            e.onBlurCapture = function() {
                this._hasFocus && (this._hasFocus = null,
                this._keyListener && this._keyListener.setEnabled(!0))
            }
            ,
            e._removeElEvents = function() {
                if (this._elEvents)
                    for (var t = 0; t < this._elEvents.length; t++)
                        this._elEvents[t] && this._elEvents[t]()
            }
            ,
            e._addElEvents = function() {
                this._removeElEvents();
                var t = this._el;
                t.ondragstart = function() {
                    return !1
                }
                ,
                t.onselectstart = function() {
                    return !1
                }
                ,
                this._elEvents = [],
                this._elEvents.push(document.addEventListener("touchstart", this.handleMouse.bind(this, T.START))),
                this._elEvents.push(document.addEventListener("mousedown", this.handleMouse.bind(this, T.START))),
                this._elEvents.push(document.addEventListener("mouseover", this.onMouseOver.bind(this))),
                this._elEvents.push(document.addEventListener("mouseout", this.onMouseOut.bind(this)))
            }
            ,
            e.setElement = function(t) {
                this._removeElEvents(),
                this._el = t,
                this._addElEvents()
            }
            ,
            e.onMouseOver = function() {
                this._isOver = !0
            }
            ,
            e.onMouseOut = function() {
                this._isOver = !1
            }
            ,
            e.onMouseDown = function() {
                this._isMouseDown = !0
            }
            ,
            e.onMouseUp = function() {
                this._isMouseUp = !0
            }
            ,
            e.getEvents = function() {
                return this._evtQueue
            }
            ,
            e.allowScrollEvents = function(t) {
                this._allowScrollEvents = t
            }
            ,
            e.handleMouse = function(t, e) {
                if (this._isEnabled && (this._isDown || !this._el || e.target === this._el))
                    if (e.returnValue = !1,
                    e.touches)
                        for (var i = e.changedTouches, n = 0; n < i.length; n++)
                            this.handleMouse(t, i[n]);
                    else {
                        var s, o;
                        if ("offsetX"in e)
                            s = e.offsetX,
                            o = e.offsetY;
                        else if (this._el.getBoundingClientRect) {
                            var h = this._el.getBoundingClientRect();
                            s = e.pageX - h.left,
                            o = e.pageY - h.top
                        } else {
                            for (var u, l, c = this._el; c; )
                                u += c.offsetTop,
                                l += c.offsetLeft,
                                c = c.parentNode;
                            s = e.pageX - u,
                            o = e.pageY - l
                        }
                        var d = e.identifier || -1;
                        t == T.START ? this._isDown = !0 : t == T.SELECT && (this._isDown = !1);
                        var f = a.a.screen.devicePixelRatio
                          , p = new E.a(d,t,s * f,o * f);
                        if (t == T.SCROLL)
                            if ("wheelDeltaX"in e)
                                if (p.scrollDelta = e.wheelDeltaY / 120,
                                p.scrollAxis = r.a.VERTICAL_AXIS,
                                e.wheelDeltaX && e.wheelDeltaY) {
                                    var g = p.clone();
                                    g.scrollDelta = e.wheelDeltaX / 120,
                                    g.scrollAxis = r.a.HORIZONTAL_AXIS,
                                    r.a.dispatchEvent(this._rootView, g)
                                } else
                                    e.wheelDeltaX && (p.scrollDelta = e.wheelDeltaX / 120,
                                    p.scrollAxis = r.a.HORIZONTAL_AXIS);
                            else
                                e.detail ? (p.scrollDelta = -e.detail,
                                p.scrollAxis = "axis"in e ? e.axis === e.VERTICAL_AXIS ? r.a.VERTICAL_AXIS : r.a.HORIZONTAL_AXIS : r.a.VERTICAL_AXIS) : e.wheelDelta && (p.scrollDelta = (window.opera ? 1 : -1) * e.wheelDelta / 120,
                                p.scrollAxis = r.a.VERTICAL_AXIS);
                        r.a.dispatchEvent(this._rootView, p)
                    }
            }
            ,
            t
        }()
          , R = i(377);
        function S(t, e, i) {
            return e in t ? Object.defineProperty(t, e, {
                value: i,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = i,
            t
        }
        var A = new h.a
          , L = function(t) {
            var e, i;
            function n() {
                var e;
                return (e = t.call(this) || this)._opts = {
                    keyListenerEnabled: !0
                },
                s.a.onTick = e._tick.bind(function(t) {
                    if (void 0 === t)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t
                }(e)),
                e._events = [],
                x && (e._keyListener = new x,
                e._keyListener.setEnabled(!0)),
                e._reflowMgr = o.a.get(),
                e._tickBuffer = 0,
                e._view = null,
                e._inputListener = null,
                e
            }
            i = t,
            (e = n).prototype = Object.create(i.prototype),
            e.prototype.constructor = e,
            e.__proto__ = i;
            var h = n.prototype;
            return h.init = function(t) {
                var e = a.a.width
                  , i = a.a.height;
                this._rootElement = new R.a({
                    useWebGL: !0,
                    width: e,
                    height: i,
                    offscreen: !1
                }),
                this.useWebGL = this._rootElement.isWebGL;
                var n = a.a.screen.devicePixelRatio;
                this._rootElement.style.width = e / n + "px",
                this._rootElement.style.height = i / n + "px",
                this._rootElement.style.top = "0px",
                this._rootElement.style.left = "0px",
                this._rootElement.style.position = "absolute",
                this._rootElement.id = "timestep_onscreen_canvas",
                this._ctx = this._rootElement.getContext(),
                a.a.width = e,
                a.a.height = i,
                a.a.screen.width = e,
                a.a.screen.height = i,
                this.setView(t),
                this.startLoop()
            }
            ,
            h.getOpt = function(t) {
                return this._opts[t]
            }
            ,
            h.updateOpts = function(t) {
                this._opts = function(t) {
                    for (var e = 1; e < arguments.length; e++) {
                        var i = null != arguments[e] ? arguments[e] : {}
                          , n = Object.keys(i);
                        "function" == typeof Object.getOwnPropertySymbols && (n = n.concat(Object.getOwnPropertySymbols(i).filter((function(t) {
                            return Object.getOwnPropertyDescriptor(i, t).enumerable
                        }
                        )))),
                        n.forEach((function(e) {
                            S(t, e, i[e])
                        }
                        ))
                    }
                    return t
                }({}, this._opts, t),
                this._setKeyListener(this._opts.keyListenerEnabled)
            }
            ,
            h._setKeyListener = function(t) {
                this._keyListener && this._keyListener.setEnabled(t)
            }
            ,
            h.supports = function(t) {
                return this._opts[t]
            }
            ,
            h.getInput = function() {
                return this._inputListener
            }
            ,
            h.getKeyListener = function() {
                return this._keyListener
            }
            ,
            h.getEvents = function() {
                return this._events
            }
            ,
            h.getCanvas = function() {
                return this._rootElement
            }
            ,
            h.getView = function() {
                return this._view
            }
            ,
            h.setView = function(t) {
                return this._view = t,
                this._inputListener = new C({
                    rootView: this._view,
                    el: this._rootElement,
                    keyListener: this._keyListener,
                    engine: this
                }),
                this
            }
            ,
            h.show = function() {
                return this._rootElement.style.display = "block",
                this
            }
            ,
            h.hide = function() {
                return this._rootElement.style.display = "none",
                this
            }
            ,
            h.pause = function() {
                this.stopLoop(),
                this._keyListener && this._keyListener.setEnabled(!1)
            }
            ,
            h.resume = function() {
                this.startLoop(),
                this._keyListener && this._keyListener.setEnabled(!0)
            }
            ,
            h.startLoop = function() {
                if (!this.isRunning())
                    return s.a.start(),
                    this.emit("resume"),
                    this
            }
            ,
            h.stopLoop = function() {
                if (this.isRunning())
                    return s.a.stop(),
                    this.emit("pause"),
                    this
            }
            ,
            h.isRunning = function() {
                return s.a.isRunning
            }
            ,
            h._tick = function(t) {
                this._events = this._inputListener.getEvents();
                for (var e = 0; e < this._events.length; e++)
                    r.a.dispatchEvent(this._view, this._events[e]);
                this.publish("Tick", this._opts.dtFixed || t),
                this._view.style.wrapTick(t, this),
                this._reflowMgr.reflowViews(this._ctx),
                this._view.style.wrapRender(this._ctx, A, 1),
                this.publish("Render", this._ctx),
                this._ctx && this._ctx.swap()
            }
            ,
            n
        }(n.a);
        L.prototype.getElement = L.prototype.getCanvas;
        e.a = new L
    },
    447: function(t, e, i) {
        "use strict";
        i.d(e, "a", (function() {
            return o
        }
        ));
        var n = i(360)
          , r = function() {
            function t() {}
            var e = t.prototype;
            return e.recycle = function(t) {
                t.view = null,
                this._pool.push(t)
            }
            ,
            e.get = function(t) {
                var e = this._pool.pop() || {};
                return e.view = t,
                e.count = 0,
                e.needsReflow = !1,
                e
            }
            ,
            t
        }();
        r.prototype._pool = [];
        var s = new r
          , o = function() {
            function t() {
                this._pending = {},
                this._iter = 0,
                this._pendingCount = 0
            }
            var e = t.prototype;
            return e.add = function(t) {
                if (t.reflow !== t.DEFAULT_REFLOW || t._layout) {
                    var e = t.uid
                      , i = this._pending[e] || (this._pending[e] = s.get(t));
                    i.needsReflow || (++this._pendingCount,
                    i.needsReflow = !0),
                    i.iter != this._iter && (i.iter = this._iter)
                }
            }
            ,
            e.reflow = function(t) {
                null === t.style.__cachedWidth && (t.style.__cachedWidth = t.style.width),
                null === t.style.__cachedHeight && (t.style.__cachedHeight = t.style.height);
                var e = this._pending[t.uid];
                if (e && e.needsReflow && (e.needsReflow = !1,
                --this._pendingCount),
                t._layout && t._layout.reflow(),
                t.reflow(),
                t._layout) {
                    var i = t.style;
                    if (i.__cachedWidth !== i.width || i.__cachedHeight !== i.height)
                        for (var n = t.getSubviews(), r = 0, s = n.length; r < s; ++r)
                            this.add(n[r])
                }
            }
            ,
            e.reflowViews = function() {
                if (this._pendingCount) {
                    var t;
                    for (this._iter = 0; this._pendingCount; ) {
                        for (; this._pendingCount; )
                            for (t in ++this._iter,
                            0,
                            this._pending) {
                                var e = this._pending[t];
                                if (e.count > 20) {
                                    n.logger.warn("reflow loop detected for view", e.view.uid),
                                    this.cleanUp();
                                    break
                                }
                                e.needsReflow && (++e.count,
                                this.reflow(e.view))
                            }
                        for (t in this._pending) {
                            var i = this._pending[t].view;
                            if (i.hasListeners("resize")) {
                                var r = i.style
                                  , s = r.width
                                  , o = r.height;
                                r.__cachedWidth == s && r.__cachedHeight == o || (r.__cachedWidth = s,
                                r.__cachedHeight = o,
                                i.emit("resize"))
                            }
                        }
                    }
                    this.cleanUp()
                }
            }
            ,
            e.cleanUp = function() {
                for (var t in this._pending)
                    s.recycle(this._pending[t]),
                    delete this._pending[t];
                this._pendingCount = 0
            }
            ,
            t
        }()
          , a = null;
        o.get = function() {
            return a || (a = new o)
        }
    },
    448: function(t, e, i) {
        "use strict";
        i.d(e, "a", (function() {
            return s
        }
        ));
        var n = i(374)
          , r = i(397)
          , s = function() {
            function t(t, e, i, s, o, a) {
                this.id = t,
                this.type = e,
                this.point = this.pt = {},
                this.srcPoint = this.srcPt = new n.a(i,s),
                this.trace = [],
                this.root = o || null,
                this.when = r.a.now,
                this.target = a || null
            }
            var e = t.prototype;
            return e.cancel = function() {
                this.cancelled = !0
            }
            ,
            e.clone = function() {
                return new t(this.id,this.type,this.srcPt.x,this.srcPt.y,this.root,this.target)
            }
            ,
            t
        }();
        s.prototype.cancelled = !1,
        s.prototype.depth = 0
    },
    449: function(t, e, i) {
        "use strict";
        var n = i(360)
          , r = window.AudioContext || window.webkitAudioContext
          , s = null;
        if (r)
            try {
                s = new r
            } catch (t) {
                n.logger.warn("HTML5 AudioContext init failed, falling back to Audio!")
            }
        else
            n.logger.warn("HTML5 AudioContext not supported, falling back to Audio!");
        e.a = s
    },
    450: function(t, e, i) {
        "use strict";
        var n = function(t) {
            this.size = 0,
            this.limit = t,
            this._keymap = {}
        };
        n.prototype.put = function(t, e) {
            var i = {
                key: t,
                value: e
            };
            if (this._keymap[t] = i,
            this.tail ? (this.tail.newer = i,
            i.older = this.tail) : this.head = i,
            this.tail = i,
            this.size === this.limit)
                return this.shift();
            this.size++
        }
        ,
        n.prototype.shift = function() {
            var t = this.head;
            return t && (this.head.newer ? (this.head = this.head.newer,
            this.head.older = void 0) : this.head = void 0,
            t.newer = t.older = void 0,
            delete this._keymap[t.key]),
            t
        }
        ,
        n.prototype.get = function(t, e) {
            var i = this._keymap[t];
            if (void 0 !== i)
                return i === this.tail || (i.newer && (i === this.head && (this.head = i.newer),
                i.newer.older = i.older),
                i.older && (i.older.newer = i.newer),
                i.newer = void 0,
                i.older = this.tail,
                this.tail && (this.tail.newer = i),
                this.tail = i),
                e ? i : i.value
        }
        ,
        n.prototype.find = function(t) {
            return this._keymap[t]
        }
        ,
        n.prototype.set = function(t, e) {
            var i, n = this.get(t, !0);
            return n ? (i = n.value,
            n.value = e) : (i = this.put(t, e)) && (i = i.value),
            i
        }
        ,
        n.prototype.remove = function(t) {
            var e = this._keymap[t];
            if (e)
                return delete this._keymap[e.key],
                e.newer && e.older ? (e.older.newer = e.newer,
                e.newer.older = e.older) : e.newer ? (e.newer.older = void 0,
                this.head = e.newer) : e.older ? (e.older.newer = void 0,
                this.tail = e.older) : this.head = this.tail = void 0,
                this.size--,
                e.value
        }
        ,
        n.prototype.removeAll = function() {
            this.head = this.tail = void 0,
            this.size = 0,
            this._keymap = {}
        }
        ,
        "function" == typeof Object.keys ? n.prototype.keys = function() {
            return Object.keys(this._keymap)
        }
        : n.prototype.keys = function() {
            var t = [];
            for (var e in this._keymap)
                t.push(e);
            return t
        }
        ,
        n.prototype.forEach = function(t, e, i) {
            var n;
            if (!0 === e ? (i = !0,
            e = void 0) : "object" != typeof e && (e = this),
            i)
                for (n = this.tail; n; )
                    t.call(e, n.key, n.value, this),
                    n = n.older;
            else
                for (n = this.head; n; )
                    t.call(e, n.key, n.value, this),
                    n = n.newer
        }
        ,
        n.prototype.toJSON = function() {
            for (var t = [], e = this.head; e; )
                t.push({
                    key: e.key.toJSON(),
                    value: e.value.toJSON()
                }),
                e = e.newer;
            return t
        }
        ,
        n.prototype.toString = function() {
            for (var t = "", e = this.head; e; )
                t += String(e.key) + ":" + e.value,
                (e = e.newer) && (t += " < ");
            return t
        }
        ,
        e.a = n
    },
    506: function(t, e, i) {
        "use strict";
        var n = i(371)
          , r = i(431)
          , s = i(397)
          , o = i(373)
          , a = i(378)
          , h = i(386);
        function u(t) {
            for (var e = 1; e < arguments.length; e++) {
                var i = null != arguments[e] ? arguments[e] : {}
                  , n = Object.keys(i);
                "function" == typeof Object.getOwnPropertySymbols && (n = n.concat(Object.getOwnPropertySymbols(i).filter((function(t) {
                    return Object.getOwnPropertyDescriptor(i, t).enumerable
                }
                )))),
                n.forEach((function(e) {
                    l(t, e, i[e])
                }
                ))
            }
            return t
        }
        function l(t, e, i) {
            return e in t ? Object.defineProperty(t, e, {
                value: i,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : t[e] = i,
            t
        }
        function c(t, e) {
            for (var i = 0; i < e.length; i++) {
                var n = e[i];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                Object.defineProperty(t, n.key, n)
            }
        }
        var d = Object(h.a)("FIXED", "RESIZE", "MANUAL")
          , f = d.RESIZE
          , p = function(t) {
            var e, i;
            function r() {
                var e;
                return (e = t.call(this) || this).width = 0,
                e.height = 0,
                e._canvas = null,
                e._scalingMode = f,
                e._scalingOpts = null,
                e._initialized = !1,
                e._setScalingMode(f),
                n.a.screen.subscribe("Resize", function(t) {
                    if (void 0 === t)
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return t
                }(e), "onResize"),
                e
            }
            i = t,
            (e = r).prototype = Object.create(i.prototype),
            e.prototype.constructor = e,
            e.__proto__ = i;
            var s, o, a, h = r.prototype;
            return h.unsubscribeResize = function() {
                n.a.screen.unsubscribe("Resize", this, "onResize")
            }
            ,
            h.setCanvas = function(t) {
                this._canvas = t,
                document.body.appendChild(this._canvas),
                this.onResize()
            }
            ,
            h.setScalingMode = function(t) {
                this._setScalingMode(),
                this.onResize()
            }
            ,
            h._setScalingMode = function(t, e) {
                switch (this._scalingMode = t,
                t) {
                case d.FIXED:
                    e = u({
                        width: n.a.width,
                        height: n.a.height
                    }, e);
                    var i = n.a.screen.devicePixelRatio
                      , r = e.width
                      , s = e.height;
                    this._canvas.width = r * i,
                    this._canvas.height = s * i;
                    var o = this._canvas.getContext();
                    o.resize && o.resize(r * i, s * i),
                    this._canvas.style.width = r + "px",
                    this._canvas.style.height = s + "px";
                    var a = e.top;
                    a && (this._canvas.style.top = a + "px");
                    var h = e.left;
                    h && (this._canvas.style.left = h + "px");
                    break;
                case d.RESIZE:
                    e = u({
                        resizeCanvas: !0
                    }, e);
                case d.MANUAL:
                }
                this._scalingOpts = e
            }
            ,
            h.onResize = function() {
                if (this._canvas) {
                    var t = n.a.width
                      , e = n.a.height;
                    if (!this._initialized) {
                        if (!isFinite(t) || !isFinite(e))
                            return;
                        this._initialized = !0,
                        this.publish("initialized")
                    }
                    var i = this._canvas
                      , r = this._canvas.style
                      , s = n.a.screen.orientation;
                    i.className = s;
                    var o = this._scalingMode
                      , a = this._scalingOpts;
                    switch (o == d.FIXED && (t = a.width,
                    e = a.height),
                    a.maxWidth && t > a.maxWidth && (t = a.maxWidth,
                    o == d.RESIZE && (o = d.FIXED)),
                    a.maxHeight && e > a.maxHeight && (e = a.maxHeight,
                    o == d.RESIZE && (o = d.FIXED)),
                    o) {
                    case d.MANUAL:
                        break;
                    case d.FIXED:
                        var h = a.top;
                        null == h && (r.top = Math.round(Math.max(0, (window.innerHeight - e) / 2)) + "px");
                        var u = a.left;
                        null == u && (r.left = Math.round(Math.max(0, (window.innerWidth - t) / 2)) + "px");
                        break;
                    case d.RESIZE:
                        n.a.heightMargin && (r.top = n.a.heightMargin + "px");
                        var l = n.a.screen.devicePixelRatio
                          , c = t / l
                          , f = e / l;
                        if (a.resizeCanvas && (r.width !== c || r.height !== f)) {
                            this._canvas.width = t,
                            this._canvas.height = e;
                            var p = this._canvas.getContext();
                            p.resize && p.resize(t, e),
                            r.width = c + "px",
                            r.height = f + "px",
                            window.scrollTo(0, 1)
                        }
                    }
                    this._setDim(t, e)
                }
            }
            ,
            h._setDim = function(t, e) {
                this.width === t && this.height === e || (this.width = t,
                this.height = e,
                this.publish("Resize", t, e))
            }
            ,
            s = r,
            (o = [{
                key: "initialized",
                get: function() {
                    return this._initialized
                }
            }]) && c(s.prototype, o),
            a && c(s, a),
            r
        }(a.a);
        p.prototype.SCALING = d;
        var g, v = new p, _ = i(370);
        function m(t, e) {
            g = t,
            o.a.init(e.fileCache),
            s.a.init(t.maxTick),
            _.c.init(t),
            n.a.init(t);
            var i = e.spritesheets
              , r = e.pathTable;
            for (var a in i)
                for (var h = i[a], u = 0; u < h.length; u++) {
                    var l = h[u];
                    l.f = r[l.p] + l.f
                }
            o.a.addSheets(i),
            o.a.setAudioMap(e.audioMap)
        }
        i.d(e, "b", (function() {
            return m
        }
        ));
        e.a = function(t) {
            var e = new t(g);
            return e.__root = e,
            e.view = e,
            r.a.init(e),
            v.setCanvas(r.a.getCanvas()),
            e.initUI && e.initUI(),
            window.addEventListener("pageshow", (function() {
                e && e.onResume && e.onResume()
            }
            ), !1),
            window.addEventListener("pagehide", (function() {
                e && e.onPause && e.onPause()
            }
            ), !1),
            e
        }
    },
    541: function(t, e, i) {
        "use strict";
        i.r(e),
        i.d(e, "default", (function() {
            return s
        }
        ));
        var n = i(506)
          , r = i(370);
        function s(t) {
            var e = window.CACHE;
            return Object(n.b)(t, {
                spritesheets: e["spritesheets/map.json"],
                pathTable: e["spritesheets/pathTable.json"],
                audioMap: e["resources/sound-map.json"],
                fileCache: e
            }),
            delete e["spritesheets/map.json"],
            delete e["spritesheets/pathTable.json"],
            delete e["resources/sound-map.json"],
            Promise.retry((function() {
                return i.e("timestep-application").then(i.bind(null, 681))
            }
            )),
            {
                webGLSupported: r.c.isSupported
            }
        }
    },
    542: function(module, exports, __webpack_require__) {
        (function(process) {
            !function() {
                function init(cloneFrom) {
                    var INITIAL_FILE = "<initial file>", MODULE_NOT_FOUND = "MODULE_NOT_FOUND", DEBUG = !0, SLICE = Array.prototype.slice, ENV, rexpEndSlash = /(\/|\\)$/;
                    function getModuleDef(t) {
                        return t += ".js",
                        jsio.__modules[t] || new ModuleDef(t)
                    }
                    function ModuleDef(t) {
                        this.path = t,
                        this.friendlyPath = t,
                        util.splitPath(t, this),
                        this.directory = util.resolve(ENV.getCwd(), this.directory)
                    }
                    ModuleDef.prototype.setBase = function(t, e) {
                        this.baseMod = t,
                        this.basePath = e + "/" + t
                    }
                    ;
                    var HOST = /^([a-z][a-z0-9+\-\.]*:\/\/.*?\/)(.*)$/, PROTOCOL = /^[a-z][a-z0-9+\-\.]*:/, util = {
                        bind: function(t, e) {
                            var i = SLICE.call(arguments, 2);
                            return function() {
                                return (e = "string" == typeof e ? t[e] : e).apply(t, i.concat(SLICE.call(arguments, 0)))
                            }
                        },
                        addEndSlash: function(t) {
                            return rexpEndSlash.test(t) ? t : t + "/"
                        },
                        removeEndSlash: function(t) {
                            return t.replace(rexpEndSlash, "")
                        },
                        relative: function(t, e) {
                            var i = t.length;
                            if (e.substring(0, i) == t)
                                return e.slice(i + /[\/\\]/.test(e.charAt(i)));
                            for (var n = util.removeEndSlash(e).split(ENV.pathSep), r = util.removeEndSlash(t).split(ENV.pathSep), s = 0; n[s] == r[s]; )
                                ++s;
                            if (s) {
                                e = n.slice(s).join(ENV.pathSep);
                                for (var o = r.length - s; o > 0; --o)
                                    e = "../" + e
                            }
                            return e
                        },
                        buildPath: function() {
                            for (var t = [], e = 0, i = arguments.length; e < i; ++e) {
                                var n = arguments[e];
                                PROTOCOL.test(n) && (t.length = 0),
                                "." != n && "./" != n && n && t.push(n)
                            }
                            return util.resolveRelativePath(t.join("/"))
                        },
                        resolveRelativePath: function(t) {
                            var e = t.match(HOST);
                            for (e && (t = e[2]),
                            t = t.replace(/\/+/g, "/").replace(/\/\.\//g, "/"); t != (t = t.replace(/(^|\/)(?!\.?\.\/)([^\/]+)\/\.\.\//g, "$1")); )
                                ;
                            return e ? e[1] + t.replace(/^\//, "") : t
                        },
                        isAbsolutePath: function(t) {
                            return /^\//.test(t) || PROTOCOL.test(t) || ENV.isWindowsNode && /^[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+/.test(t)
                        },
                        resolve: function(t, e) {
                            return this.isAbsolutePath(e) ? util.resolveRelativePath(e) : util.buildPath(t, e)
                        },
                        resolveRelativeModule: function(t, e) {
                            for (var i = [], n = t.split("."), r = n.length, s = r > 1 && !n[0], o = s ? 0 : -1; ++o < r; )
                                i.push(n[o] ? n[o] : "..");
                            return util.buildPath(s ? e : "", i.join("/"))
                        },
                        resolveModulePath: function(t, e) {
                            if ("." == t.charAt(0))
                                return [getModuleDef(util.resolveRelativeModule(t, e)), getModuleDef(util.resolveRelativeModule(t + ".index", e))];
                            for (var i = t.split("."), n = i.length; n > 0; --n) {
                                var r = i.slice(0, n).join(".")
                                  , s = jsioPath.cache[r]
                                  , o = i.slice(n).join("/");
                                if (s)
                                    return [getModuleDef(util.buildPath(s, o)), getModuleDef(util.buildPath(s, o + "/index"))]
                            }
                            var a = i[0]
                              , h = (o = i.join("/"),
                            [])
                              , u = jsioPath.get()
                              , l = u.length;
                            for (n = 0; n < l; ++n) {
                                var c, d = u[n], f = util.buildPath(d, o);
                                (c = getModuleDef(f)).setBase(a, d),
                                h.push(c),
                                (c = getModuleDef(f + "/index")).setBase(a, d),
                                h.push(c)
                            }
                            return h
                        },
                        splitPath: function(t, e) {
                            e || (e = {});
                            var i = Math.max(t.lastIndexOf("/"), t.lastIndexOf("\\")) + 1;
                            return e.directory = t.substring(0, i),
                            e.filename = t.substring(i),
                            e
                        }
                    }, jsio = util.bind(this, _require, null, null, null), srcCache;
                    jsio.__util = util,
                    jsio.__init__ = init,
                    jsio.setCache = function(t) {
                        srcCache = jsio.__srcCache = t
                    }
                    ,
                    jsio.setCache(cloneFrom && cloneFrom.__srcCache || {}),
                    jsio.setCachedSrc = function(t, e, i) {
                        srcCache[t] && srcCache[t].locked ? console.warn("Cache is ignoring (already present and locked) src " + t) : srcCache[t] = {
                            path: t,
                            src: e,
                            locked: i
                        }
                    }
                    ,
                    jsio.getCachedSrc = function(t) {
                        return srcCache[t]
                    }
                    ,
                    jsio.__filename = "jsio.js",
                    jsio.__cmds = [],
                    jsio.__jsio = jsio,
                    jsio.__require = _require,
                    jsio.__modules = {
                        preprocessors: {}
                    };
                    var jsioPath = {
                        set: function(t) {
                            this.value = [],
                            ("string" == typeof t ? [t] : t).map(this.add, this)
                        },
                        get: function() {
                            return jsioPath.value.slice(0)
                        },
                        add: function(t) {
                            if (2 == arguments.length) {
                                var e = arguments[0]
                                  , i = util.resolve(ENV.getCwd(), arguments[1]);
                                this.cache[e] = i
                            } else {
                                t = util.resolve(ENV.getCwd(), t);
                                for (var n = jsioPath.value, r = n.length, s = 0; s < r; ++s)
                                    if (n[s] == t)
                                        return;
                                n.push(t)
                            }
                        },
                        remove: function(t) {
                            for (var e = jsioPath.value, i = e.length, n = 0; n < i; ++n)
                                e[n] == t && e.splice(n, 1)
                        },
                        value: [],
                        cache: {}
                    }, boundJsio;
                    jsio.path = jsioPath,
                    jsio.addPath = util.bind(jsioPath, "add"),
                    jsio.addCmd = util.bind(jsio.__cmds, "push"),
                    jsio.setEnv = function(t) {
                        !t && cloneFrom ? ENV = new cloneFrom.__env.constructor(util) : ("string" == typeof t && (t = {
                            browser: ENV_browser
                        }[t] || ENV_browser),
                        ENV = new t(util)),
                        this.__env = ENV,
                        this.__dir = ENV.getCwd(),
                        ENV.loadModule || (ENV.loadModule = loadModule),
                        jsio.path.cache.jsio = cloneFrom ? cloneFrom.path.cache.jsio : ENV.getPath(),
                        t == ENV_browser && jsio.path.set(ENV.getPath())
                    }
                    ,
                    cloneFrom ? jsio.setEnv() : "undefined" != typeof JSIO_ENV_CTOR ? jsio.setEnv(JSIO_ENV_CTOR) : void 0 !== process && process.version ? jsio.setEnv("node") : "undefined" == typeof XMLHttpRequest && "undefined" == typeof ActiveXObject || jsio.setEnv("browser"),
                    jsio.main = ENV && ENV.main;
                    var localJsio = function(t) {
                        return boundJsio || (boundJsio = util.bind(this, _require, {}, ENV.getPath(), "jsio.js")),
                        boundJsio(t, {
                            dontExport: !0,
                            dontPreprocess: !0
                        })
                    };
                    function ENV_browser() {
                        var XHR = window.XMLHttpRequest || function() {
                            return new ActiveXObject("Msxml2.XMLHTTP")
                        }
                          , cwd = null
                          , path = null
                          , JOIN = Array.prototype.join;
                        this.name = "browser",
                        this.global = window,
                        this.pathSep = "/",
                        this.global.jsio || (this.global.jsio = jsio),
                        window.console && console.log ? !console.log.apply || /Android|iPhone|iPad|iPod/.test(navigator.userAgent) ? this.log = function() {
                            var t = JOIN.call(arguments, " ");
                            return console.log(t),
                            t
                        }
                        : this.log = function() {
                            return console.log.apply(console, arguments),
                            JOIN.call(arguments, " ")
                        }
                        : this.log = function() {
                            return JOIN.call(arguments, " ")
                        }
                        ,
                        this.getCwd = function() {
                            return ""
                        }
                        ,
                        this.getPath = function() {
                            if (!path) {
                                try {
                                    for (var t, e = new RegExp("(.*?)" + jsio.__filename + "(\\?.*)?$"), i = document.getElementsByTagName("script"), n = 0; t = i[n]; ++n) {
                                        var r = t.src.match(e);
                                        if (r) {
                                            path = r[1],
                                            /^[A-Za-z]*:\/\//.test(path) && (path = util.relative(this.getCwd(), path));
                                            break
                                        }
                                    }
                                } catch (t) {}
                                path || (path = ".")
                            }
                            return path
                        }
                        ;
                        var debugHost = location.protocol + "//" + location.host + "/"
                          , debugPath = location.pathname;
                        this.debugPath = function(t) {
                            return util.buildPath(debugHost, "/" != t[0] && debugPath, t)
                        }
                        ;
                        var rawEval = void 0 === eval("(function(){})") ? function(t, e) {
                            return new Function("return " + t)()
                        }
                        : function(t, e) {
                            t = t + "\n//# sourceURL=" + e;
                            return window.eval(t)
                        }
                        ;
                        this.eval = function(t, e, i) {
                            try {
                                return rawEval(t, this.debugPath(e))
                            } catch (t) {
                                throw t instanceof SyntaxError && DEBUG && this.checkSyntax && this.checkSyntax(i, e),
                                t
                            }
                        }
                        ,
                        this.checkSyntax = function(t, e) {
                            throw new Error("Syntax checking disabled in browser builds")
                        }
                        ,
                        this.fetch = function(t) {
                            var e = new XHR;
                            try {
                                e.open("GET", t, !1),
                                e.send(null)
                            } catch (t) {
                                return ENV.log("e:", t),
                                !1
                            }
                            return 404 != e.status && -1100 != e.status && e.responseText
                        }
                    }
                    var failedFetch = {};
                    function findModule(t) {
                        for (var e, i, n = 0; i = t[n]; ++n) {
                            var r = i.path
                              , s = srcCache[r];
                            if (s) {
                                var o = r.match(/^(.*\/)[^\\\/]+$/);
                                return i.directory = o && o[1] || "",
                                i.src = s.src,
                                i.pre = !0,
                                i
                            }
                            if (!1 !== (e = ENV.fetch(r)))
                                return i.src = e,
                                i;
                            failedFetch[r] = !0
                        }
                        return !1
                    }
                    function processStack() {
                        return importStack.map((function(t, e) {
                            var i = 0 == e ? (new Error).stack : importStack[e - 1].stack
                              , n = i.indexOf(t.path);
                            return n >= 0 && (t.line = ":" + parseInt(i.substring(n + t.path.length + 1))),
                            e + 1 + ': "' + t.friendlyPath + '" ' + t.path + (t.line || "")
                        }
                        ))
                    }
                    function loadModule(t, e, i, n, r) {
                        for (var s = n.from, o = util.resolveModulePath(s, e), a = 0; l = o[a]; ++a) {
                            var h = o[a].path;
                            if (!r.reload && h in jsio.__modules)
                                return o[a];
                            h in failedFetch && o.splice(a--, 1)
                        }
                        if (!o.length) {
                            if (r.suppressErrors)
                                return !1;
                            throw (d = new Error("Could not import `" + n.from + "`\tImport Stack:\n\t\t" + processStack().join("\n\t\t"))).jsioLogged = !0,
                            d.code = MODULE_NOT_FOUND,
                            d
                        }
                        var u = findModule(o);
                        if (!u) {
                            if (r.suppressErrors)
                                return !1;
                            var l, c = [];
                            for (a = 0; l = o[a]; ++a)
                                c.push(l.path);
                            var d;
                            throw (d = new Error("Could not import `" + s + "`\n\tlooked in:\n\t\t" + c.join("\n\t\t") + "\n\tImport Stack:\n\t\t" + processStack().join("\n\t\t"))).code = MODULE_NOT_FOUND,
                            d
                        }
                        return u.friendlyPath = s,
                        !u.baseMod || u.baseMod in jsioPath.cache || (jsioPath.cache[u.baseMod] = u.basePath),
                        "base" == s || !r.reload && (r.dontPreprocess || u.pre) || (u.pre = !0,
                        applyPreprocessors(e, u, ["import", "inlineSlice"], r)),
                        r.preprocessors && applyPreprocessors(e, u, r.preprocessors, r),
                        u
                    }
                    function applyPreprocessors(t, e, i, n) {
                        for (var r = 0, s = i.length; r < s; ++r) {
                            var o = getPreprocessor(i[r]);
                            o && "function" == typeof o && o(t, e, n)
                        }
                    }
                    function getPreprocessor(t) {
                        var e = jsio.__modules["jsio.preprocessors." + t];
                        return "function" == typeof t ? t : e && e.exports || localJsio("import jsio.preprocessors." + t)
                    }
                    function execModuleDef(t, e) {
                        var i = e.src;
                        delete e.src;
                        var n = "(function(_){with(_){delete _;return function $$" + e.friendlyPath.replace(/[\:\\\/.-]/g, "_") + "(){" + i + "\n}}})"
                          , r = e.exports = t.exports
                          , s = ENV.eval(n, e.path, i);
                        (s = s(t)).call(r),
                        r != t.module.exports ? e.exports = t.module.exports : e.exports = t.exports
                    }
                    function resolveImportRequest(t, e, i) {
                        for (var n, r = jsio.__cmds, s = [], o = !1, a = 0; (n = r[a]) && !(o = n(t, e, i, s)); ++a)
                            ;
                        if (!0 !== o)
                            throw new ("undefined" != typeof SyntaxError ? SyntaxError : Error)(String(o || "invalid jsio command: jsio('" + e + "')"));
                        return s
                    }
                    function makeContext(t, e, i, n) {
                        return t || (t = {}),
                        t.exports || (t.exports = {}),
                        t.jsio = util.bind(this, _require, t, i.directory, i.filename),
                        t.require = function(e, i) {
                            return i || (i = {}),
                            i.dontExport = !0,
                            t.jsio(e, i)
                        }
                        ,
                        t.require.main = ENV.main,
                        t.module = {
                            id: e,
                            exports: t.exports
                        },
                        n || "jsio.base" == e || (t.jsio("from jsio.base import *", {
                            dontPreprocess: !0
                        }),
                        t.logging.__create(e, t)),
                        t.jsio.__jsio = jsio,
                        t.jsio.__env = jsio.__env,
                        t.jsio.__dir = i.directory,
                        t.jsio.__filename = i.filename,
                        t.jsio.path = jsioPath,
                        t.__dirname = i.directory,
                        t.__filename = util.buildPath(t.__dirname, i.filename),
                        t
                    }
                    var importStack = [];
                    function _require(t, e, i, n, r) {
                        e = e || "./",
                        i = i || INITIAL_FILE;
                        for (var s = (r = r || {}).exportInto || t || ENV.global, o = resolveImportRequest(s, n, r), a = o.length, h = a > 1 ? {} : null, u = 0; u < a; ++u) {
                            var l, c, d, f = o[u], p = f.from, g = jsio.__modules;
                            try {
                                c = jsio.__env.loadModule(loadModule, e, i, f, r)
                            } catch (t) {
                                d = t
                            }
                            if (c)
                                l = c.path;
                            else if (!1 === c)
                                return !1;
                            if (d) {
                                if (r.suppressErrors)
                                    return !1;
                                throw d.jsioLogged || (ENV.log("\nError loading module:\n", "    [[", n, "]]\n", "    requested by:", e + i, "\n", "    current directory:", jsio.__env.getCwd(), "\n", "  " + d.stack.split("\n").join("\n  ")),
                                d.jsioLogged = !0),
                                d
                            }
                            if (c && importStack.push({
                                friendlyPath: c.friendlyPath,
                                path: c.path,
                                stack: (new Error).stack
                            }),
                            l in g || (g[l] = c),
                            !c.exports) {
                                var v = makeContext(r.context, p, c, f.dontAddBase);
                                if (f.dontUseExports) {
                                    var _ = [";(function(){"]
                                      , m = 1;
                                    for (var w in f.import)
                                        v.exports[w] = void 0,
                                        _[m++] = "if(typeof " + w + '!="undefined"&&exports.' + w + "==undefined)exports." + w + "=" + w + ";";
                                    _[m] = "})();",
                                    c.src += _.join("")
                                }
                                execModuleDef(v, c)
                            }
                            importStack.pop();
                            var y = c.exports;
                            if (1 == a && (h = y),
                            !r.dontExport)
                                if (f.as) {
                                    var b = f.as.match(/^\.*(.*?)\.*$/)[1]
                                      , x = b.split(".")
                                      , E = x.length - 1
                                      , T = s;
                                    for (m = 0; m < E; ++m) {
                                        var C = x[m];
                                        C && (T[C] || (T[C] = {}),
                                        T = T[C])
                                    }
                                    T[x[E]] = y,
                                    a > 1 && (h[b] = y)
                                } else if (f.import)
                                    if (f.import["*"])
                                        for (var m in g[l].exports)
                                            s[m] = y[m];
                                    else
                                        for (var m in f.import)
                                            s[f.import[m]] = y[m]
                        }
                        return h
                    }
                    jsio.addCmd((function(t, e, i, n) {
                        var r = e.match(/^\s*(from|external)\s+([\w.\-$]+)\s+(import|grab)\s+(.*)$/);
                        if (r)
                            return n.push({
                                from: r[2],
                                dontAddBase: "external" == r[1],
                                dontUseExports: "grab" == r[3] || "external" == r[1],
                                import: {}
                            }),
                            r[4].replace(/\s*([\w.\-$*]+)(?:\s+as\s+([\w.\-$]+))?/g, (function(t, e, i) {
                                n[0].import[e] = i || e
                            }
                            )),
                            !0
                    }
                    )),
                    jsio.addCmd((function(t, e, i, n) {
                        var r = e.match(/^\s*import\s+(.*)$/);
                        if (r)
                            return r[1].replace(/\s*([\w.\-$]+)(?:\s+as\s+([\w.\-$]+))?,?/g, (function(t, e, i) {
                                n.push(i ? {
                                    from: e,
                                    as: i
                                } : {
                                    from: e,
                                    as: e
                                })
                            }
                            )),
                            !0
                    }
                    )),
                    jsio.addCmd((function(t, e, i, n) {
                        var r = e.match(/^\s*[\w.0-9$\/\-:\\]+\s*$/);
                        if (r) {
                            var s = util.resolveRelativePath(r[0])
                              , o = "." == s.charAt(0);
                            return s = s.replace(/\.\.\//g, ".").replace(/\.\//g, "").replace(/\/+$/g, ""),
                            "\\" === ENV.pathSep && s.match(/^[a-zA-Z]:.*/) || (s = s.replace(/\//g, ".")),
                            n[0] = {
                                from: (o ? "." : "") + s,
                                original: e
                            },
                            !0
                        }
                    }
                    )),
                    jsio.install = function() {
                        var t = __webpack_require__(360);
                        t.GLOBAL.logger = t.logging.get("jsiocore")
                    }
                    ,
                    jsio.eval = function(t, e) {
                        var i = new ModuleDef(e = ENV.getCwd() || "/");
                        i.src = t,
                        applyPreprocessors(e, i, ["import", "cls"], {}),
                        execModuleDef(ENV.global, i)
                    }
                    ,
                    jsio.clone = util.bind(null, init, jsio);
                    var moduleInfo = util.resolveModulePath("jsio")[0];
                    return moduleInfo && (jsio.__modules[moduleInfo.path] = new ModuleDef(moduleInfo.path),
                    jsio.__modules[moduleInfo.path].exports = jsio),
                    jsio
                }
                var J = init(null, {});
                module.exports = J
            }()
        }
        ).call(this, __webpack_require__(365))
    }
}]);
window.CACHE = {
    'resources/sound-map.json': {
        'resources/sounds/music/Battle Music Loop.mp3': !0,
        'resources/sounds/music/Combat Epic Version.mp3': !0,
        'resources/sounds/music/Crate Shine Loop.mp3': !0,
        'resources/sounds/music/Lobby Theme.mp3': !0,
        'resources/sounds/sfx/Ability Action Text Popup Whoosh.mp3': !0,
        'resources/sounds/sfx/Ability Reveal and Sparkle.mp3': !0,
        'resources/sounds/sfx/Accept Click.mp3': !0,
        'resources/sounds/sfx/Achievement Fanfare Short 1.mp3': !0,
        'resources/sounds/sfx/Badge Fly In and Reveala.mp3': !0,
        'resources/sounds/sfx/Badge Fly To Top and Gym BG Change.mp3': !0,
        'resources/sounds/sfx/Battle Start Whoosh Klang.mp3': !0,
        'resources/sounds/sfx/Big Achievement Earned Short 1.mp3': !0,
        'resources/sounds/sfx/Boss Alert 2.mp3': !0,
        'resources/sounds/sfx/Button Cancel.mp3': !0,
        'resources/sounds/sfx/Chip 6 Now Available Gym Reveal.mp3': !0,
        'resources/sounds/sfx/Chip Attack Whoosh and Big Hit.mp3': !0,
        'resources/sounds/sfx/Chip Flip Over Reveal.mp3': !0,
        'resources/sounds/sfx/Chip Hit Ground 1.mp3': !0,
        'resources/sounds/sfx/Chip Powerup Ability Start Animation.mp3': !0,
        'resources/sounds/sfx/Chip Tap Ground 1.mp3': !0,
        'resources/sounds/sfx/Clearance Wind.mp3': !0,
        'resources/sounds/sfx/Crate Fall Into View.mp3': !0,
        'resources/sounds/sfx/Crate Open Quint.mp3': !0,
        'resources/sounds/sfx/Crate Open Single.mp3': !0,
        'resources/sounds/sfx/Crate Shine Loop.mp3': !0,
        'resources/sounds/sfx/Defeat Whoosh Text.mp3': !0,
        'resources/sounds/sfx/Ding Impact.mp3': !0,
        'resources/sounds/sfx/Drought Weather.mp3': !0,
        'resources/sounds/sfx/Electric Terrain.mp3': !0,
        'resources/sounds/sfx/Evolve PKMN 3.mp3': !0,
        'resources/sounds/sfx/Failure Loss.mp3': !0,
        'resources/sounds/sfx/Fanfare March Achievement.mp3': !0,
        'resources/sounds/sfx/Full Power RICK.mp3': !0,
        'resources/sounds/sfx/Hail 1.mp3': !0,
        'resources/sounds/sfx/Locked Denied 2.mp3': !0,
        'resources/sounds/sfx/Opponent Chip Fly In.mp3': !0,
        'resources/sounds/sfx/PKMN Fanfare Badge 2.mp3': !0,
        'resources/sounds/sfx/PKMN Fanfare Snare Badge 2.mp3': !0,
        'resources/sounds/sfx/Pickup Chip.mp3': !0,
        'resources/sounds/sfx/Prehistoric 1.mp3': !0,
        'resources/sounds/sfx/Rain Dance.mp3': !0,
        'resources/sounds/sfx/Sandstorm 1.mp3': !0,
        'resources/sounds/sfx/Score Opponent.mp3': !0,
        'resources/sounds/sfx/Score Player.mp3': !0,
        'resources/sounds/sfx/Send to Lab.mp3': !0,
        'resources/sounds/sfx/Shield Harden Ability Klang.mp3': !0,
        'resources/sounds/sfx/Shine Shimmer 4.mp3': !0,
        'resources/sounds/sfx/Small Achievement Earned 1.mp3': !0,
        'resources/sounds/sfx/Small Achievement Earned 2.mp3': !0,
        'resources/sounds/sfx/Special Ability Shine.mp3': !0,
        'resources/sounds/sfx/Stat Buff Powerup.mp3': !0,
        'resources/sounds/sfx/Sunshine Ray Shine.mp3': !0,
        'resources/sounds/sfx/Task Complete Short.mp3': !0,
        'resources/sounds/sfx/Text Popup Whoosh.mp3': !0,
        'resources/sounds/sfx/Timer Countdown Ticking Loop.mp3': !0,
        'resources/sounds/sfx/Victory Win SFX Whoosh Text.mp3': !0,
        'resources/sounds/sfx/Wipe Chips.mp3': !0,
        'resources/sounds/sfx/medallion evolution sequence full.mp3': !0
    },
    'resources/strings/en.json': {
        ability: {
            acid: 'Acid',
            ancientPower: 'Ancient Power',
            aquaJet: 'Aqua Jet',
            aquaRing: 'Aqua Ring',
            aquaTail: 'Aqua Tail',
            aromatherapy: 'Aromatherapy',
            auraSphere: 'Aura Sphere',
            batonPass: 'Baton Pass',
            bite: 'Bite',
            blazeKick: 'Blaze Kick',
            blizzard: 'Blizzard',
            bonemerang: 'Bonemerang',
            braveBird1: 'Brave Bird',
            brickBreak: 'Brick Break',
            bubble: 'Bubble',
            bubbleBeam: 'Bubble Beam',
            bulletSeed: 'Bullet Seed',
            closeCombat: 'Close Combat',
            confusion: 'Confusion',
            counter: 'Counter',
            crunch: 'Crunch',
            darkestLariat: 'Darkest Lariat',
            dig: 'Dig',
            discharge: 'Discharge',
            doubleKick: 'Double Kick',
            dreamEater: 'Dream Eater',
            drought: 'Scorcher',
            earthquake: 'Earthquake',
            ember: 'Ember',
            eruption: 'Eruption',
            fireBlast: 'Fire Blast',
            fireFang: 'Fire Fang',
            fireSpin: 'Fire Spin',
            flamethrower: 'Flamethrower',
            flameWheel: 'Flame Wheel',
            flareBlitz2: 'Flare Blitz',
            flareBlitz3: 'Flare Blitz',
            forcePalm: 'Force Palm',
            foresight: 'Foresight',
            furyCutter: 'Fury Cutter',
            futureSight: 'Future Sight',
            guillotine1: 'Guillotine',
            gust: 'Gust',
            hammerArm: 'Hammer Arm',
            harden: 'Harden',
            healPulse: 'Heal Pulse',
            flameCharge: 'Flame Charge',
            heatCrash2: 'Heat Crash',
            heatCrash3: 'Heat Crash',
            hydroCannon: 'Hydro Cannon',
            hydroPump: 'Hydro Pump',
            hyperBeam2: 'Hyper Beam',
            hypnosis: 'Hypnosis',
            iceBeam: 'Ice Beam',
            icePunch: 'Ice Punch',
            icyWind: 'Icy Wind',
            karateChop: 'Karate Chop',
            lastResort1: 'Last Resort',
            lavaPlume: 'Lava Plume',
            leafBlade: 'Leaf Blade',
            leafStorm: 'Leaf Storm',
            leafTornado: 'Leaf Tornado',
            leechSeed: 'Leech Seed',
            lick: 'Lick',
            lowSweep: 'Low Sweep',
            luckyChant: 'Lucky Chant',
            megahorn: 'Megahorn',
            mindReader: 'Mind Reader',
            miracleEye: 'Miracle Eye',
            mirrorCoat: 'Mirror Coat',
            mudBomb: 'Mud Bomb',
            muddyWater: 'Muddy Water',
            mudSlap: 'Mud-Slap',
            mysticalFire: 'Mystical Fire',
            odorSleuth: 'Odor Sleuth',
            outrage2: 'Outrage',
            outrage3: 'Outrage',
            overheat: 'Overheat',
            payDay1: 'Pay Day',
            payDay2: 'Pay Day',
            petalBlizzard: 'Petal Blizzard',
            petalDance2: 'Petal Dance',
            petalDance3: 'Petal Dance',
            phantomForce: 'Phantom Force',
            poisonJab: 'Poison Jab',
            poisonSting: 'Poison Sting',
            powerWhip: 'Power Whip',
            protect: 'Protect',
            psychic: 'Psychic',
            psywave: 'Psywave',
            quickAttack: 'Quick Attack',
            rainDance: 'Rain Dance',
            razorLeaf: 'Razor Leaf',
            razorShell: 'Razor Shell',
            rockTomb: 'Rock Tomb',
            rockWrecker: 'Rock Wrecker',
            seedBomb: 'Seed Bomb',
            shadowBall: 'Shadow Ball',
            shadowSneak: 'Shadow Sneak',
            shellTrap: 'Shell Trap',
            silverWind: 'Silver Wind',
            sing: 'Sing',
            skyAttack1: 'Sky Attack',
            skyAttack3: 'Sky Attack',
            skyUppercut: 'Sky Uppercut',
            sleepPowder: 'Sleep Powder',
            solarBeam: 'Solar Beam',
            sparklingAria: 'Sparkling Aria',
            spikeCannon: 'Spike Cannon',
            spikes: 'Spikes',
            spikyShield: 'Spiky Shield',
            spore: 'Spore',
            stealthRock: 'Stealth Rock',
            stickyWeb: 'Sticky Web',
            submission3: 'Submission',
            sunnyDay: 'Sunny Day',
            superpower: 'Superpower',
            synthesis: 'Synthesis',
            takeDown1: 'Take Down',
            takeDown2: 'Take Down',
            thunder: 'Thunder',
            thunderbolt: 'Thunderbolt',
            thunderShock: 'Thunder Shock',
            topsyTurvy1: 'Topsy-Turvy',
            topsyTurvy2: 'Topsy-Turvy',
            twineedle2: 'Twineedle',
            vineWhip: 'Vine Whip',
            voltTackle1: 'Volt Tackle',
            voltTackle2: 'Volt Tackle',
            waterfall: 'Waterfall',
            waterGun: 'Water Gun',
            waterPulse: 'Water Pulse',
            waterShuriken: 'Water Shuriken',
            wish: 'Wish',
            withdraw: 'Withdraw',
            woodHammer3: 'Wood Hammer',
            wringOut2: 'Wring Out',
            wringOut3: 'Wring Out',
            xScissor: 'X-Scissor',
            yawn: 'Yawn',
            zapCannon: 'Zap Cannon',
            flareBlitz1: 'Flare Blitz',
            airCutter: 'Air Cutter',
            airSlash: 'Air Slash',
            electricTerrain: 'Electric Terrain',
            lockOn: 'Lock-On',
            parabolicCharge1: 'Parabolic Charge',
            wildCharge1: 'Wild Charge',
            psybeam: 'Psybeam',
            sludgeBomb: 'Sludge Bomb',
            thunderPunch: 'Thunder Punch',
            mudShot: 'Mud Shot',
            willOWisp: 'Will-O-Wisp',
            spark: 'Spark',
            thrash1: 'Thrash',
            extremeSpeed: 'Extreme Speed',
            nobleRoar2: 'Noble Roar',
            acidArmor: 'Acid Armor',
            selfDestruct: 'Self-Destruct',
            explosion: 'Explosion',
            psystrike: 'Psystrike',
            psychoBoost: 'Psycho Boost',
            technoBlast: 'Techno Blast',
            steamEruption: 'Steam Eruption',
            bulldoze: 'Bulldoze',
            spiritShackle: 'Spirit Shackle',
            dynamicPunch: 'Dynamic Punch',
            bounce: 'Bounce',
            sludge: 'Sludge',
            absorb: 'Absorb',
            fieryDance: 'Fiery Dance',
            fireLash: 'Fire Lash',
            painSplit: 'Pain Split',
            powerGem: 'Power Gem',
            machPunch: 'Mach Punch',
            psychoCut: 'Psycho Cut',
            metronome1: 'Metronome',
            metronome2: 'Metronome',
            moonlight: 'Moonlight',
            softBoiled: 'Soft-Boiled',
            crossChop: 'Cross Chop',
            playRough: 'Play Rough',
            powerUpPunch: 'Power-Up Punch',
            rapidSpin: 'Rapid Spin',
            haze: 'Haze',
            nightSlash: 'Night Slash',
            iceShard: 'Ice Shard',
            frostBreath: 'Frost Breath',
            hex: 'Hex',
            agility: 'Agility',
            beatUp1: 'Beat Up',
            pressure: 'Pressure',
            earthPower: 'Earth Power',
            present: 'Present',
            psyshock: 'Psyshock',
            grassKnot2: 'Grass Knot',
            grassKnot3: 'Grass Knot',
            moonblast: 'Moonblast',
            zenHeadbutt: 'Zen Headbutt',
            ionDeluge: 'Ion Deluge',
            ironDefense: 'Iron Defense',
            extrasensory: 'Extrasensory',
            darkPulse: 'Dark Pulse',
            sacredFire: 'Sacred Fire',
            shadowPunch: 'Shadow Punch',
            thunderFang: 'Thunder Fang',
            poisonFang: 'Poison Fang',
            crossPoison: 'Cross Poison',
            doubleHit1: 'Double Hit',
            doubleHit2: 'Double Hit',
            dive: 'Dive',
            fly: 'Fly',
            hail: 'Hail',
            rockThrow: 'Rock Throw',
            rockSlide: 'Rock Slide',
            magnitude2: 'Magnitude',
            acrobatics: 'Acrobatics',
            sandstorm: 'Sandstorm',
            metalBurst2: 'Metal Burst',
            headSmash1: 'Head Smash',
            headSmash2: 'Head Smash',
            heavySlam2: 'Heavy Slam',
            prehistoricCall: 'Prehistoric Call',
            dragonAscent: 'Dragon Ascent',
            auroraBeam: 'Aurora Beam',
            brine: 'Brine',
            energyBall: 'Energy Ball',
            smackDown: 'Smack Down',
            precipiceBlades: 'Precipice Blades',
            originPulse: 'Origin Pulse',
            glaciate: 'Glaciate',
            bulletPunch2: 'Bullet Punch',
            doubleEdge1: 'Double-Edge',
            dracoMeteor: 'Draco Meteor',
            oblivionWing: 'Oblivion Wing',
            landsWrath: 'Land\'s Wrath',
            geomancy: 'Geomancy',
            aerialAce: 'Aerial Ace',
            lovelyKiss: 'Lovely Kiss',
            conversion: 'Conversion',
            dragonRush3: 'Dragon Rush',
            iceFang: 'Ice Fang',
            healBell: 'Heal Bell',
            stoneEdge: 'Stone Edge',
            slackOff1: 'Slack Off',
            slackOff2: 'Slack Off',
            uproar1: 'Uproar',
            peck: 'Peck',
            magicalLeaf: 'Magical Leaf',
            disarmingVoice: 'Disarming Voice',
            freezeDry: 'Freeze-Dry',
            pursuit: 'Pursuit',
            zingZap: 'Zing Zap'
        },
        abilityShortDesc: {
            clearance: 'Clears entry powers',
            priority: 'Fights before powers are used',
            protect: 'Protected from losing',
            reveal: 'Reveals {value1} Benched Pokémon'
        },
        abilityType: {
            clearance: 'Clears Support and Hazard powers before they take effect',
            priority: 'Fights before the opponent\'s Active Pokémon can use its power',
            arena: '{value2} Pokémon get {value1} CP',
            hazard: 'Your opponent\'s next {value2} Active Pokémon lose {value1} CP',
            protect: 'Pokémon is protected from losing for one turn',
            reveal: 'Reveals {value1} of your opponent\'s Benched Pokémon',
            se: 'Gets {value1}x CP against {value2} Pokémon',
            transform: 'Transforms into a copy of your opponent\'s last Active Pokémon',
            wish: 'Your next {value2} Active Pokémon gain {value1} CP'
        },
        achievement: {
            collected: 'Collect {targetValue} distinct Pokémon',
            evolved: 'Evolve {targetValue} Pokémon',
            play: 'Play {targetValue} Gym Battles',
            sentToLab: 'Send {targetValue} Pokémon to the Lab',
            win: 'Win {targetValue} Gym Battles'
        },
        adHouse: {
            0: {
                text1: 'Send Pokémon to the Lab to earn Candy',
                text2: 'Use Candy to evolve Pokémon!'
            },
            1: {
                text1: 'Reveal Benched Pokémon!',
                text2: 'Remember: Pokémon are ordered left to right by CP!'
            },
            2: {
                text1: 'Protect your Pokémon from harm',
                text2: 'Render your opponent\'s powers harmless!'
            },
            3: {
                text1: 'Priority lets you fight immediately',
                text2: 'Beat Pokémon before they can use their powers!'
            },
            4: {
                text1: 'Boost Pokémon in the Arena!',
                text2: 'Only one Arena can be in effect at a time'
            },
            5: {
                text1: 'Entry Hazards damage Pokémon',
                text2: 'Entry Support heal Pokémon'
            },
            6: {
                text1: 'Clear Entry Hazards and Support!',
                text2: 'Occurs before entry powers take effect'
            }
        },
        arenaScreen: {
            effectsCanceled: '{arena1} and {arena2}\ncancelled out!'
        },
        badge: {
            1: 'TRAINEE',
            2: 'GRASS',
            3: 'FIRE',
            4: 'WATER',
            5: 'LIGHTNING',
            6: 'FIGHTING',
            7: 'PSYCHIC',
            8: 'DRAGON',
            9: 'JUNGLE',
            10: 'GEYSER',
            11: 'FAIRY'
        },
        badgeHistoryScreen: {
            badges: 'Badges'
        },
        badgeTitle: {
            1: 'Trainee',
            2: 'Grass',
            3: 'Fire',
            4: 'Water',
            5: 'Lightning',
            6: 'Fighting',
            7: 'Psychic',
            8: 'Dragon',
            9: 'Jungle',
            10: 'Geyser',
            11: 'Fairy'
        },
        badgeUnlock: {
            available: 'NOW AVAILABLE',
            gotBadge: 'YOU GOT THE {type} BADGE!',
            unlock: 'GYM {number} UNLOCKED!'
        },
        bagScreen: {
            cannotBeUndone: 'This cannot be undone',
            cannotEvolveEquipped: 'This Pokémon is on a team and cannot be evolved.',
            editTeam: 'EDIT TEAM',
            editTeamConfirmButton: 'DONE',
            error: {
                leaveConfirm: 'Are you sure you want to leave?',
                noDupeFamily: 'You can only use one Pokémon from the {family} family at a time!',
                teamFull: 'Your team is full!',
                teamateLimit: 'You can only use two {type} Pokémon!',
                unableToSave: 'Unable to save team',
                legendaryLimit0: 'Sorry, you cannot use {legendaryIcon} Pokémon yet!',
                legendaryLimit1: 'Sorry, you may only use 1x {legendaryIcon} Pokémon',
                legendaryLimit2: 'Sorry, you can only use 2x {legendaryIcon} Pokémon',
                tierLimit0: 'Sorry, you cannot use {tierIcon} Pokémon yet!',
                tierLimit1: 'Sorry, you may only use 1x {tierIcon} Pokémon',
                tierLimit2: 'Sorry, you may only use 2x {tierIcon} Pokémon'
            },
            evolutionConfirm: 'Are you sure you want\nto evolve {pokemonName}?',
            evolveButton: 'EVOLVE',
            evolvesFrom: 'Evolves from {evolutionName}',
            filterModeTab: 'INFO',
            get: 'Claim',
            information: 'INFORMATION',
            selectPokemonFirst: 'Tap to select Pokémon to send to the Lab',
            sellPokemonBatchLimit: 'You cannot send more than {max} Pokémon to the Lab at a time.',
            sellPokemonInTeam: 'This Pokémon is on a team and cannot be sent to the Lab',
            send: 'Send',
            sendConfirmation1: 'Send {pokemonCount} Pokémon to the Lab for {candiesSum}?',
            sendDisclaimer: 'Tap to select Pokémon to send to Lab',
            sendSuccesfull: 'You have sent {pokemonCount} Pokémon to the Lab for {candiesSum}',
            sendToLab: 'SEND TO LAB',
            sendToLabConfirmButton: 'CANCEL',
            topForMoreInfo: 'Tap on Pokémon to check info and evolve!',
            warning: {
                evolveEquipped: 'Evolving this Pokemon will remove it from your team!',
                evolveEquippedQuestion: 'Are you sure you want to evolve?',
                teamNotReady1: 'Sorry, this is an invalid team!',
                teamNotReady2: 'Please finish editing it'
            },
            expand: 'Expand your Bag?',
            expandSucccess: 'Bag successfully expanded to {slot} slots.',
            sellPokemonFavorite: 'Sorry, this Pokémon is a Favorite and cannot be sent to the Lab'
        },
        callout: {
            opponentTurn: 'OPPONENT\'S TURN',
            yourTurn: 'YOUR TURN!'
        },
        challenge: {
            challengeBrag3: '{challenger} totally destroyed {opponent}!',
            challengeBrag2: '{challenger} soundly crushed {opponent}!',
            challengeBrag1: 'It was close, but {challenger} defeated {opponent}!',
            challengeBrag0: '{challenger} and {opponent} had a fierce battle!'
        },
        challengeReferralPrompt: {
            header: 'Great job winning that Gym battle!',
            text: 'But can you beat your friend?',
            button: 'Yes, I can!'
        },
        challengeScreen: {
            title: 'Duel',
            subTitle: 'Challenge your friends and earn rewards!',
            battle: 'BATTLE',
            quickMatch: 'QUICK MATCH',
            invite: 'INVITE',
            waitFor: 'Waiting for response...',
            notFoundUser: 'We can\'t find any friends who play Pokémon Medallion Battle!',
            joinChallengeRequestHanging: 'Unable to connect with your friend',
            waitForPlayer: 'Waiting for player to respond...',
            switchAiTitle: 'Starting game',
            switchAiText: 'Please wait...',
            noDoubleChallenge: 'You cannot challenge the same player twice in a row',
            skipBtn: 'PLAY NOW',
            loadingFriends: 'Loading friends...',
            alreadyPlayed1: 'You\'ve already challenged this player today',
            alreadyPlayed2: 'Challenge someone new to earn points!'
        },
        chatbot: {
            btn_play: 'Play Now',
            btn_challengeNow: 'Challenge Now',
            btn_claimNCandies: 'Claim {amount} Candy',
            desciptionLine1: 'Turn on reminders and',
            desciptionLine2: 'GET FARFETCH\'D',
            message: 'Pokémon Medallion\nmay send you announcements, tips\nand more. You can turn off\nmessages in the game\nconversation.',
            messageHeader: 'Turn On Messages From\nPokémon Medallion',
            notNow: 'not now',
            reminders: 'Reminders',
            thankYou: 'Thanks for playing. Come back soon!',
            turnOn: 'turn on',
            claimFreePack: 'Claim',
            freePackRemider: 'Your free Star Medal is ready!',
            '24hReminder': 'Evolve to get a stronger Pokémon, on us!',
            '30hReminder': 'Welcome back! Exciting battles await!',
            '36hReminder': '{player}, we miss you! Come back and play with us!',
            '38hReminder': '{player}, a Farfetch\'d has appeared!',
            '46hReminder': 'Star Packs contain rare Pokémon. Try your luck!',
            passesReplenished: 'Your Raid Passes have replenished! Help your team defeat {boss} now!'
        },
        common: {
            fatal: 'Fatal error: {error}',
            tapToContinue: 'Tap to continue',
            alreadyInvited: 'You\'ve already invited this player today'
        },
        daily: {
            coinSpent: 'Spend {targetValue} PokéCoin',
            evolved: 'Evolve {targetValue} Pokémon',
            play: 'Play {targetValue} Gym Battles',
            sentToLab: 'Send {targetValue} Pokémon to the Lab',
            win: 'Win {targetValue} Gym Battles'
        },
        error: {
            candyOverflowWarning: 'You will exceed the limit for Candy if you perform this action!',
            coinOverflowWarning: 'You will exceed the limit for PokéCoin if you perform this action!',
            noAdSupport: 'Sorry, but this device currently does not support ads',
            noOpponent: 'Unable to find an opponent. Please try again later.',
            reconnectGiveUp: 'The game connection has been lost, please reload',
            unableToConnect: 'Unable to reach the server',
            disconnectedInFight: 'You\'ve lost your network connection',
            unableToLoadAd: 'No ads available. Please try again later.',
            noSpaceInBag: 'Not enough space in your Bag!\nSend Pokémon to the Lab to free up space',
            notEnoughcandy: 'Not enough Candy!\nSend Pokémon to the Lab to get more',
            notEnoughcoin: 'Not enough PokéCoin! Win battles to get more',
            mailboxMessageExpired: 'Sorry, this message had expired.',
            invalidTeam: 'Sorry, this is an invalid team! Please finish editing it.',
            raidClosed: 'Raid expired\n\nStay tuned for the next adventure!',
            raidClosedDetailed: 'Raid expired\n\nReturn in {h}h {m}m for the next adventure!',
            raidFull: 'Sorry, but this Raid party is full',
            joinRaidCooldownError: 'Slow down, you are joining Raid parties too quickly!\n\nTry again in {hours}h {minutes}m',
            pvpError_gameStillActive: 'Slow down, you have another battle in progress. Please wait for it to terminate.',
            raidDoNotExist: 'Sorry, this Raid does not exist anymore'
        },
        flag: {
            legendary: 'Legendary'
        },
        ftue: {
            addToTeam: 'Let\'s add {pokemon} to the team before starting another battle',
            battle2: 'Try {pokemon} in a battle!',
            claimReward: 'Claim your Task rewards before starting another battle',
            evolve: 'Evolve Pokémon to increase CP and learn powers!\n\nTap to open your Bag.',
            howEvolve: 'Evolution costs Candy.\n\nEarn Candy by sending Pokémon to the Lab.',
            letsBattle: '[b]Welcome to\nPokémon Medallion Battle![/b]\n\nWin [b]3[/b] fights to become the victor!',
            opponentName: 'Rival Trainer',
            playpk1: '[b]Let\'s play {pokemon}[/b]\n\nThe Pokémon with higher CP wins',
            playpk2: '[b]You play first after a win. Send out {pokemon}![/b]',
            playpk3: '[b]Choose {pokemon}[/b]\n\nSome Pokémon have Powers\nTap on them to learn more',
            playStarter: '[b]Let\'s finish this with {pokemon}![/b]\n\nSuper Effective increases CP against a Pokémon type.',
            playStarter2: '[b]Let\'s finish this with {pokemon}![/b]',
            superEffective: '{pokemon}\'s {ability} power boosts its CP against {type} Pokémon',
            protect: 'Metapod\'s {ability} power protects it from losing!',
            tryPokemon: 'Give {pokemon} a try.\n\nTap BATTLE to start a match.',
            removeMedalFromTeam: 'Remove a Pokémon from your team to make room for {pokemon}',
            addMedalToTeam: 'Tap {pokemon} to add it to your team',
            completeTeam: 'Complete your team by tapping unselected Pokémon'
        },
        gachaScreen: {
            note: 'Reach the next Gym to unlock new Pokémon!',
            noteStarPack: 'Open Star Packs to collect\nall of the Starters!'
        },
        general: {
            cancel: 'Cancel',
            close: 'Close',
            countdownDHTime: '{d}d {h}h',
            countdownHMTime: '{h}h {m}m',
            countdownMSTime: '{m}m {s}s',
            done: 'Done',
            doneExclamation: 'Done!',
            errorHappened: 'An error has occurred.\n{error}',
            get: 'CLAIM',
            go: 'GO',
            leave: 'Leave',
            noButton: 'NO',
            off: 'OFF',
            ok: 'OK',
            on: 'ON',
            proceed: 'Proceed',
            restartIn: 'Restart in:',
            revert: 'Undo',
            stay: 'Stay',
            team: 'Team',
            yesButton: 'YES',
            score: 'Score',
            idle: 'Idle',
            remove: 'Remove'
        },
        gifts: {
            dailyLimit: 'You\'ve already claimed\n5/5 times today.\nCheck back tomorrow!',
            expired: 'Sorry, but this request has expired.\nSee if anyone else needs help.',
            sourceLimit: 'You\'ve already claimed a gift from this player today!\nCheck back tomorrow.',
            gotItem: 'You got {item}!',
            help: {
                candy: 'Help Mimikyu make friends with candy',
                coins: 'Help Meowth return his "borrowed" coins',
                starMedal: 'Help Eevee find trainers for these eggs'
            },
            header: 'Give your friends the gift of Pokémon!',
            sendAll: 'SEND ALL',
            send: 'SEND',
            sendItem: 'Send {item} to a friend!',
            title: 'Gifts',
            yourRequest: 'Sorry, but this is your request.\nSee if anyone else needs help.',
            gotItemInMailbox: '{item} was deposited into your Mailbox.\nYou sent {giftBack} and a gift back!',
            gotItemAndGiftSend: 'You got {item}\nYou sent {giftBack} and a gift back!',
            gotItemAndGiftRespond: 'You got {item}\nYou sent {giftBack} back!'
        },
        gym: {
            1: 'Trainer Town',
            2: 'Greenwood Grove',
            3: 'Scorchfire Summit',
            4: 'Clearwater Coast',
            5: 'Power Plant',
            6: 'Dustrock Dojo',
            7: 'Shadowmoss Shrine',
            8: 'Dragon\'s Den',
            9: 'Silverglade Safari',
            10: 'Mistwreath Mountains',
            11: 'Mooncrest Meadow',
            final: 'Champions Cup',
            title: 'Gym {gymId}:'
        },
        landingScreen: {
            battle: 'BATTLE',
            inviteBtn: 'INVITE',
            nextBadge: 'Next Gym',
            team: 'TEAM',
            challengeBtn: 'DUEL',
            rating: 'Rating:',
            rank: 'Rank:'
        },
        leaderboard: {
            cannotLoad: 'Failed to retrieve leaderboard',
            requesting: 'Requesting leaderboard...',
            seasonNumber: 'Season {number} Rankings'
        },
        mailbox: {
            emptyMailboxMessage: 'Your Mailbox is Empty',
            button: {
                claim: 'CLAIM',
                read: 'READ'
            },
            expiration: 'Expires in {h}h {m}m',
            expired: 'Expired',
            referralBonus: {
                title: 'Thanks!',
                body: 'Earn {number}{coinSymbol} each time your friends claim a gift!'
            },
            csGift: {
                title: 'Support',
                body: 'From the Pokémon Medallion Battle team',
                default: {
                    title: 'Support',
                    body: 'From the Pokémon Medallion Battle team'
                },
                sorry: {
                    title: 'Sorry!',
                    body: 'Compensation for technical difficulties'
                }
            },
            gift: {
                title: 'Gift',
                body: 'Your friend has sent you a gift'
            },
            raidReward: {
                title: 'Raid Pack - Stage {stage}',
                body: 'Reward for helping to defeat {bossName}!'
            },
            raidHighScore: {
                title: 'High Score - Stage {stage}',
                body: 'Reward for your #{rank} high score!'
            },
            raidAnnouncement: {
                title: 'Raid Event - {raidName}',
                body: '{bossName} has been spotted! Team up to defeat it!'
            },
            referralSilverPack: {
                title: 'Thanks!',
                body: 'Reward for recruiting a friend'
            },
            subscriptionTutorial: {
                title: 'Get Notifications',
                body: 'Never miss out on a thing!'
            },
            raidTotalDamage: {
                title: 'Total Damage - Stage {stage}',
                body: 'Reward for your #{rank} total damage!'
            },
            lbReward: {
                global: {
                    title: 'Global Ranking',
                    body: 'Reward for your #{rank} Global ranking!'
                },
                region: {
                    title: 'Country Ranking',
                    body: 'Reward for your #{rank} Country ranking!'
                }
            }
        },
        maintenance: {
            details: 'Sorry, we\'re doing\na bit of maintenance.',
            title: 'Be back soon!'
        },
        navBar: {
            bag: 'BAG',
            battle: 'BATTLE',
            challenge: 'DUEL',
            mail: 'MAIL',
            pokedex: 'POKÉDEX',
            shop: 'SHOP'
        },
        noFriendReferralPrompt: {
            button: 'OK',
            header1: 'Pokémon Medallion is more fun with friends!',
            text1: 'Invite them to play with you',
            text2: 'Challenge your friends to a Duel and you could win a rare Pikachu!',
            header3: 'You can now directly challenge your friends!',
            text3: 'Show them who\'s the best'
        },
        notification: {
            defaultPlay: {
                btn: 'Play Now'
            },
            defaultClaim: {
                btn: 'Claim'
            },
            gift_candy: {
                btn: 'Claim {count} Candy',
                text: 'Mimikyu has Candy for you. Will you be his friend?'
            },
            gift_coins: {
                btn: 'Claim {count} PokéCoin',
                text: 'Meowth has some PokéCoin that belong to you...'
            },
            gift_starMedal: {
                btn: 'Claim Medal',
                text: '{friend} has a gift for you!'
            },
            gift_reward: {
                text: '{friend} says thanks with a gift!'
            },
            simpleThanks: {
                btn: 'Play Now',
                text: 'Thanks for playing. Come back soon!'
            },
            shareMedal: {
                btn: 'Play Now',
                text: 'Check out my {pokemon}!'
            },
            whichStarter: {
                text: 'Which Starter Pokémon are you?'
            },
            win: {
                text: '{playerFirstName}\'s {myPokemon} took down {opposingPokemon}!'
            },
            winBy1: {
                text: 'It was close, but {attacker} defeated {defender}!'
            },
            winBy2: {
                text: '{attacker}\'s {pokemon} took down {defenderPokemon}!'
            },
            winBy3: {
                text: '{attacker} totally destroyed {defender}!'
            },
            lose: {
                text: '{defender} successfully fended off {attacker} with {defenderPokemon}!'
            },
            challenge: {
                text: '{challengerName} challenges you to a Pokémon Medallion Battle'
            },
            shareBadge: {
                text: 'Finally, I got the {badge} Badge!'
            },
            sharePack: {
                text: 'Wow! Check out my haul!'
            }
        },
        pokedexEntry: {
            evolvesInto: 'Evolves into {evolutionName}',
            finalEvolution: 'Final Evolution',
            height: 'Height',
            moreInfo: 'Collect to Learn More',
            pokemonIllustrator: 'Illustrator: {illustrator}',
            unknownValue: '???',
            weight: 'Weight'
        },
        pokemon: {
            alomomola: 'Alomomola',
            ariados: 'Ariados',
            articuno: 'Articuno',
            bayleef: 'Bayleef',
            beedrill: 'Beedrill',
            bellossom: 'Bellossom',
            blastoise: 'Blastoise',
            blaziken: 'Blaziken',
            blitzle: 'Blitzle',
            braixen: 'Braixen',
            brionne: 'Brionne',
            bulbasaur: 'Bulbasaur',
            bunnelby: 'Bunnelby',
            butterfree: 'Butterfree',
            camerupt: 'Camerupt',
            carbink: 'Carbink',
            caterpie: 'Caterpie',
            celebi: 'Celebi',
            charizard: 'Charizard',
            charmander: 'Charmander',
            charmeleon: 'Charmeleon',
            chesnaught: 'Chesnaught',
            chespin: 'Chespin',
            chikorita: 'Chikorita',
            chimchar: 'Chimchar',
            cloyster: 'Cloyster',
            combusken: 'Combusken',
            corsola: 'Corsola',
            croagunk: 'Croagunk',
            crobat: 'Crobat',
            croconaw: 'Croconaw',
            cubone: 'Cubone',
            cyndaquil: 'Cyndaquil',
            dartrix: 'Dartrix',
            decidueye: 'Decidueye',
            dedenne: 'Dedenne',
            delibird: 'Delibird',
            delphox: 'Delphox',
            deoxys: 'Deoxys',
            dewott: 'Dewott',
            diggersby: 'Diggersby',
            ditto: 'Ditto',
            donphan: 'Donphan',
            dragonair: 'Dragonair',
            dragonite: 'Dragonite',
            dratini: 'Dratini',
            ducklett: 'Ducklett',
            duosion: 'Duosion',
            eevee: 'Eevee',
            electabuzz: 'Electabuzz',
            electivire: 'Electivire',
            electrike: 'Electrike',
            elekid: 'Elekid',
            emboar: 'Emboar',
            empoleon: 'Empoleon',
            exeggcute: 'Exeggcute',
            exeggutor: 'Exeggutor',
            farfetchd: 'Farfetch\'d',
            fearow: 'Fearow',
            feebas: 'Feebas',
            fennekin: 'Fennekin',
            feraligatr: 'Feraligatr',
            flareon: 'Flareon',
            fletchinder: 'Fletchinder',
            fletchling: 'Fletchling',
            froakie: 'Froakie',
            frogadier: 'Frogadier',
            froslass: 'Froslass',
            gastly: 'Gastly',
            genesect: 'Genesect',
            gengar: 'Gengar',
            glalie: 'Glalie',
            gloom: 'Gloom',
            golbat: 'Golbat',
            golduck: 'Golduck',
            greninja: 'Greninja',
            grimer: 'Grimer',
            grotle: 'Grotle',
            grovyle: 'Grovyle',
            gyarados: 'Gyarados',
            haunter: 'Haunter',
            heatmor: 'Heatmor',
            heliolisk: 'Heliolisk',
            helioptile: 'Helioptile',
            heracross: 'Heracross',
            'ho-oh': 'Ho-Oh',
            hoppip: 'Hoppip',
            horsea: 'Horsea',
            incineroar: 'Incineroar',
            infernape: 'Infernape',
            inkay: 'Inkay',
            ivysaur: 'Ivysaur',
            jolteon: 'Jolteon',
            jumpluff: 'Jumpluff',
            jynx: 'Jynx',
            kakuna: 'Kakuna',
            kingdra: 'Kingdra',
            kricketot: 'Kricketot',
            kricketune: 'Kricketune',
            kyurem: 'Kyurem',
            lapras: 'Lapras',
            larvesta: 'Larvesta',
            litleo: 'Litleo',
            litten: 'Litten',
            lucario: 'Lucario',
            lugia: 'Lugia',
            lunatone: 'Lunatone',
            machamp: 'Machamp',
            machoke: 'Machoke',
            machop: 'Machop',
            magcargo: 'Magcargo',
            magikarp: 'Magikarp',
            magmar: 'Magmar',
            magnemite: 'Magnemite',
            magneton: 'Magneton',
            magnezone: 'Magnezone',
            malamar: 'Malamar',
            manectric: 'Manectric',
            maractus: 'Maractus',
            marowak: 'Marowak',
            marshtomp: 'Marshtomp',
            meganium: 'Meganium',
            meowth: 'Meowth',
            metapod: 'Metapod',
            mew: 'Mew',
            mewtwo: 'Mewtwo',
            milotic: 'Milotic',
            mimikyu: 'Mimikyu',
            moltres: 'Moltres',
            monferno: 'Monferno',
            morelull: 'Morelull',
            mudkip: 'Mudkip',
            muk: 'Muk',
            natu: 'Natu',
            ninetales: 'Ninetales',
            numel: 'Numel',
            oddish: 'Oddish',
            onix: 'Onix',
            oshawott: 'Oshawott',
            paras: 'Paras',
            parasect: 'Parasect',
            persian: 'Persian',
            phanpy: 'Phanpy',
            pichu: 'Pichu',
            pidgeot: 'Pidgeot',
            pidgeotto: 'Pidgeotto',
            pidgey: 'Pidgey',
            pignite: 'Pignite',
            pikachu: 'Pikachu',
            pinsir: 'Pinsir',
            piplup: 'Piplup',
            politoed: 'Politoed',
            poliwag: 'Poliwag',
            poliwhirl: 'Poliwhirl',
            poliwrath: 'Poliwrath',
            ponyta: 'Ponyta',
            popplio: 'Popplio',
            primarina: 'Primarina',
            prinplup: 'Prinplup',
            psyduck: 'Psyduck',
            pyroar: 'Pyroar',
            quagsire: 'Quagsire',
            quilava: 'Quilava',
            quilladin: 'Quilladin',
            raichu: 'Raichu',
            rapidash: 'Rapidash',
            reuniclus: 'Reuniclus',
            rhydon: 'Rhydon',
            rhyhorn: 'Rhyhorn',
            rhyperior: 'Rhyperior',
            riolu: 'Riolu',
            rowlet: 'Rowlet',
            salandit: 'Salandit',
            salazzle: 'Salazzle',
            samurott: 'Samurott',
            sceptile: 'Sceptile',
            seadra: 'Seadra',
            serperior: 'Serperior',
            servine: 'Servine',
            shellder: 'Shellder',
            shiinotic: 'Shiinotic',
            shuckle: 'Shuckle',
            skiploom: 'Skiploom',
            slowbro: 'Slowbro',
            slowking: 'Slowking',
            slowpoke: 'Slowpoke',
            slugma: 'Slugma',
            snivy: 'Snivy',
            snorlax: 'Snorlax',
            snorunt: 'Snorunt',
            solosis: 'Solosis',
            solrock: 'Solrock',
            spearow: 'Spearow',
            spinarak: 'Spinarak',
            squirtle: 'Squirtle',
            stunfisk: 'Stunfisk',
            swampert: 'Swampert',
            swanna: 'Swanna',
            talonflame: 'Talonflame',
            tepig: 'Tepig',
            torchic: 'Torchic',
            torracat: 'Torracat',
            torterra: 'Torterra',
            totodile: 'Totodile',
            toxicroak: 'Toxicroak',
            treecko: 'Treecko',
            tropius: 'Tropius',
            turtonator: 'Turtonator',
            turtwig: 'Turtwig',
            typhlosion: 'Typhlosion',
            vaporeon: 'Vaporeon',
            venusaur: 'Venusaur',
            vileplume: 'Vileplume',
            volcanion: 'Volcanion',
            volcarona: 'Volcarona',
            vulpix: 'Vulpix',
            wailmer: 'Wailmer',
            wailord: 'Wailord',
            wartortle: 'Wartortle',
            weedle: 'Weedle',
            wishiwashi: 'Wishiwashi',
            wobbuffet: 'Wobbuffet',
            wooper: 'Wooper',
            wynaut: 'Wynaut',
            xatu: 'Xatu',
            zapdos: 'Zapdos',
            zebstrika: 'Zebstrika',
            zubat: 'Zubat',
            raikou: 'Raikou',
            entei: 'Entei',
            suicune: 'Suicune',
            houndour: 'Houndour',
            houndoom: 'Houndoom',
            teddiursa: 'Teddiursa',
            ursaring: 'Ursaring',
            mareep: 'Mareep',
            flaaffy: 'Flaaffy',
            ampharos: 'Ampharos',
            misdreavus: 'Misdreavus',
            mismagius: 'Mismagius',
            skarmory: 'Skarmory',
            larvitar: 'Larvitar',
            pupitar: 'Pupitar',
            tyranitar: 'Tyranitar',
            gligar: 'Gligar',
            gliscor: 'Gliscor',
            sneasel: 'Sneasel',
            weavile: 'Weavile',
            azurill: 'Azurill',
            marill: 'Marill',
            azumarill: 'Azumarill',
            bronzor: 'Bronzor',
            bronzong: 'Bronzong',
            steelix: 'Steelix',
            growlithe: 'Growlithe',
            arcanine: 'Arcanine',
            pineco: 'Pineco',
            forretress: 'Forretress',
            togedemaru: 'Togedemaru',
            shroomish: 'Shroomish',
            breloom: 'Breloom',
            happiny: 'Happiny',
            chansey: 'Chansey',
            ralts: 'Ralts',
            kirlia: 'Kirlia',
            gallade: 'Gallade',
            gardevoir: 'Gardevoir',
            cleffa: 'Cleffa',
            clefairy: 'Clefairy',
            clefable: 'Clefable',
            wingull: 'Wingull',
            pelipper: 'Pelipper',
            lotad: 'Lotad',
            lombre: 'Lombre',
            ludicolo: 'Ludicolo',
            meditite: 'Meditite',
            medicham: 'Medicham',
            beldum: 'Beldum',
            metang: 'Metang',
            metagross: 'Metagross',
            baltoy: 'Baltoy',
            claydol: 'Claydol',
            sableye: 'Sableye',
            duskull: 'Duskull',
            dusclops: 'Dusclops',
            dusknoir: 'Dusknoir',
            jirachi: 'Jirachi',
            aipom: 'Aipom',
            ambipom: 'Ambipom',
            slakoth: 'Slakoth',
            vigoroth: 'Vigoroth',
            slaking: 'Slaking',
            torkoal: 'Torkoal',
            staryu: 'Staryu',
            starmie: 'Starmie',
            regice: 'Regice',
            geodude: 'Geodude',
            graveler: 'Graveler',
            golem: 'Golem',
            regirock: 'Regirock',
            aron: 'Aron',
            lairon: 'Lairon',
            aggron: 'Aggron',
            porygon: 'Porygon',
            porygon2: 'Porygon2',
            porygonz: 'Porygon-Z',
            registeel: 'Registeel',
            cranidos: 'Cranidos',
            rampardos: 'Rampardos',
            shieldon: 'Shieldon',
            bastiodon: 'Bastiodon',
            tyrunt: 'Tyrunt',
            tyrantrum: 'Tyrantrum',
            groudon: 'Groudon',
            rayquaza: 'Rayquaza',
            aerodactyl: 'Aerodactyl',
            omanyte: 'Omanyte',
            omastar: 'Omastar',
            tirtouga: 'Tirtouga',
            carracosta: 'Carracosta',
            carvanha: 'Carvanha',
            sharpedo: 'Sharpedo',
            kyogre: 'Kyogre',
            lileep: 'Lileep',
            cradily: 'Cradily',
            anorith: 'Anorith',
            armaldo: 'Armaldo',
            scyther: 'Scyther',
            scizor: 'Scizor',
            xerneas: 'Xerneas',
            swablu: 'Swablu',
            altaria: 'Altaria',
            togepi: 'Togepi',
            togetic: 'Togetic',
            togekiss: 'Togekiss',
            bagon: 'Bagon',
            shelgon: 'Shelgon',
            salamence: 'Salamence',
            yveltal: 'Yveltal',
            kabuto: 'Kabuto',
            kabutops: 'Kabutops',
            archen: 'Archen',
            archeops: 'Archeops',
            gible: 'Gible',
            gabite: 'Gabite',
            garchomp: 'Garchomp',
            zygarde: 'Zygarde',
            amaura: 'Amaura',
            aurorus: 'Aurorus'
        },
        popin: {
            socialGiftPromptHigh: {
                text: 'Give your friend the gift of Pokémon!',
                cta: 'OK'
            },
            challengePrompt: {
                text: 'Great job winning that Gym battle!',
                text2: 'But can you beat your friend?',
                cta: 'Yes, I can!'
            },
            challengeInvite: {
                text: 'Duel your friends and you could earn a rare {pokemon}!',
                cta: 'OK'
            }
        },
        quiz: {
            playNow: 'Let\'s Play!',
            next: 'NEXT',
            share: 'SHARE',
            shareMsg: 'is {nature} like',
            playerIs: '{player} is',
            tap: 'Tap to find out!',
            tryAgain: 'TRY AGAIN',
            whichStarter: 'Which Starter Pokémon are you?',
            yourPersonality: '{player},\nyour {nature} personality matches'
        },
        quizResult: {
            bulbasaur: 'Gentle',
            charmander: 'Sassy',
            chespin: 'Relaxed',
            chikorita: 'Docile',
            chimchar: 'Impish',
            cyndaquil: 'Timid',
            fennekin: 'Stubborn',
            froakie: 'Careful',
            litten: 'Aloof',
            mudkip: 'Quirky',
            oshawott: 'Naughty',
            piplup: 'Modest',
            popplio: 'Mild',
            rowlet: 'Hardy',
            snivy: 'Serious',
            squirtle: 'Bold',
            tepig: 'Hasty',
            torchic: 'Brave',
            totodile: 'Jolly',
            treecko: 'Calm',
            turtwig: 'Bashful'
        },
        quizShare: {
            bulbasaur: '• Gentle\n• Reliable\n• Practical\n• Always willing to lend a helping hand',
            charmander: '• Sassy\n• Optimistic\n• Strong-willed\n• Allows nothing to stand in the way of victory!',
            chespin: '• Relaxed\n• Tolerant\n• Charismatic\n• Totally chill, but watch out for that hidden rage!',
            chikorita: '• Docile\n• Sensitive\n• Protective\n• Quick to trust; a warm and caring personality',
            chimchar: '• Impish\n• Creative\n• Exuberant\n• The life of the party!',
            cyndaquil: '• Timid\n• Measured\n• Considerate\n• Prefers staying indoors with a close-knit group',
            fennekin: '• Stubborn\n• Kind\n• Loyal\n• Steadfast and true to one\'s friends',
            froakie: '• Careful\n• Intuitive\n• Resourceful\n• Has an uncanny ability to turn defeat into victory',
            litten: '• Aloof\n• Principled\n• Dependable\n• Follows one\'s convictions, wherever they may go',
            mudkip: '• Quirky\n• Hard-working\n• Perceptive\n• Always full of new ideas and bustle!',
            oshawott: '• Naughty\n• Charming\n• Tinkerer\n• Melts hearts with a mischievous smile',
            piplup: '• Modest\n• Altruistic\n• Supportive\n• The best listener, ever',
            popplio: '• Mild\n• Visionary\n• Artistic\n• Believes the world is our canvas',
            rowlet: '• Hardy\n• Innovative\n• Logical\n• A problem-solver who always has a plan',
            snivy: '• Serious\n• Elegant\n• Forthright\n• Can\'t stand being underestimated',
            squirtle: '• Bold\n• Idealistic\n• Natural leader\n• Always gets back up after being knocked down',
            tepig: '• Hasty\n• Outspoken\n• Always hungry\n• Food first, questions later!',
            torchic: '• Brave\n• Adventurous\n• Trusting\n• Always climbing the next mountain!',
            totodile: '• Jolly\n• Spontaneous\n• Energetic\n• Can cheer others up in any situation!',
            treecko: '• Calm\n• Confident\n• Analytical\n• Stays cool and collected under pressure',
            turtwig: '• Bashful\n• Honorable\n• Protective\n• A low-key personality with great inner strength'
        },
        raid: {
            bossApproaching: 'BOSS APPROACHING',
            bossWarning: '   WARNING!',
            hp: 'HP: {percent}%',
            event: 'RAID',
            rank: 'RANK',
            raid: 'PARTY',
            timerLabel: 'Event ends:',
            raidPack: 'Raid Pack',
            stageInfo1: 'Explore to reveal the Boss!',
            stageInfo2: 'Team up with friends to defeat the Boss!',
            requireGymPopup: {
                label1: 'The next stage is for higher ranked trainers',
                label2: 'Reach Gym {number} to proceed!',
                button: 'LET\'S GO'
            },
            party: {
                title: 'Raid Party',
                subtitle: 'Team up with friends to defeat the Boss!',
                expel: 'EXPEL',
                leave: 'LEAVE'
            },
            partyExpel: {
                confirm: 'Are you sure you want to expel this Raid member?',
                expelled: 'Player expelled from the Raid party'
            },
            partyLeave: {
                confirm: 'Are you sure you want to leave this Raid party?',
                left: 'You left the Raid party'
            },
            join: {
                title: 'Would you like to join this Raid party?',
                subtitle: 'You will lose all progress in the current Raid stage'
            },
            stage: 'Stage {stage}',
            socialInvite: '{inviter} needs your help to defeat {boss} on Stage {number}! ({percent}% HP left)',
            exploreBtn: 'EXPLORE',
            revivePopup: {
                title: 'Oh no! {pokemon} has been hurt!',
                question: 'Watch an ad to continue?',
                cancel: 'LEAVE',
                confirm: 'REVIVE'
            },
            bossRatingInfo: 'Stage {stage}',
            battleScore: 'Score',
            watchAdToBattle: {
                title: 'You need a Raid Pass to battle!',
                question: 'Watch an ad to continue?',
                confirm: 'GO',
                cancel: 'LEAVE'
            },
            rankingTitle: 'Raid Rankings',
            notEnoughPasses: 'Next Raid Pass in: {remainingTime}',
            home: 'GYM',
            caution: 'CAUTION!',
            cautionSubtitle: 'This Raid stage\'s difficulty is not recommended for you\n\nAre you sure you would like to join?',
            defeatBoss: 'Defeat Boss to open',
            totalDamage: 'Total Damage',
            invitePrompt: {
                title: 'You need a Raid Pass to battle!',
                subTitle: 'Recruit additional members to defeat {boss} faster!'
            },
            tutorial: {
                msg1: '[b]Win with your Pokémon to damage the Boss[/b]\n\nIf any of your Pokémon lose, the battle is over. Try to survive as long as you can!'
            },
            invitePopup: {
                title1: 'Invite your friends to play\nPokémon Medallion Battle',
                title2: 'After they install, you get a\nSILVER PACK!',
                title3: 'Guaranteed {value}+ IV'
            },
            rankingPopup: {
                bestScoreButton: 'SCORE',
                totalDamageButton: 'TOTAL DAMAGE'
            }
        },
        raidAnnouncement: {
            header: 'Raid Event',
            message: 'Team up with friends\nto defeat the Boss!',
            reward: 'Raid rewards improve as you\nadvance to higher stages!'
        },
        resultScreen: {
            nextBadge: 'NEXT\nBADGE',
            reward: 'REWARDS',
            watchAd: 'WATCH AD',
            winner: 'Winner!',
            victories: 'Victories',
            liveOppBonus: 'Live Opponent Bonus',
            quickMatchBonus: 'Quick Match Bonus',
            score: 'SCORE',
            totalDamage: 'TOTAL DAMAGE'
        },
        settingScreen: {
            forfeit: 'FORFEIT',
            music: 'Music',
            pokemonPreview: 'Pokémon Preview',
            privacyPolicy: 'PRIVACY POLICY',
            settings: 'Settings',
            soundEffects: 'Sound Effects',
            supportId: 'Support ID:{id}',
            termsOfService: 'TERMS OF SERVICE'
        },
        shopScreen: {
            claimFreePack: 'CLAIM',
            comingSoon: 'COMING\nSOON!',
            medal: {
                item: 'MEDAL'
            },
            medalPack: {
                item: 'MEDAL PACK'
            },
            freePack: {
                item: 'STAR MEDAL'
            },
            adsMedal: {
                item: 'POKÉ MEDAL'
            },
            adMedal: {
                item: 'POKÉ MEDAL'
            },
            gymPack: {
                item: 'POKÉ PACK'
            },
            guaranteed: 'Guaranteed',
            left: 'Left',
            freePackDescription: 'May contain\nStarter Pokémon',
            tapToOpen: 'Tap to Open',
            notReady: 'You have already claimed this Star Medal. The next one will be ready in {h}h {m}m.',
            silverPack: {
                item: 'SILVER PACK'
            },
            guaranteedIv: 'Guaranteed {guaranteedIv}+ IV',
            gameCoin: 'Trade Tokens',
            exchange: {
                title: 'EXCHANGE',
                refresh: 'Refresh in:',
                refreshBtn: 'REFRESH',
                selectToTrade: 'Tap to select Pokémon to trade',
                select: 'Selected',
                require: 'Required',
                trade: 'TRADE',
                list: 'LIST',
                tradeBtn: 'TRADE POKÉMON',
                listBtn: 'LIST POKÉMON',
                cannotAddMore: 'You have already selected enough Pokémon to trade\n\nExcess trade value will be forfeited!',
                averageValue: 'AVERAGE\nLISTING',
                notHaveAnyShiny: 'Sorry, you do not have any Shiny Pokémon',
                confirmDialogTitle: 'Would you like to list this Pokemon for {value}?',
                confirmDialogSubtitle: 'You can remove it from the Exchange at any time'
            }
        },
        sslString: {
            btn_challengeNow: 'Challenge Now',
            challenge: {
                text: '{challengerName} challenges you to a Pokémon Medallion Battle'
            },
            bossDefeated: {
                text: '{player} finished off {boss}! Come collect your rewards!'
            },
            btn_getReward: 'Claim'
        },
        starPack: {
            claim: 'CLAIM',
            cooldown: 'New Star Pack in',
            countdownTime: '{h}h {m}m',
            title: 'Star Pack'
        },
        taskScreen: {
            achievement: 'ACHIEVEMENTS',
            claimedReward: 'Claimed!',
            countdownTime: '{h}h {m}m',
            daily: 'DAILY',
            tapToClaim: 'Tap to\nClaim',
            taskRestartIn: 'Tasks restart in:',
            tasks: 'Tasks'
        },
        tier: {
            tier1: 'Poké Ball',
            tier2: 'Great Ball',
            tier3: 'Ultra Ball'
        },
        type: {
            dragon: 'Dragon',
            electric: 'Lightning',
            fighting: 'Fighting',
            fire: 'Fire',
            grass: 'Grass',
            normal: 'Colorless',
            psychic: 'Psychic',
            water: 'Water'
        },
        raidName: {
            moltres: 'The Molten Monument',
            zapdos: 'The Shuttered Station',
            articuno: 'The Icebound Inlet',
            mewtwo: 'The Lakeside Labyrinth',
            raikou: 'The Thundering Tempest',
            entei: 'The Blazing Balefire',
            suicune: 'The Dismal Downpour',
            deoxys: 'The Insidious Invasion',
            regice: 'The Frozen Fortress',
            regirock: 'The Crumbling Citadel',
            registeel: 'The Steel Stronghold',
            groudon: 'The Primal Portal: Land',
            kyogre: 'The Primal Portal: Sea'
        },
        subscriptionTutorial: {
            title: 'Get Notifications',
            subtitle: 'Never miss out on a thing!',
            caption1: 'Open Pokémon Medallion in the Facebook Gaming app',
            caption2: 'Access the Facebook Game settings',
            caption3: 'Enable messages'
        }
    },
    'resources/strings/id.json': {
        ability: {
            acid: 'Larutan Asam',
            ancientPower: 'Tenaga Purbakala',
            aquaJet: 'Aqua Jet',
            aquaRing: 'Cincin Air',
            aquaTail: 'Ekor Air',
            aromatherapy: 'Aromatherapy',
            auraSphere: 'Bola Aura',
            batonPass: 'Serah Terima',
            bite: 'Menggigit',
            blazeKick: 'Tendangan Api',
            blizzard: 'Badai Salju',
            bonemerang: 'Bumerang Tulang',
            braveBird1: 'Burung Pemberani',
            brickBreak: 'Memecahkan Bata',
            bubble: 'Gelembung',
            bubbleBeam: 'Sinar Gelembung',
            bulletSeed: 'Peluru Biji',
            closeCombat: 'Pertarungan Jarak Dekat',
            confusion: 'Psy Bolt',
            counter: 'Serangan Balik',
            crunch: 'Mengunyah',
            darkestLariat: 'Lariat Maut',
            dig: 'Menggali',
            discharge: 'Pembebasan Energi',
            doubleKick: 'Tendangan Ganda',
            dreamEater: 'Pemakan Mimpi',
            drought: 'Gelombang Panas',
            earthquake: 'Gempa Bumi',
            ember: 'Bara Api',
            eruption: 'Erupsi',
            fireBlast: 'Ledakan Api',
            fireFang: 'Taring Api',
            fireSpin: 'Badai Api',
            flamethrower: 'Semburan Api',
            flameWheel: 'Roda Api',
            flareBlitz2: 'Bombardir Api',
            flareBlitz3: 'Bombardir Api',
            forcePalm: 'Telapak Tenaga Dalam',
            foresight: 'Penglihatan Tajam',
            furyCutter: 'Sabetan Beruntun',
            futureSight: 'Penglihatan Masa',
            guillotine1: 'Memenggal',
            gust: 'Hembusan Angin',
            hammerArm: 'Lengan Palu',
            harden: 'Mengeras',
            healPulse: 'Gelombang Pemulih',
            flameCharge: 'Muatan Api',
            heatCrash2: 'Serangan Panas',
            heatCrash3: 'Serangan Panas',
            hydroCannon: 'Meriam Hidro',
            hydroPump: 'Pompa Air',
            hyperBeam2: 'Sinar Hiper',
            hypnosis: 'Hipnotis',
            iceBeam: 'Sinar Es',
            icePunch: 'Pukulan Es',
            icyWind: 'Angin Dingin',
            karateChop: 'Tebasan Karate',
            lastResort1: 'Jurus Terakhir',
            lavaPlume: 'Debu Lava',
            leafBlade: 'Pisau Daun',
            leafStorm: 'Badai Daun',
            leafTornado: 'Tornado Daun',
            leechSeed: 'Bibit Parasit',
            lick: 'Ciuman Memikat',
            lowSweep: 'Tendangan Rendah',
            luckyChant: 'Mantra Keberuntungan',
            megahorn: 'Tanduk Mega',
            mindReader: 'Membaca Pikiran',
            miracleEye: 'Mata Ajaib',
            mirrorCoat: 'Berlapis Cermin',
            mudBomb: 'Bom Lumpur',
            muddyWater: 'Air Berlumpur',
            mudSlap: 'Tamparan Lumpur',
            mysticalFire: 'Api Mistis',
            odorSleuth: 'Mendeteksi Bau',
            outrage2: 'Mengamuk',
            outrage3: 'Mengamuk',
            overheat: 'Overheat',
            payDay1: 'Hari Bayaran',
            payDay2: 'Hari Bayaran',
            petalBlizzard: 'Badai Bunga',
            petalDance2: 'Tarian Daun Bunga',
            petalDance3: 'Tarian Daun Bunga',
            phantomForce: 'Terpaan Hantu',
            poisonJab: 'Tusukan Beracun',
            poisonSting: 'Jarum Beracun',
            powerWhip: 'Pecutan Kencang',
            protect: 'Proteksi',
            psychic: 'Psikis',
            psywave: 'Gelombang Psikedelik',
            quickAttack: 'Serangan Cepat',
            rainDance: 'Tarian Hujan',
            razorLeaf: 'Pisau Daun',
            razorShell: 'Silet Cangkang',
            rockTomb: 'Batu Kubur',
            rockWrecker: 'Penghancur Batu',
            seedBomb: 'Bom Benih',
            shadowBall: 'Bola Bayangan',
            shadowSneak: 'Serangan Bayangan',
            shellTrap: 'Jebakan Cangkang',
            silverWind: 'Angin Perak',
            sing: 'Menyanyi',
            skyAttack1: 'Serangan Angkasa',
            skyAttack3: 'Serangan Angkasa',
            skyUppercut: 'Pukulan Ke Atas Langit',
            sleepPowder: 'Bubuk Tidur',
            solarBeam: 'Sorotan Surya',
            sparklingAria: 'Aria Gemerlap',
            spikeCannon: 'Meriam Paku',
            spikes: 'Paku Berduri',
            spikyShield: 'Perisai Jarum',
            spore: 'Spora',
            stealthRock: 'Batu Siluman',
            stickyWeb: 'Jaring Perekat',
            submission3: 'Putaran Menyiksa',
            sunnyDay: 'Hari Cerah',
            superpower: 'Kekuatan Super',
            synthesis: 'Sintesis',
            takeDown1: 'Menyeruduk',
            takeDown2: 'Menyeruduk',
            thunder: 'Guntur',
            thunderbolt: 'Ledakan Listrik',
            thunderShock: 'Sengatan Listrik',
            topsyTurvy1: 'Membalik',
            topsyTurvy2: 'Membalik',
            twineedle2: 'Jarum Ganda',
            vineWhip: 'Cambukan',
            voltTackle1: 'Serudukan Listrik',
            voltTackle2: 'Serudukan Listrik',
            waterfall: 'Melawan Arus',
            waterGun: 'Pistol Air',
            waterPulse: 'Gelombang Air',
            waterShuriken: 'Piau Air',
            wish: 'Harapan',
            withdraw: 'Sembunyi',
            woodHammer3: 'Palu Kayu',
            wringOut2: 'Peras Habis',
            wringOut3: 'Peras Habis',
            xScissor: 'Gunting-X',
            yawn: 'Menguap',
            zapCannon: 'Meriam Zap',
            flareBlitz1: 'Bombardir Api',
            airCutter: 'Gunting Udara',
            airSlash: 'Sayatan Udara',
            electricTerrain: 'Medan Listrik',
            lockOn: 'Mengincar Sasaran',
            parabolicCharge1: 'Serangan Parabolik',
            wildCharge1: 'Muatan Listrik Berbahaya',
            psybeam: 'Sinar Psikedelik',
            sludgeBomb: 'Bom Lumpur',
            thunderPunch: 'Pukulan Kilat',
            mudShot: 'Tembakan Lumpur',
            willOWisp: 'Api Hantu',
            spark: 'Percikan',
            thrash1: 'Membabi Buta',
            extremeSpeed: 'Kecepatan Ekstrim',
            nobleRoar2: 'Raungan Mulia',
            acidArmor: 'Meleleh',
            selfDestruct: 'Menghancurkan Diri',
            explosion: 'Meledak',
            psystrike: 'Hantaman Psikis',
            psychoBoost: 'Psycho Boost',
            technoBlast: 'Ledakan Tekno',
            steamEruption: 'Erupsi Uap',
            bulldoze: 'Buldoser',
            spiritShackle: 'Menjahit Bayangan',
            dynamicPunch: 'Pukulan Dinamik',
            bounce: 'Lonjakan',
            sludge: 'Endapan Lumpur',
            absorb: 'Menyerap',
            fieryDance: 'Tarian Berapi-api',
            fireLash: 'Pecut Api',
            painSplit: 'Membagi Rasa Sakit',
            powerGem: 'Permata Tenaga',
            machPunch: 'Pukulan Mach',
            psychoCut: 'Potongan Psycho',
            metronome1: 'Metronome',
            metronome2: 'Metronome',
            moonlight: 'Cahaya Rembulan',
            softBoiled: 'Mengeram Telor',
            crossChop: 'Belahan Silang',
            playRough: 'Main Kasar',
            powerUpPunch: 'Pukulan Penambah Daya',
            rapidSpin: 'Putaran Cepat',
            haze: 'Kabut Hitam',
            nightSlash: 'Sayatan Malam',
            iceShard: 'Beling Es',
            frostBreath: 'Napas Es',
            hex: 'Kutukan',
            agility: 'Gerakan Cepat',
            beatUp1: 'Mengeroyok',
            pressure: 'Tekanan',
            earthPower: 'Kekuatan Bumi',
            present: 'Hadiah',
            psyshock: 'Psyshock',
            grassKnot2: 'Ikatan Rumput',
            grassKnot3: 'Ikatan Rumput',
            moonblast: 'Ledakan Rembulan',
            zenHeadbutt: 'Sundulan Zen',
            ionDeluge: 'Siraman Plasma',
            ironDefense: 'Pertahanan Besi',
            extrasensory: 'Kekuatan Gaib',
            darkPulse: 'Gelombang Kegelapan',
            sacredFire: 'Api Suci',
            shadowPunch: 'Pukulan Bayangan',
            thunderFang: 'Taring Petir',
            poisonFang: 'Taring Beracun',
            crossPoison: 'Racun Silang',
            doubleHit1: 'Serangan Ganda',
            doubleHit2: 'Serangan Ganda',
            dive: 'Menyelam',
            fly: 'Terbang',
            hail: 'Hujan Es',
            rockThrow: 'Lemparan Batu',
            rockSlide: 'Longsoran Batu',
            magnitude2: 'Magnitude',
            acrobatics: 'Akrobatik',
            sandstorm: 'Badai Pasir',
            metalBurst2: 'Ledakan Logam',
            headSmash1: 'Sundulan Kepala',
            headSmash2: 'Sundulan Kepala',
            heavySlam2: 'Bantingan Kuat',
            prehistoricCall: 'Suara Panggilan Purba',
            dragonAscent: 'Naga Terbang',
            auroraBeam: 'Sinar Aurora',
            brine: 'Air Garam',
            energyBall: 'Bola Energi',
            smackDown: 'Tembak Jatuh',
            precipiceBlades: 'Pisau Jurang',
            originPulse: 'Gelombang Alfa',
            glaciate: 'Membekukan',
            bulletPunch2: 'Pukulan Peluru',
            doubleEdge1: 'Serudukan Nekat',
            dracoMeteor: 'Meteor Naga',
            oblivionWing: 'Sayap Maut',
            landsWrath: 'Amarah Bumi',
            geomancy: 'Kendali Geo',
            aerialAce: 'Jagoan Udara',
            lovelyKiss: 'Ciuman Memikat',
            conversion: 'Konversi',
            dragonRush3: 'Serbuan Naga',
            iceFang: 'Taring Es',
            healBell: 'Lonceng Pemulih',
            stoneEdge: 'Batu Runcing',
            slackOff1: 'Mengendur',
            slackOff2: 'Mengendur',
            uproar1: 'Gaduh',
            peck: 'Mematuk',
            magicalLeaf: 'Daun Ajaib',
            disarmingVoice: 'Suara Mempesona',
            freezeDry: 'Membeku Cepat',
            pursuit: 'Mengejar',
            zingZap: 'Listrik Kejut-kejut'
        },
        abilityShortDesc: {
            clearance: 'Menghilangkan kekuatan masuk',
            priority: 'Melawan sebelum kekuatan digunakan',
            protect: 'Terlindungi dari kekalahan',
            reveal: 'Memperlihatkan {value1} Pokémon Cadangan'
        },
        abilityType: {
            clearance: 'Menghilangkan kekuatan Dukungan dan Hazard sebelum efeknya memengaruhi',
            priority: 'Melawan sebelum Pokémon Aktif lawan dapat menggunakan kekuatannya',
            arena: '{value2} Pokémon Aktif memperoleh {value1} CP',
            hazard: '{value2} Pokémon Aktif selanjutnya lawan kamu kehilangan {value1} CP',
            protect: 'Pokémon terlindungi dari kekalahan untuk satu putaran',
            reveal: 'Memperlihatkan {value1} Benched Pokémon lawan',
            se: 'Memperoleh {value1}x CP pada {value2} Pokémon',
            transform: 'Berubah menjadi tiruan Pokémon Aktif terakhir lawanmu',
            wish: '{value2} Pokémon Aktif kamu selanjutnya memperoleh {value1} CP'
        },
        achievement: {
            collected: 'Kumpulkan {targetValue} Pokémon langka',
            evolved: 'Evolusikan {targetValue} Pokémon',
            play: 'Memainkan {targetValue} Pertarungan Gym',
            sentToLab: 'Mengirim {targetValue} Pokémon ke Lab',
            win: 'Memenangkan {targetValue} Pertarungan Gym'
        },
        adHouse: {
            0: {
                text1: 'Kirim Pokémon ke Lab untuk mendapatkan Permen',
                text2: 'Gunakan Permen untuk mengevolusi Pokémon!'
            },
            1: {
                text1: 'Tampilkan Pokémon Pengganti!',
                text2: 'Ingat : Pokémon diurutkan dari kiri ke kanan berdasarkan CP!'
            },
            2: {
                text1: 'Lindungi Pokémon-mu dari bahaya',
                text2: 'Ubah agar kekuatan lawan tidak berbahaya!'
            },
            3: {
                text1: 'Prioritas membuatmu dapat segera bertarung',
                text2: 'Kalahkan Pokémon sebelum menggunakan kekutannya!'
            },
            4: {
                text1: 'Lonjakkan kekuatan Pokémon di Arena!',
                text2: 'Hanya satu Arena yang dapat diberi efek dalam satu waktu'
            },
            5: {
                text1: 'Hazard masuk melukai Pokémon',
                text2: 'Dukungan Masuk menyembuhkan Pokémon'
            },
            6: {
                text1: 'Hapus Hazard dan Dukungan Masuk!',
                text2: 'Terjadi sebelum efek kekuatan masuk muncul'
            }
        },
        arenaScreen: {
            effectsCanceled: '{arena1} dan {arena2}\nsaling membatalkan!'
        },
        badge: {
            1: 'PELATIH',
            2: 'RUMPUT',
            3: 'API',
            4: 'AIR',
            5: 'ELEKTRIK',
            6: 'LAWAN',
            7: 'PSIKIK',
            8: 'NAGA',
            9: 'JUNGLE',
            10: 'GEYSER',
            11: 'PERI'
        },
        badgeHistoryScreen: {
            badges: 'Lencana'
        },
        badgeTitle: {
            1: 'Pelatih',
            2: 'Rumput',
            3: 'Api',
            4: 'Air',
            5: 'Listrik',
            6: 'Bertempur',
            7: 'Psikis',
            8: 'Naga',
            9: 'Jungle',
            10: 'Geyser',
            11: 'Peri'
        },
        badgeUnlock: {
            available: 'SEKARANG TERSEDIA',
            gotBadge: 'KAMU MENDAPATKAN LENCANA {type}!',
            unlock: 'GYM {number} TELAH DIBUKA!'
        },
        bagScreen: {
            cannotBeUndone: 'Ini tidak dapat dibatalkan.',
            cannotEvolveEquipped: 'Pokémon berada dalam sebuah tim dan tidak dapat dievolusikan.',
            editTeam: 'EDIT TIM',
            editTeamConfirmButton: 'SELESAI',
            error: {
                leaveConfirm: 'Kamu yakin ingin keluar?',
                noDupeFamily: 'Kamu hanya dapat menggunakan satu Pokémon dari keluarga {family} pada waktu yang sama!',
                teamFull: 'Tim kamu sudah penuh!',
                teamateLimit: 'Kamu hanya dapat menggunakan dua Pokémon {type}!',
                unableToSave: 'Tidak dapat menyimpan tim'
            },
            evolutionConfirm: 'Kamu yakin ingin\nmengevolusi {pokemonName}?',
            evolveButton: 'EVOLUSI',
            evolvesFrom: 'Evolusi dari {evolutionName}',
            filterModeTab: 'INFO',
            get: 'Klaim',
            information: 'INFORMASI',
            selectPokemonFirst: 'Pilih medali yang akan dikirim ke lab',
            sellPokemonBatchLimit: 'Kamu tidak dapat mengirim lebih dari {max} Pokémon ke Lab dalam satu waktu',
            sellPokemonInTeam: 'Pokémon berada dalam sebuah tim dan tidak dapat dikirim ke Lab',
            send: 'Kirim',
            sendConfirmation1: 'Kirim {pokemonCount} Pokémon ke Lab untuk {candiesSum}?',
            sendDisclaimer: 'Kirim Pokémon ke Lab?',
            sendSuccesfull: 'Kamu telah mengirim {pokemonCount} Pokémon ke Lab untuk {candiesSum}',
            sendToLab: 'KIRIM KE LAB',
            sendToLabConfirmButton: 'BATAL',
            topForMoreInfo: 'Sentuh Pokémon untuk periksa info dan evolusi!',
            warning: {
                evolveEquipped: 'Mengevolusi Pokémon ini akan menghapusnya dari tim kamu!',
                evolveEquippedQuestion: 'Kamu yakin ingin mengevolusi?',
                teamNotReady1: 'Maaf, tim ini tidak valid!',
                teamNotReady2: 'Selesaikan mengeditnya'
            },
            expand: 'Tampilkan isi Ransel-mu?',
            expandSucccess: 'Ransel berhasil diluaskan menjadi {slot} slot'
        },
        callout: {
            opponentTurn: 'GILIRAN LAWAN',
            yourTurn: 'GILIRANMU!'
        },
        challenge: {
            challengeBrag3: '{opponent} kalah telak oleh {challenger}!',
            challengeBrag2: '{challenger} menghancur leburkan {opponent}!',
            challengeBrag1: 'Hampir saja, tetapi {challenger} mengalahkan {opponent}!',
            challengeBrag0: '{challenger} dan {opponent} bertarung sengit!'
        },
        challengeReferralPrompt: {
            header: 'Luar biasa! Memenangkan pertarungan Gym!',
            text: 'Tapi, bisakah kamu mengalahkan temanmu?',
            button: 'Ya, aku bisa!'
        },
        challengeScreen: {
            title: 'Duel',
            subTitle: 'Tantang temanmu dan dapatkan hadiah!',
            battle: 'PERTANDINGAN',
            quickMatch: 'QUICK MATCH',
            invite: 'UNDANG',
            waitFor: 'Menunggu respons...',
            notFoundUser: 'Kami tidak menemukan teman yang memainkan Pokémon Medallion Battle!',
            joinChallengeRequestHanging: 'Tidak dapat terhubung dengan teman',
            waitForPlayer: 'Menunggu pemain untuk merespons...',
            switchAiTitle: 'Memulai permainan',
            switchAiText: 'Tunggu...',
            noDoubleChallenge: 'Kamu tidak boleh menantang pemain yang sama dua kali berturut-turut',
            skipBtn: 'LEWATI',
            loadingFriends: 'Memuat teman...',
            alreadyPlayed1: 'Kamu sudah menantang pemain ini',
            alreadyPlayed2: 'Tantang pemain lain untuk mendapatkan poin!'
        },
        chatbot: {
            btn_play: 'Main Sekarang',
            btn_challengeNow: 'Tantang Sekarang',
            btn_claimNCandies: 'Klaim {amount} Permen',
            desciptionLine1: 'Nyalakan pengingat dan',
            desciptionLine2: 'DAPATKAN FARFETCH\'D',
            message: 'Pokémon Medallion\nmungkin mengirimmu pengumuman, tips\ndan banyak lagi. Kamu bisa mematikan\npercakapan\npesan dalam permainan.',
            messageHeader: 'Nyalakan Pesan Dari\nPokémon Medallion',
            notNow: 'tidak sekarang',
            reminders: 'Pengingat',
            thankYou: 'Terima kasih sudah bermain. Segera kembali!',
            turnOn: 'nyalakan',
            claimFreePack: 'Klaim',
            freePackRemider: 'Star Medal gratismu sudah siap!',
            '24hReminder': 'Berevolusi untuk mendapatkan Pokémon yang lebih kuat, kami bayar!',
            '30hReminder': 'Selamat datang kembali! Pertarungan menarik menantimu!',
            '36hReminder': '{player}, lama tak bertemu! Ayo kembali dan bermain bersama kami!',
            '38hReminder': '{player}, Farfetch\'d sudah ada!',
            '46hReminder': 'Paket Bintang berisi Pokémon langka. Coba keberuntunganmu!'
        },
        common: {
            fatal: 'Kesalahan fatal: {error}',
            tapToContinue: 'Sentuh untuk melanjutkan',
            alreadyInvited: 'Kamu sudah mengundang pemain ini'
        },
        daily: {
            coinSpent: 'Gunakan {targetValue} PokéCoin',
            evolved: 'Evolusikan {targetValue} Pokémon',
            play: 'Mainkan Pertarungan Gym {targetValue}',
            sentToLab: 'Mengirim {targetValue} Pokémon ke Lab',
            win: 'Menangkan {targetValue} Pertarungan Gym'
        },
        error: {
            candyOverflowWarning: 'Kamu akan melampaui batas Candy jika kamu melakukan tindakan ini!',
            coinOverflowWarning: 'Kamu akan melampaui batas PokéCoin jika kamu melakukan tindakan ini!',
            noAdSupport: 'Maaf, perangkat ini tidak mendukung iklan',
            noOpponent: 'Tidak dapat menemukan lawan. Coba lagi nanti.',
            reconnectGiveUp: 'Koneksi permainan terputus, muat ulang',
            unableToConnect: 'Tidak dapat menjangkau server',
            disconnectedInFight: 'Koneksimu terputus',
            unableToLoadAd: 'Iklan tidak tersedia. Coba lagi nanti.',
            noSpaceInBag: 'Tidak cukup ruang di Tas-mu!\nKirim Pokémon ke Lab untuk menambah ruang',
            notEnoughcandy: 'Tidak cukup Candy!\nKirim Pokémon ke Lab untuk mendapatkan lebih banyak',
            notEnoughcoin: 'PokéCoin tidak cukup! Menangkan pertarungan untuk mendapatkan lebih banyak',
            invalidTeam: 'Maaf, tim ini tidak valid! Selesaikan mengeditnya.',
            raidClosed: 'Serangan kedaluwarsa\n\nTunggu petualangan selanjutnya!',
            raidClosedDetailed: 'Serangan kedaluwarsa\n\nKembali dalam {h}j {m}m untuk petualangan selanjutnya!',
            raidFull: 'Maaf, kelompok Serang ini sudah penuh',
            joinRaidCooldownError: 'Jangan terburu-buru, kamu terlalu cepat bergabung dalam kelompok Serangan!\n\nCoba lagi dalam {hours}j {minutes}m'
        },
        flag: {
            legendary: 'Legendaris'
        },
        ftue: {
            addToTeam: 'Tambahkan {pokemon} ke tim sebelum memulai pertarungan lain.',
            battle2: 'Coba {pokemon} untuk bertarung!',
            claimReward: 'Klaim hadiah Tugas sebelum memulai pertarungan lain.',
            evolve: 'Evolusikan Pokémon untuk meningkatkan CP dan berlatih kekuatan!\n\nKetuk untuk membuka Ransel.',
            howEvolve: 'Evolusi membutuhkan Permen.\n\nDapatkan Permen dengan mengirim Pokémon ke Lab.',
            letsBattle: '[b]Selamat datang di\nPokémon Medallion Battle![/b]\n\nMenangkan [b]3[/b] pertarungan untuk menjadi juara!',
            opponentName: 'Rival',
            playpk1: '[b]Ayo main {pokemon}[/b]\n\nPokémon dengan kemenangan CP lebih tinggi',
            playpk2: '[b]Kamu memainkan pertama setelah menang. Kirim {pokemon}![/b]',
            playpk3: '[b]Pilih {pokemon}[/b]\n\nBeberapa Pokémon memiliki Power\nSentuh mereka untuk mempelajari selengkapnya',
            playStarter: '[b]Selesaikan dengan {pokemon}![/b]\n\nSuper Efektif meningkatkan CP pada tipe Pokémon.',
            playStarter2: '[b]Selesaikan dengan {pokemon}![/b]',
            superEffective: 'Kekuatan {ability} {pokemon} meningkatkan CP terhadap Pokémon {type}',
            protect: 'Tenaga Metapod {ability} melindunginya agar tidak kalah!',
            tryPokemon: 'Berikan {pokemon} kesempatan.\n\nKetuk BERTARUNG untuk memulai pertandingan.',
            removeMedalFromTeam: 'Hapus satu Pokémon dari tim-mu untuk memasukkan {pokemon}',
            addMedalToTeam: 'Ketuk {pokemon} untuk menambahkannya ke tim-mu',
            completeTeam: 'Lengkapi tim-mu dengan mengetuk Pokémon yang belum dipilih'
        },
        gachaScreen: {
            note: 'Capai Gym selanjutnya untuk membuka Pokémon baru!',
            noteStarPack: 'Buka Star Pack untuk mengumpulkan\nsemua Starter!'
        },
        general: {
            cancel: 'Batal',
            close: 'Tutup',
            countdownDHTime: '{d}h {h}j',
            countdownHMTime: '{h}j {m}m',
            countdownMSTime: '{m}m {s}d',
            done: 'Selesai',
            doneExclamation: 'Selesai!',
            errorHappened: 'Terjadi kesalahan\n{error}',
            get: 'KLAIM',
            go: 'MULAI',
            leave: 'Keluar',
            noButton: 'TIDAK',
            off: 'MATI',
            ok: 'OK',
            on: 'HIDUP',
            proceed: 'Memproses',
            revert: 'Pulihkan',
            stay: 'Tinggal',
            team: 'Tim',
            yesButton: 'YA',
            score: 'Skor',
            idle: 'Diam'
        },
        gifts: {
            dailyLimit: 'Terima kasih, tapi kamu telah membantu 3/3 kali hari ini. Periksa kembali besok!',
            expired: 'Maaf, permintaan ini sudah tidak berlaku. Mungkin yang lainnya membutuhkan bantuan.',
            sourceLimit: 'Kamu telah mengklaim hadiah dari pemain ini hari ini\nPeriksa lagi besok.',
            gotItem: 'Kamu mendapat {item} dari {friend}!',
            help: {
                candy: 'Bantu Mimikyu berteman menggunakan Permen',
                coins: 'Bantu Meowth mengembalikan koin yang dia "pinjam"',
                starMedal: 'Bantu Eevee temukan pelatih untuk telur ini'
            },
            header: 'Beri temanmu hadiah Pokémon!',
            sendAll: 'KIRIM SEMUA',
            send: 'KIRIM',
            sendItem: 'Kirim {item} ke teman!',
            title: 'Hadiah',
            yourRequest: 'Maaf, ini permintaan kamu. Mungkin yang lainnya membutuhkan bantuan.',
            gotItemInMailbox: '{item} disimpan di Kotak Suratmu.\nKamu membalasnya dengan {giftBack} dan sebuah hadiah!',
            gotItemAndGiftSend: 'Kamu mendapatkan {item}\nKamu membalasnya dengan {giftBack} dan sebuah hadiah!',
            gotItemAndGiftRespond: 'Kamu mendapatkan {item}\nKamu membalasnya dengan {giftBack}!'
        },
        gym: {
            1: 'Trainer Town',
            2: 'Greenwood Grove',
            3: 'Scorchfire Summit',
            4: 'Clearwater Coast',
            5: 'Power Plant',
            6: 'Dustrock Dojo',
            7: 'Shadowmoss Shrine',
            8: 'Dragon\'s Den',
            9: 'Silverglade Safari',
            10: 'Mistwreath Mountains',
            11: 'Mooncrest Meadow',
            final: 'Piala Kejuaraan',
            title: 'Gym {gymId}:'
        },
        landingScreen: {
            battle: 'PERTANDINGAN',
            inviteBtn: 'UNDANG',
            nextBadge: 'Gym Selanjutnya',
            team: 'TIM',
            challengeBtn: 'DUEL',
            rating: 'Rating:',
            rank: 'Peringkat:'
        },
        leaderboard: {
            cannotLoad: 'Gagal menampilkan papan peringkat',
            requesting: 'Meminta papan peringkat…',
            seasonNumber: 'Peringkat Season {number}'
        },
        mailbox: {
            emptyMailboxMessage: 'Kotak Suratmu Kosong',
            button: {
                claim: 'KLAIM',
                read: 'BACA'
            },
            expiration: 'Berakhir pada {h}j {m}m',
            expired: 'Kedaluwarsa',
            referralBonus: {
                title: 'Terima kasih!',
                body: 'Dapatkan {number}{coinSymbol} tiap kali temanmu mengklaim hadiah!'
            },
            csGift: {
                title: 'Dukungan',
                body: 'Dari tim Pokémon Medallion Battle',
                default: {
                    title: 'Dukungan',
                    body: 'Dari tim Pokémon Medallion Battle'
                },
                sorry: {
                    title: 'Maaf!',
                    body: 'Kompensasi untuk kesalahan teknis'
                }
            },
            gift: {
                title: 'Hadiah',
                body: 'Temanmu mengirim hadiah untukmu'
            },
            raidReward: {
                title: 'Paket Serangan - Tahap {stage}',
                body: 'Reward untuk keberhasilanmu membantu mengalahkan {bossName}!'
            },
            raidHighScore: {
                title: 'Papan Skor - Tahap {stage}',
                body: 'Reward untuk keberhasilanmu meraih skor tertinggi ke #{rank}!'
            },
            raidAnnouncement: {
                title: 'Acara Serangan - {raidName}',
                body: '{bossName} telah ditemukan! Bergabung untuk mengalahkannya!'
            },
            referralSilverPack: {
                title: 'Terima kasih!',
                body: 'Reward untuk merekrut teman'
            },
            subscriptionTutorial: {
                title: 'Dapatkan Notifikasi',
                body: 'Jangan sampai ketinggalan informasi!'
            },
            raidTotalDamage: {
                title: 'Papan Skor - Tahap {stage}',
                body: 'Kamu mendapatkan {amount}x {rewardIcon} karena selesai di urutan #{rank}!'
            },
            lbReward: {
                global: {
                    title: 'Peringkat Dunia',
                    body: 'Reward untuk keberhasilanmu masuk peringkat #{rank} global!'
                },
                region: {
                    title: 'Peringkat Negara',
                    body: 'Reward untuk keberhasilanmu masuk peringkat #{rank} negara!'
                }
            }
        },
        maintenance: {
            details: 'Maaf, kami sedang melakukan\npemeliharaan.',
            title: 'Segera kembali!'
        },
        navBar: {
            bag: 'TAS',
            battle: 'PERTANDINGAN',
            challenge: 'DUEL',
            mail: 'SURAT',
            pokedex: 'POKÉDEX',
            shop: 'TOKO'
        },
        noFriendReferralPrompt: {
            button: 'OK',
            header1: 'Pokémon Medallion lebih mengasyikkan bersama teman!',
            text1: 'Undang mereka untuk bermain denganmu',
            text2: 'Tantang temanmu untuk Duel dan menangkan dengan Pikachu yang langka!'
        },
        notification: {
            defaultPlay: {
                btn: 'Main Sekarang'
            },
            defaultClaim: {
                btn: 'Klaim'
            },
            gift_candy: {
                btn: 'Klaim {count} Permen',
                text: 'Mimikyu punya Permen untukmu. Mau jadi temannya?'
            },
            gift_coins: {
                btn: 'Klaim {count} PokéCoin',
                text: 'Meowth punya beberapa PokéCoin milikmu...'
            },
            gift_starMedal: {
                btn: 'Klaim Medali',
                text: '{friend} punya hadiah untukmu!'
            },
            gift_reward: {
                text: '{friend} says thanks with a gift!'
            },
            simpleThanks: {
                btn: 'Main Sekarang',
                text: 'Terima kasih sudah bermain. Segera kembali!'
            },
            shareMedal: {
                btn: 'Main Sekarang',
                text: 'Lihat {pokemon} milikku!'
            },
            whichStarter: {
                text: 'Apa Pokémon Starter kamu?'
            },
            win: {
                text: '{myPokemon} {playerFirstName} mengalahkan {opposingPokemon}!'
            },
            winBy1: {
                text: 'Hampir saja, tetapi {attacker} mengalahkan {defender}!'
            },
            winBy2: {
                text: '{pokemon} {attacker} mengalahkan {defenderPokemon}!'
            },
            winBy3: {
                text: '{defender} kalah telak oleh {attacker}!'
            },
            lose: {
                text: '{defender} berhasil menangkis {attacker} dengan {defenderPokemon}!'
            },
            challenge: {
                text: '{challengerName} menantangmu untuk Pokémon Medallion Battle'
            },
            shareBadge: {
                text: 'Ahirnya, aku mendapatkan Lencana {badge}!'
            },
            sharePack: {
                text: 'Wow! Lihat hasil tangkapanku!'
            }
        },
        pokedexEntry: {
            evolvesInto: 'Berevolusi ke {evolutionName}',
            finalEvolution: 'Evolusi Akhir',
            height: 'Tinggi',
            moreInfo: 'Kumpulkan untuk Mempelajarinya',
            pokemonIllustrator: 'Ilustrator: {illustrator}',
            unknownValue: '???',
            weight: 'Berat'
        },
        pokemon: {
            alomomola: 'Alomomola',
            ariados: 'Ariados',
            articuno: 'Articuno',
            bayleef: 'Bayleef',
            beedrill: 'Beedrill',
            bellossom: 'Bellossom',
            blastoise: 'Blastoise',
            blaziken: 'Blaziken',
            blitzle: 'Blitzle',
            braixen: 'Braixen',
            brionne: 'Brionne',
            bulbasaur: 'Bulbasaur',
            bunnelby: 'Bunnelby',
            butterfree: 'Butterfree',
            camerupt: 'Camerupt',
            carbink: 'Carbink',
            caterpie: 'Caterpie',
            celebi: 'Celebi',
            charizard: 'Charizard',
            charmander: 'Charmander',
            charmeleon: 'Charmeleon',
            chesnaught: 'Chesnaught',
            chespin: 'Chespin',
            chikorita: 'Chikorita',
            chimchar: 'Chimchar',
            cloyster: 'Cloyster',
            combusken: 'combusken',
            corsola: 'Corsola',
            croagunk: 'Croagunk',
            crobat: 'Crobat',
            croconaw: 'Croconaw',
            cubone: 'Cubone',
            cyndaquil: 'Cyndaquil',
            dartrix: 'Dartrix',
            decidueye: 'Decidueye',
            dedenne: 'Dedenne',
            delibird: 'Delibird',
            delphox: 'Delphox',
            deoxys: 'Deoxys',
            dewott: 'Dewott',
            diggersby: 'Diggersby',
            ditto: 'Ditto',
            donphan: 'Donphan',
            dragonair: 'Dragonair',
            dragonite: 'Dragonite',
            dratini: 'Dratini',
            ducklett: 'Ducklett',
            duosion: 'Duosion',
            eevee: 'Eevee',
            electabuzz: 'Electabuzz',
            electivire: 'Electivire',
            electrike: 'Electrike',
            elekid: 'Elekid',
            emboar: 'Emboar',
            empoleon: 'Empoleon',
            exeggcute: 'Exeggcute',
            exeggutor: 'Exeggutor',
            farfetchd: 'Farfetch\'d',
            fearow: 'Fearow',
            feebas: 'Feebas',
            fennekin: 'Fennekin',
            feraligatr: 'Feraligatr',
            flareon: 'Flareon',
            fletchinder: 'Fletchinder',
            fletchling: 'Fletchling',
            froakie: 'Froakie',
            frogadier: 'Frogadier',
            froslass: 'Froslass',
            gastly: 'Gastly',
            genesect: 'Genesect',
            gengar: 'Gengar',
            glalie: 'Glalie',
            gloom: 'Gloom',
            golbat: 'Golbat',
            golduck: 'Golduck',
            greninja: 'Greninja',
            grimer: 'Grimer',
            grotle: 'Grotle',
            grovyle: 'Grovyle',
            gyarados: 'Gyarados',
            haunter: 'Hantu',
            heatmor: 'Heatmor',
            heliolisk: 'Heliolisk',
            helioptile: 'Helioptile',
            heracross: 'Heracross',
            'ho-oh': 'Ho-oh',
            hoppip: 'Hoppip',
            horsea: 'Horsea',
            incineroar: 'Incineroar',
            infernape: 'Infernape',
            inkay: 'Inkay',
            ivysaur: 'Ivysaur',
            jolteon: 'Jolteon',
            jumpluff: 'Jumpluff',
            jynx: 'Jynx',
            kakuna: 'Kakuna',
            kingdra: 'Kingdra',
            kricketot: 'Kricketot',
            kricketune: 'Kricketune',
            kyurem: 'Kyurem',
            lapras: 'Lapras',
            larvesta: 'Larvesta',
            litleo: 'Litleo',
            litten: 'Litten',
            lucario: 'Lucario',
            lugia: 'Lugia',
            lunatone: 'Lunatone',
            machamp: 'Machamp',
            machoke: 'Machoke',
            machop: 'Machop',
            magcargo: 'Magcargo',
            magikarp: 'Magikarp',
            magmar: 'Magmar',
            magnemite: 'Magnemite',
            magneton: 'Magneton',
            magnezone: 'Magnezone',
            malamar: 'Malamar',
            manectric: 'Manectric',
            maractus: 'Maractus',
            marowak: 'Marowak',
            marshtomp: 'Marshtomp',
            meganium: 'Meganium',
            meowth: 'Meowth',
            metapod: 'Metapod',
            mew: 'Mew',
            mewtwo: 'Mewtwo',
            milotic: 'Milotic',
            mimikyu: 'Mimikyu',
            moltres: 'Moltres',
            monferno: 'Monferno',
            morelull: 'Morelull',
            mudkip: 'Mudkip',
            muk: 'Muk',
            natu: 'Natu',
            ninetales: 'Ninetales',
            numel: 'Numel',
            oddish: 'Oddish',
            onix: 'Onix',
            oshawott: 'Oshawott',
            paras: 'Paras',
            parasect: 'Parasect',
            persian: 'Persian',
            phanpy: 'Phanpy',
            pichu: 'Pichu',
            pidgeot: 'Pidgeot',
            pidgeotto: 'Pidgeotto',
            pidgey: 'Pidgey',
            pignite: 'Pignite',
            pikachu: 'Pikachu',
            pinsir: 'Pinsir',
            piplup: 'Piplup',
            politoed: 'Poliwrath',
            poliwag: 'Poliwag',
            poliwhirl: 'Poliwhirl',
            poliwrath: 'Politoed',
            ponyta: 'Ponyta',
            popplio: 'Popplio',
            primarina: 'Primarina',
            prinplup: 'Prinplup',
            psyduck: 'Psyduck',
            pyroar: 'Pyroar',
            quagsire: 'Quagsire',
            quilava: 'Quilava',
            quilladin: 'Quilladin',
            raichu: 'Raichu',
            rapidash: 'Rapidash',
            reuniclus: 'Reuniclus',
            rhydon: 'Rhydon',
            rhyhorn: 'Rhyhorn',
            rhyperior: 'Rhyperior',
            riolu: 'Riolu',
            rowlet: 'Rowlet',
            salandit: 'Salandit',
            salazzle: 'Salazzle',
            samurott: 'Samurott',
            sceptile: 'Sceptile',
            seadra: 'Seadra',
            serperior: 'Serperior',
            servine: 'Servine',
            shellder: 'Shellder',
            shiinotic: 'Shiinotic',
            shuckle: 'Shuckle',
            skiploom: 'Skiploom',
            slowbro: 'Slowbro',
            slowking: 'Slowking',
            slowpoke: 'Slowpoke',
            slugma: 'Slugma',
            snivy: 'Snivy',
            snorlax: 'Snorlax',
            snorunt: 'Snorunt',
            solosis: 'Solosis',
            solrock: 'Solrock',
            spearow: 'Spearow',
            spinarak: 'Spinarak',
            squirtle: 'Squirtle',
            stunfisk: 'Stunfisk',
            swampert: 'Swampert',
            swanna: 'Swanna',
            talonflame: 'Talonflame',
            tepig: 'Tepig',
            torchic: 'Torchic',
            torracat: 'Torracat',
            torterra: 'Torterra',
            totodile: 'Totodile',
            toxicroak: 'Toxicroak',
            treecko: 'Treecko',
            tropius: 'Tropius',
            turtonator: 'Turtonator',
            turtwig: 'Turtwig',
            typhlosion: 'Typhlosion',
            vaporeon: 'Vaporeon',
            venusaur: 'Venusaur',
            vileplume: 'Vileplume',
            volcanion: 'Volcanion',
            volcarona: 'Volcarona',
            vulpix: 'Vulpix',
            wailmer: 'Wailmer',
            wailord: 'Wailord',
            wartortle: 'Wartortle',
            weedle: 'Weedle',
            wishiwashi: 'Wishiwashi',
            wobbuffet: 'Wobbuffet',
            wooper: 'Wooper',
            wynaut: 'Wynaut',
            xatu: 'Xatu',
            zapdos: 'Zapdos',
            zebstrika: 'Zebstrika',
            zubat: 'Zubat',
            raikou: 'Raikou',
            entei: 'Entei',
            suicune: 'Suicune',
            houndour: 'Houndour',
            houndoom: 'Houndoom',
            teddiursa: 'Teddiursa',
            ursaring: 'Ursaring',
            mareep: 'Mareep',
            flaaffy: 'Flaaffy',
            ampharos: 'Ampharos',
            misdreavus: 'Misdreavus',
            mismagius: 'Mismagius',
            skarmory: 'Skarmory',
            larvitar: 'Larvitar',
            pupitar: 'Pupitar',
            tyranitar: 'Tyranitar',
            gligar: 'Gligar',
            gliscor: 'Gliscor',
            sneasel: 'Sneasel',
            weavile: 'Weavile',
            azurill: 'Azurill',
            marill: 'Marill',
            azumarill: 'Azumarill',
            bronzor: 'Bronzor',
            bronzong: 'Bronzong',
            steelix: 'Steelix',
            growlithe: 'Growlithe',
            arcanine: 'Arcanine',
            pineco: 'Pineco',
            forretress: 'Forretress',
            togedemaru: 'Togedemaru',
            shroomish: 'Shroomish',
            breloom: 'Breloom',
            happiny: 'Happiny',
            chansey: 'Chansey',
            ralts: 'Ralts',
            kirlia: 'Kirlia',
            gallade: 'Gallade',
            gardevoir: 'Gardevoir',
            cleffa: 'Cleffa',
            clefairy: 'Clefairy',
            clefable: 'Clefable',
            wingull: 'Wingull',
            pelipper: 'Pelipper',
            lotad: 'Lotad',
            lombre: 'Lombre',
            ludicolo: 'Ludicolo',
            meditite: 'Meditite',
            medicham: 'Medicham',
            beldum: 'Beldum',
            metang: 'Metang',
            metagross: 'Metagross',
            baltoy: 'Baltoy',
            claydol: 'Claydol',
            sableye: 'Sableye',
            duskull: 'Duskull',
            dusclops: 'Dusclops',
            dusknoir: 'Dusknoir',
            jirachi: 'Jirachi',
            aipom: 'Aipom',
            ambipom: 'Ambipom',
            slakoth: 'Slakoth',
            vigoroth: 'Vigoroth',
            slaking: 'Slaking',
            torkoal: 'Torkoal',
            staryu: 'Staryu',
            starmie: 'Starmie',
            regice: 'Regice',
            geodude: 'Geodude',
            graveler: 'Graveler',
            golem: 'Golem',
            regirock: 'Regirock',
            aron: 'Aron',
            lairon: 'Lairon',
            aggron: 'Aggron',
            porygon: 'Porygon',
            porygon2: 'Porygon2',
            porygonz: 'Porygon-Z',
            registeel: 'Registeel',
            cranidos: 'Cranidos',
            rampardos: 'Rampardos',
            shieldon: 'Shieldon',
            bastiodon: 'Bastiodon',
            tyrunt: 'Tyrunt',
            tyrantrum: 'Tyrantrum',
            groudon: 'Groudon',
            rayquaza: 'Rayquaza',
            aerodactyl: 'Aerodactyl',
            omanyte: 'Omanyte',
            omastar: 'Omastar',
            tirtouga: 'Tirtouga',
            carracosta: 'Carracosta',
            carvanha: 'Carvanha',
            sharpedo: 'Sharpedo',
            kyogre: 'Kyogre',
            lileep: 'Lileep',
            cradily: 'Cradily',
            anorith: 'Anorith',
            armaldo: 'Armaldo',
            scyther: 'Scyther',
            scizor: 'Scizor',
            xerneas: 'Xerneas',
            swablu: 'Swablu',
            altaria: 'Altaria',
            togepi: 'Togepi',
            togetic: 'Togetic',
            togekiss: 'Togekiss',
            bagon: 'Bagon',
            shelgon: 'Shelgon',
            salamence: 'Salamence',
            yveltal: 'Yveltal',
            kabuto: 'Kabuto',
            kabutops: 'Kabutops',
            archen: 'Archen',
            archeops: 'Archeops',
            gible: 'Gible',
            gabite: 'Gabite',
            garchomp: 'Garchomp',
            zygarde: 'Zygarde',
            amaura: 'Amaura',
            aurorus: 'Aurorus'
        },
        popin: {
            socialGiftPromptHigh: {
                text: 'Beri temanmu hadiah Pokémon!',
                cta: 'OK'
            },
            challengePrompt: {
                text: 'Luar biasa! Memenangkan pertarungan Gym!',
                text2: 'Tapi, bisakah kamu mengalahkan temanmu?',
                cta: 'Ya, aku bisa!'
            },
            challengeInvite: {
                text: 'Berduel dengan temanmu dan kamu bisa mendapatkan {pokemon} langka!',
                cta: 'OK'
            }
        },
        quiz: {
            playNow: 'Ayo Main!',
            share: 'BAGIKAN',
            shareMsg: 'seperti {nature}',
            playerIs: '{player} adalah',
            tap: 'Sentuh untuk cari tahu!',
            tryAgain: 'COBA LAGI',
            whichStarter: 'Apa Pokémon Starter kamu?',
            yourPersonality: '{player},\nkepribadian {nature} kamu cocok'
        },
        quizResult: {
            bulbasaur: 'Lembut',
            charmander: 'Lancang',
            chespin: 'Santai',
            chikorita: 'Jujur',
            chimchar: 'Badung',
            cyndaquil: 'Penakut',
            fennekin: 'Keras Kepala',
            froakie: 'Cermat',
            litten: 'Penyendiri',
            mudkip: 'Semau Sendiri',
            oshawott: 'Nakal',
            piplup: 'Sederhana',
            popplio: 'Lembut',
            rowlet: 'Pekerja Keras',
            snivy: 'Serius',
            squirtle: 'Tidak Tahu Malu',
            tepig: 'Gegabah',
            torchic: 'Berani',
            totodile: 'Gembira',
            treecko: 'Tenang',
            turtwig: 'Pemalu'
        },
        quizShare: {
            bulbasaur: '• Lembut\n• Dapat diandalkan\n• Praktis\n• Selalu mau membantu',
            charmander: '• Lancang\n• Optimistik\n• Berkemauan tinggi\n• Tidak membiarkan apa pun menghalangi kemenangan',
            chespin: '• Santai\n• Toleran\n• Karismatik\n• Sangat santai, tapi mengerikan kalau dia marah!',
            chikorita: '• Jujur\n• Sensitif\n• Protektif\n• Mudah dipercaya, ramah, dan perhatian',
            chimchar: '• Badung\n• Kreatif\n• Antusias\n• Si penghidup suasana!',
            cyndaquil: '• Penakut\n• Disegani\n• Memiliki tenggang rasa\n• Lebih suka berdiam diri di rumah dengan teman dekat',
            fennekin: '• Keras Kepala\n• Baik\n• Loyal\n• Kukuh dan setia kawan',
            froakie: '• Cermat\n• Intuitif\n• Banyak akal\n• Memiliki kemampuan hebat mengubah kekalahan menjadi kemenangan',
            litten: '• Penyendiri\n• Berprinsip\n• Dapat dipercaya\n• Berpegang pada satu keyakinan di mana pun berada',
            mudkip: '• Semau Sendiri\n• Pekerja keras\n• Cerdik\n• Selalu penuh ide dan sibuk!',
            oshawott: '• Nakal\n• Menawan\n• Pengutak-atik\n• Memikat hati dengan senyum menggoda',
            piplup: '• Sederhana\n• Tidak egois\n• Suportif\n• Pendengar terbaik yang pernah ada',
            popplio: '• Lembut\n• Visioner\n• Artistik\n• Percaya bahwa diri sendiri penentu nasib',
            rowlet: '• Pekerja Keras\n• Inovatif\n• Logis\n• Pemecah masalah yang selalu punya rencana',
            snivy: '• Serius\n• Elegan\n• Jujur\n• Tidak suka diremehkan',
            squirtle: '• Tidak Tahu Malu\n• Idealis\n• Berbakat pemimpin\n• Selalu bangkit setelah kalah',
            tepig: '• Gegabah\n• Terus terang\n• Selalu lapar\n• Pecinta makanan lebih dari segalanya',
            torchic: '• Berani\n• Penyuka petualangan\n• Penuh rasa percaya\n• Selalu mencari tantangan baru!',
            totodile: '• Gembira\n• Spontan\n• Energetik\n• Dapat menghibur orang lain dalam situasi apa pun!',
            treecko: '• Tenang\n• Percaya diri\n• Analitis\n• Kalem dan tetap tenang di bawah tekanan',
            turtwig: '• Pemalu\n• Dihormati\n• Protektif\n• Rendah hati dan memiliki keteguhan yang luar biasa'
        },
        raid: {
            bossApproaching: 'BOSS MENDEKAT',
            bossWarning: '   PERINGATAN!',
            hp: 'HP: {percent}%',
            event: 'SERANG',
            rank: 'PERINGKAT',
            raid: 'PARTI',
            timerLabel: 'Event berakhir:',
            raidPack: 'Paket Serangan',
            stageInfo1: 'Eksplor untuk mengungkap Bosnya!',
            stageInfo2: 'Bergabung dengan teman untuk mengalahkan Bos!',
            requireGymPopup: {
                label1: 'Tahap berikutnya untuk pelatih berpangkat lebih tinggi',
                label2: 'Capai Gym {number} untuk melanjutkan!',
                button: 'AYO'
            },
            party: {
                title: 'Parti Serang',
                subtitle: 'Bergabung dengan teman untuk mengalahkan Bos!',
                expel: 'KELUARKAN',
                leave: 'KELUAR'
            },
            partyExpel: {
                confirm: 'Yakin ingin mengeluarkan anggota Serangan ini?',
                expelled: 'Pemain dikeluarkan dari kelompok Serang'
            },
            partyLeave: {
                confirm: 'Yakin ingin keluar dari kelompok Serangan ini?',
                left: 'Kamu meninggalkan kelompok Serang'
            },
            join: {
                title: 'Ingin bergabung dengan kelompok Serangan ini?',
                subtitle: 'Semua kemajuanmu dalam tahap Serangan sekarang akan hilang'
            },
            stage: 'Tahap {stage}',
            socialInvite: '{inviter} perlu bantuan Anda mengalahkan {boss} di Tahap {number}! (Sisa {percent}% HP)',
            exploreBtn: 'JELAJAHI',
            revivePopup: {
                title: 'Astaga! {pokemon} terluka!',
                question: 'Tonton iklan untuk melanjutkan?',
                cancel: 'KELUAR',
                confirm: 'SIUMAN'
            },
            bossRatingInfo: 'Tahap {stage}',
            battleScore: 'Skor',
            watchAdToBattle: {
                title: 'Kamu butuh Tiket Serangan untuk bertempur!',
                question: 'Tonton iklan untuk melanjutkan?',
                confirm: 'MULAI',
                cancel: 'KELUAR'
            },
            rankingTitle: 'Peringkat Serangan',
            notEnoughPasses: 'Raid Pass selanjutnya tersedia dalam {remainingTime}',
            home: 'GYM',
            caution: 'PERINGATAN!',
            cautionSubtitle: 'Kesulitan babak Serang ini tidak direkomendasikan untukmu\n\nYakin ingin bergabung?',
            defeatBoss: 'Kalahkan Bos untuk membuka',
            totalDamage: 'Kerusakan Total',
            invitePrompt: {
                title: 'Kamu butuh Tiket Serangan untuk bertempur!',
                subTitle: 'Rekrut anggota tambahan untuk mengalahkan {boss} lebih cepat!'
            },
            tutorial: {
                msg1: '[b]Gunakan Pokémon-mu untuk mengalahkan Boss[/b]\nJika ada Pokémon-mu yang kalah, pertarungan selesai. Usahakan bertahan semampumu!'
            },
            invitePopup: {
                title1: 'Undang temanmu untuk bermain  Pokémon Medallion Battle',
                title2: 'Setelah mereka menginstal, kamu mendapat satu PAKET PERAK!',
                title3: 'Mengamankan IV {value}+'
            },
            rankingPopup: {
                bestScoreButton: 'Skor',
                totalDamageButton: 'KERUSAKAN TOTAL'
            }
        },
        raidAnnouncement: {
            header: 'Acara Serangan',
            message: 'Bergabung dengan teman untuk mengalahkan Bos!',
            reward: 'Reward Serangan bertambah seiring tingginya tahapan!'
        },
        resultScreen: {
            nextBadge: 'LENCANA\nSELANJUTNYA',
            reward: 'HADIAH',
            watchAd: 'LIHAT IKLAN',
            winner: 'Pemenang!',
            victories: 'Kemenangan',
            liveOppBonus: 'Bonus Live Opponent',
            quickMatchBonus: 'Bonus Quick Match',
            score: 'SKOR',
            totalDamage: 'KERUSAKAN TOTAL'
        },
        settingScreen: {
            forfeit: 'MENYERAH',
            music: 'Musik',
            pokemonPreview: 'Pratinjau Pokémon',
            privacyPolicy: 'KEBIJAKAN PRIVASI',
            settings: 'Pengaturan',
            soundEffects: 'Efek Suara',
            supportId: 'ID Dukungan:{id}',
            termsOfService: 'KETENTUAN LAYANAN'
        },
        shopScreen: {
            claimFreePack: 'KLAIM',
            comingSoon: 'SEGERA\nHADIR!',
            medal: {
                item: 'MEDALI'
            },
            medalPack: {
                item: 'KUMPULAN MEDALI'
            },
            freePack: {
                item: 'MEDALI STAR'
            },
            adsMedal: {
                item: 'MEDALI POKÉ'
            },
            adMedal: {
                item: 'MEDALI POKÉ'
            },
            gymPack: {
                item: 'PAKET POKÉ'
            },
            guaranteed: 'Dijamin',
            left: 'Tersisa',
            freePackDescription: 'Mungkin berisi\nPokémon Starter',
            tapToOpen: 'Sentuh untuk Buka',
            notReady: 'Kamu telah mengklaim Star Medal ini. Selanjutnya akan tersedia {h}j {m}m lagi.',
            silverPack: {
                item: 'PAKET PERAK'
            },
            guaranteedIv: 'Mengamankan IV {guaranteedIv}+',
            gameCoin: 'Token Pertukaran',
            exchange: {
                title: 'PASAR',
                refresh: 'Refresh dalam:',
                refreshBtn: 'REFRESH',
                selectToTrade: 'Memilih Pokémon buat ditukar',
                select: 'Dipilih',
                require: 'Diperlukan',
                trade: 'TUKAR'
            }
        },
        sslString: {
            btn_challengeNow: 'Tantang Sekarang',
            challenge: {
                text: '{challengerName} menantangmu untuk Pokémon Medallion Battle'
            },
            bossDefeated: {
                text: '{player} menghabisi {boss}! Kumpulkan reward-mu!'
            },
            btn_getReward: 'Klaim'
        },
        starPack: {
            claim: 'KLAIM',
            cooldown: 'Kumpulan Star Pack di',
            countdownTime: '{h}j {m}m',
            title: 'Star Pack'
        },
        taskScreen: {
            achievement: 'PRESTASI',
            claimedReward: 'DIKLAIM!',
            countdownTime: '{h}j {m}m',
            daily: 'HARIAN',
            tapToClaim: 'Ketuk untuk\nKlaim',
            tasks: 'Tugas'
        },
        tier: {
            tier1: 'Bola Pokémon',
            tier2: 'Bola Great',
            tier3: 'Bola Ultra'
        },
        type: {
            dragon: 'Naga',
            electric: 'Listrik',
            fighting: 'Bertempur',
            fire: 'Api',
            grass: 'Rumput',
            normal: 'Bening',
            psychic: 'Psikis',
            water: 'Air'
        },
        raidName: {
            moltres: 'The Molten Monument',
            zapdos: 'The Shuttered Station',
            articuno: 'The Icebound Inlet',
            mewtwo: 'The Lakeside Labyrinth',
            raikou: 'The Thundering Tempest',
            entei: 'The Blazing Balefire',
            suicune: 'The Dismal Downpour',
            deoxys: 'The Insidious Invasion',
            regice: 'The Frozen Fortress',
            regirock: 'The Crumbling Citadel',
            registeel: 'The Steel Stronghold',
            groudon: 'Portal Purba: Daratan',
            kyogre: 'Portal Purba: Laut'
        },
        subscriptionTutorial: {
            title: 'Dapatkan Notifikasi',
            subtitle: 'Jangan sampai ketinggalan informasi!',
            caption1: 'Buka Pokémon Medallion di aplikasi Facebook Gaming',
            caption2: 'Akses pengaturan Facebook Game',
            caption3: 'Aktifkan pesan'
        }
    },
    'resources/strings/ja.json': {
        ability: {
            acid: 'ようかいえき',
            ancientPower: 'げんしのちから',
            aquaJet: 'アクアジェット',
            aquaRing: 'アクアリング',
            aquaTail: 'アクアテール',
            aromatherapy: 'アロマセラピー',
            auraSphere: 'はどうだん',
            batonPass: 'バトンタッチ',
            bite: 'かみつく',
            blazeKick: 'ブレイズキック',
            blizzard: 'ふぶき',
            bonemerang: 'ホネブーメラン',
            braveBird1: 'ブレイブバード',
            brickBreak: 'かわらわり',
            bubble: 'あわ',
            bubbleBeam: 'バブルこうせん',
            bulletSeed: 'タネマシンガン',
            closeCombat: 'インファイト',
            confusion: 'ねんりき',
            counter: 'カウンター',
            crunch: 'かみくだく',
            darkestLariat: 'DDラリアット',
            dig: 'あなをほる',
            discharge: 'ほうでん',
            doubleKick: 'にどげり',
            dreamEater: 'ゆめくい',
            drought: 'もうしょ',
            earthquake: 'じしん',
            ember: 'ひのこ',
            eruption: 'ふんか',
            fireBlast: 'だいもんじ',
            fireFang: 'ほのおのキバ',
            fireSpin: 'ほのおのうず',
            flamethrower: 'かえんほうしゃ',
            flameWheel: 'かえんぐるま',
            flareBlitz2: 'フレアドライブ',
            flareBlitz3: 'フレアドライブ',
            forcePalm: 'はっけい',
            foresight: 'みやぶる',
            furyCutter: 'れんぞくぎり',
            futureSight: 'みらいよち',
            guillotine1: 'ハサミギロチン',
            gust: 'かぜおこし',
            hammerArm: 'アームハンマー',
            harden: 'かたくなる',
            healPulse: 'いやしのはどう',
            flameCharge: 'ニトロチャージ',
            heatCrash2: 'ヒートスタンプ',
            heatCrash3: 'ヒートスタンプ',
            hydroCannon: 'ハイドロカノン',
            hydroPump: 'ハイドロポンプ',
            hyperBeam2: 'はかいこうせん',
            hypnosis: 'さいみんじゅつ',
            iceBeam: 'れいとうビーム',
            icePunch: 'れいとうパンチ',
            icyWind: 'こごえるかぜ',
            karateChop: 'からてチョップ',
            lastResort1: 'とっておき',
            lavaPlume: 'ふんえん',
            leafBlade: 'リーフブレード',
            leafStorm: 'リーフストーム',
            leafTornado: 'グラスミキサー',
            leechSeed: 'やどりぎのタネ',
            lick: 'あくまのキッス',
            lowSweep: 'ローキック',
            luckyChant: 'おまじない',
            megahorn: 'メガホーン',
            mindReader: 'こころのめ',
            miracleEye: 'ミラクルアイ',
            mirrorCoat: 'ミラーコート',
            mudBomb: 'どろばくだん',
            muddyWater: 'だくりゅう',
            mudSlap: 'どろかけ',
            mysticalFire: 'マジカルフレイム',
            odorSleuth: 'かぎわける',
            outrage2: 'げきりん',
            outrage3: 'げきりん',
            overheat: 'オーバーヒート',
            payDay1: 'ネコにこばん',
            payDay2: 'ネコにこばん',
            petalBlizzard: 'はなふぶき',
            petalDance2: 'はなびらのまい',
            petalDance3: 'はなびらのまい',
            phantomForce: 'ゴーストダイブ',
            poisonJab: 'どくづき',
            poisonSting: 'どくばり',
            powerWhip: 'パワーウィップ',
            protect: 'まもる',
            psychic: 'サイコキネシス',
            psywave: 'サイコウェーブ',
            quickAttack: 'でんこうせっか',
            rainDance: 'あまごい',
            razorLeaf: 'はっぱカッター',
            razorShell: 'シェルブレード',
            rockTomb: 'がんせきふうじ',
            rockWrecker: 'がんせきほう',
            seedBomb: 'タネばくだん',
            shadowBall: 'シャドーボール',
            shadowSneak: 'かげうち',
            shellTrap: 'トラップシェル',
            silverWind: 'ぎんいろのかぜ',
            sing: 'うたう',
            skyAttack1: 'ゴッドバード',
            skyAttack3: 'ゴッドバード',
            skyUppercut: 'スカイアッパー',
            sleepPowder: 'ねむりごな',
            solarBeam: 'ソーラービーム',
            sparklingAria: 'うたかたのアリア',
            spikeCannon: 'とげキャノン',
            spikes: 'まきびし',
            spikyShield: 'ニードルガード',
            spore: 'キノコのほうし',
            stealthRock: 'ステルスロック',
            stickyWeb: 'ねばねばネット',
            submission3: 'じごくぐるま',
            sunnyDay: 'にほんばれ',
            superpower: 'ばかぢから',
            synthesis: 'こうごうせい',
            takeDown1: 'とっしん',
            takeDown2: 'とっしん',
            thunder: 'かみなり',
            thunderbolt: '10まんボルト',
            thunderShock: 'でんきショック',
            topsyTurvy1: 'ひっくりかえす',
            topsyTurvy2: 'ひっくりかえす',
            twineedle2: 'ダブルニードル',
            vineWhip: 'つるのムチ',
            voltTackle1: 'ボルテッカー',
            voltTackle2: 'ボルテッカー',
            waterfall: 'たきのぼり',
            waterGun: 'みずでっぽう',
            waterPulse: 'みずのはどう',
            waterShuriken: 'みずしゅりけん',
            wish: 'ねがいごと',
            withdraw: 'からにこもる',
            woodHammer3: 'ウッドハンマー',
            wringOut2: 'しぼりとる',
            wringOut3: 'しぼりとる',
            xScissor: 'シザークロス',
            yawn: 'あくび',
            zapCannon: 'でんじほう',
            flareBlitz1: 'フレアドライブ',
            airCutter: 'エアカッター',
            airSlash: 'エアスラッシュ',
            electricTerrain: 'エレキフィールド',
            lockOn: 'ロックオン',
            parabolicCharge1: 'パラボラチャージ',
            wildCharge1: 'ワイルドボルト',
            psybeam: 'サイケこうせん',
            sludgeBomb: 'ヘドロばくだん',
            thunderPunch: 'かみなりパンチ',
            mudShot: 'マッドショット',
            willOWisp: 'おにび',
            spark: 'スパーク',
            thrash1: 'あばれる',
            extremeSpeed: 'しんそく',
            nobleRoar2: 'おたけび',
            acidArmor: 'とける',
            selfDestruct: 'じばく',
            explosion: 'だいばくはつ',
            psystrike: 'サイコブレイク',
            psychoBoost: 'サイコブースト',
            technoBlast: 'テクノバスター',
            steamEruption: 'スチームバースト',
            bulldoze: 'じならし',
            spiritShackle: 'かげぬい',
            dynamicPunch: 'ばくれつパンチ',
            bounce: 'とびはねる',
            sludge: 'ヘドロこうげき',
            absorb: 'すいとる',
            fieryDance: 'ほのおのまい',
            fireLash: 'ほのおのムチ',
            painSplit: 'いたみわけ',
            powerGem: 'パワージェム',
            machPunch: 'マッハパンチ',
            psychoCut: 'サイコカッター',
            metronome1: 'メトロノーム',
            metronome2: 'メトロノーム',
            moonlight: 'つきのひかり',
            softBoiled: 'タマゴうみ',
            crossChop: 'クロスチョップ',
            playRough: 'じゃれつく',
            powerUpPunch: 'グロウパンチ',
            rapidSpin: 'こうそくスピン',
            haze: 'くろいきり',
            nightSlash: 'つじぎり',
            iceShard: 'こおりのつぶて',
            frostBreath: 'こおりのいぶき',
            hex: 'たたりめ',
            agility: 'こうそくいどう',
            beatUp1: 'ふくろだたき',
            pressure: 'プレッシャー',
            earthPower: 'だいちのちから',
            present: 'プレゼント',
            psyshock: 'サイコショック',
            grassKnot2: 'くさむすび',
            grassKnot3: 'くさむすび',
            moonblast: 'ムーンフォース',
            zenHeadbutt: 'しねんのずつき',
            ionDeluge: 'プラズマシャワー',
            ironDefense: 'てっぺき',
            extrasensory: 'じんつうりき',
            darkPulse: 'あくのはどう',
            sacredFire: 'せいなるほのお',
            shadowPunch: 'シャドーパンチ',
            thunderFang: 'かみなりのキバ',
            poisonFang: 'どくどくのキバ',
            crossPoison: 'クロスポイズン',
            doubleHit1: 'ダブルアタック',
            doubleHit2: 'ダブルアタック',
            dive: 'ダイビング',
            fly: 'そらをとぶ',
            hail: 'あられ',
            rockThrow: 'いわおとし',
            rockSlide: 'いわなだれ',
            magnitude2: 'マグニチュード',
            acrobatics: 'アクロバット',
            sandstorm: 'すなあらし',
            metalBurst2: 'メタルバースト',
            headSmash1: 'もろはのずつき',
            headSmash2: 'もろはのずつき',
            heavySlam2: 'ヘビーボンバー',
            prehistoricCall: 'たいこのよびごえ',
            dragonAscent: 'ガリョウテンセイ',
            auroraBeam: 'オーロラビーム',
            brine: 'しおみず',
            energyBall: 'エナジーボール',
            smackDown: 'うちおとす',
            precipiceBlades: 'だんがいのつるぎ',
            originPulse: 'こんげんのはどう',
            glaciate: 'こごえるせかい',
            bulletPunch2: 'バレットパンチ',
            doubleEdge1: 'すてみタックル',
            dracoMeteor: 'りゅうせいぐん',
            oblivionWing: 'デスウイング',
            landsWrath: 'グランドフォース',
            geomancy: 'ジオコントロール',
            aerialAce: 'つばめがえし',
            lovelyKiss: 'あくまのキッス',
            conversion: 'テクスチャー',
            dragonRush3: 'ドラゴンダイブ',
            iceFang: 'こおりのキバ',
            healBell: 'いやしのすず',
            stoneEdge: 'ストーンエッジ',
            slackOff1: 'なまける',
            slackOff2: 'なまける',
            uproar1: 'さわぐ',
            peck: 'つつく',
            magicalLeaf: 'マジカルリーフ',
            disarmingVoice: 'チャームボイス',
            freezeDry: 'フリーズドライ',
            pursuit: 'おいうち',
            zingZap: 'びりびりちくちく'
        },
        abilityShortDesc: {
            clearance: 'エントリーパワーを取り除く',
            priority: 'パワーが使用されるまえに戦う',
            protect: '敗北からまもられている',
            reveal: '控えのポケットモンスター {value1} 体を見る'
        },
        abilityType: {
            clearance: 'サポートとハザードパワーが効果を発揮する前に取り除く',
            priority: '対戦相手のアクティブ ポケットモンスターがパワーを使うまえに戦う',
            arena: 'ポケットモンスター {value2} が CP を {value1} 受け取る',
            hazard: '対戦相手の次の {value2} アクティブ ポケットモンスターは {value1} の CP を失う',
            protect: '1ターンの間、ポケモンが敗北からまもられている',
            reveal: '対戦相手の控えのポケットモンスター {value1} 体を見る',
            se: 'ポケットモンスター {value2} 体に対して {value1} 倍の CP をゲット',
            transform: '対戦相手の最後のアクティブ ポケットモンスターの姿に変身する',
            wish: '次の {value2} アクティブ ポケットモンスターが CP を {value1} 手に入れるぞ'
        },
        achievement: {
            collected: '違う種族のポケットモンスターを {targetValue} 体集める',
            evolved: 'ポケットモンスターを {targetValue} 体進化させる',
            play: 'ジムバトルを {targetValue} 回プレイする',
            sentToLab: '{targetValue} 体のポケットモンスターを研究所に送る',
            win: 'ジムバトルに {targetValue} 回勝利する'
        },
        adHouse: {
            0: {
                text1: 'ポケモンを研究所に送ってキャンディーを獲得しよう',
                text2: 'キャンディーでポケモンを進化しよう！'
            },
            1: {
                text1: 'ベンチ入りのポケモンを見る！',
                text2: '忘れないで：ポケモンはCPの順で並んでいるよ！'
            },
            2: {
                text1: 'ポケモンを危険から守ろう',
                text2: '相手のパワーを役立たずにしよう！'
            },
            3: {
                text1: '優先があるとすぐに戦うぞ',
                text2: 'パワーを使われる前にポケモンを倒そう！'
            },
            4: {
                text1: 'アリーナでポケモンをブースト！',
                text2: '一度に一つのアリーナだけ効果を発揮する'
            },
            5: {
                text1: 'エントリーハザードでポケモンにダメージ',
                text2: 'エントリーサポートでポケモンを回復'
            },
            6: {
                text1: 'エントリーハザードとエントリーサポートを取り除こう！',
                text2: 'エントリーパワーが効果を発揮するまえに発生'
            }
        },
        arenaScreen: {
            effectsCanceled: '{arena1} と {arena2} が\nキャンセルされた！'
        },
        badge: {
            1: '訓練生',
            2: 'グラス',
            3: 'ファイヤー',
            4: 'ウオーター',
            5: 'かみなり',
            6: 'ファイト',
            7: 'サイキック',
            8: 'ドラゴン',
            9: 'ジャングル',
            10: '温泉',
            11: 'フェアリー'
        },
        badgeHistoryScreen: {
            badges: 'バッジ'
        },
        badgeTitle: {
            1: '訓練生',
            2: 'グラス',
            3: 'ファイヤー',
            4: 'ウオーター',
            5: 'かみなり',
            6: 'ファイト',
            7: 'サイキック',
            8: 'ドラゴン',
            9: 'ジャングル',
            10: '温泉',
            11: 'フェアリー'
        },
        badgeUnlock: {
            available: '利用可能',
            gotBadge: '{type} のバッジを手に入れた！',
            unlock: 'ジム {number} がアンロックされた！'
        },
        bagScreen: {
            cannotBeUndone: 'これはやり直せません。',
            cannotEvolveEquipped: 'このポケットモンスターはチームに入っているので進化できません。',
            editTeam: 'チーム編集',
            editTeamConfirmButton: '完成',
            error: {
                leaveConfirm: '本当にここを出ますか？',
                noDupeFamily: '一度に使えるポケットモンスターは {family} ファミリーに属するものだけだ！',
                teamFull: 'チームが一杯です！',
                teamateLimit: '{type} のポケットモンスターを 2 体だけ使えるぞ！',
                unableToSave: 'チームの保存ができません'
            },
            evolutionConfirm: '{pokemonName} の進化を\n実行しても良いですか？',
            evolveButton: '進化',
            evolvesFrom: '{evolutionName} から進化',
            filterModeTab: '情報',
            get: '受け取る',
            information: '情報',
            selectPokemonFirst: '研究所に送るメダリオンを先ず選択してください',
            sellPokemonBatchLimit: '研究所には {max} 体以上のポケットモンスターを一度に送ることはできません',
            sellPokemonInTeam: 'このポケットモンスターはチームに入っているので研究所に送れません',
            send: '送る',
            sendConfirmation1: '{pokemonCount} 体のポケットモンスターを研究所に送ってキャンディ {candiesSum} 個を獲得しますか？',
            sendDisclaimer: 'ポケットモンスターを研究所に送りますか？',
            sendSuccesfull: '研究所に {pokemonCount} 体のポケットモンスターを送って {candiesSum} を受け取った',
            sendToLab: '研究所に送る',
            sendToLabConfirmButton: 'キャンセル',
            topForMoreInfo: 'ポケットモンスターをタップして情報確認と進化を行うぞ！',
            warning: {
                evolveEquipped: 'このポケットモンスターを進化させると、チームから削除されます！',
                evolveEquippedQuestion: '本当に進化を行いますか？',
                teamNotReady1: 'このチームは無効だよ！',
                teamNotReady2: 'チーム編集を完了させよう'
            },
            expand: 'バッグを拡張する？',
            expandSucccess: 'バッグが {slot} スロット拡張されました'
        },
        callout: {
            opponentTurn: '対戦相手のターン',
            yourTurn: '君のターン！'
        },
        challenge: {
            challengeBrag3: '{challenger}が{opponent}を完全に打ちのめした！',
            challengeBrag2: '{challenger}が{opponent}を見事に倒した！',
            challengeBrag1: '互角の戦いだったが、{challenger}が{opponent}に勝利した！',
            challengeBrag0: '{challenger}と{opponent}は激しいバトルを繰り広げた！'
        },
        challengeReferralPrompt: {
            header: 'ジム バトルにみごと勝利したね！',
            text: 'でも友だちを倒せるかな？',
            button: 'はい、もちろん！'
        },
        challengeScreen: {
            title: 'デュエル',
            subTitle: '友だちにチャレンジして報酬を手に入れよう！',
            battle: 'バトル',
            quickMatch: 'クイックマッチ',
            invite: '招待',
            waitFor: '返事を待っています...',
            notFoundUser: 'ポケモン メダリオンバトルををプレイしている友だちが見つからない！',
            joinChallengeRequestHanging: '友だちと接続できません',
            waitForPlayer: 'プレイヤーの返事を待っています...',
            switchAiTitle: 'ゲーム開始',
            switchAiText: 'お待ちください...',
            noDoubleChallenge: '同じプレイヤーに2回続けてはチャレンジできないよ',
            skipBtn: '今すぐプレイ',
            loadingFriends: '友だちを読込中...',
            alreadyPlayed1: '今日すでにこのプレイヤーにチャレンジしたよ',
            alreadyPlayed2: '新しいプレイヤーにチャレンジしてポイントを獲得しよう！'
        },
        chatbot: {
            btn_play: '今すぐプレイ',
            btn_challengeNow: '今すぐチャレンジ',
            btn_claimNCandies: '{amount} 個のキャンディーを受け取る',
            desciptionLine1: 'リマインダーをオンにして',
            desciptionLine2: 'カモネギをゲット',
            message: 'ポケモン メダリオンは\nお知らせやヒントなどを送信することが\nあります。ゲーム会話中の\nメッセージをオフにする \nことができます。',
            messageHeader: 'ポケモン メダリオンからの\nメッセージをオンにする',
            notNow: '後で',
            reminders: 'リマインダー',
            thankYou: 'プレイしてくれてありがとう！またすぐに戻ってきてね！',
            turnOn: 'オンにする',
            claimFreePack: '受け取る',
            freePackRemider: '無料のスターメダルがあるよ！',
            '24hReminder': '無料で進化させてより強力なポケモンをゲットしよう！',
            '30hReminder': 'おかえりなさい！さあ、バトルを始めよう！',
            '36hReminder': '{player}、帰ってきて一緒にプレイしよう！',
            '38hReminder': '{player}、カモネギ が現れたぞ！',
            '46hReminder': 'スターパックにはレアなポケモンが含まれている。運試しをしよう！'
        },
        common: {
            fatal: '重大なエラー： {error}',
            tapToContinue: 'タップして続ける',
            alreadyInvited: '今日すでにこのプレイヤーを招待したよ'
        },
        daily: {
            coinSpent: 'ポケコインを {targetValue} 消費する',
            evolved: 'ポケットモンスターを {targetValue} 体進化させる',
            play: 'ジムバトルを {targetValue} 回プレイする',
            sentToLab: '{targetValue} 体のポケットモンスターを研究所に送る',
            win: 'ジムバトルに {targetValue} 回勝利する'
        },
        error: {
            candyOverflowWarning: 'この行動を実行するとポケコインの上限を超えてしまいます！',
            coinOverflowWarning: 'この行動を実行するとポケコインの上限を超えてしまいます！',
            noAdSupport: '申し訳ありませんが、この端末は現在広告をサポートしていません',
            noOpponent: '対戦相手が見つかりません。また後でお試しください。',
            reconnectGiveUp: 'ゲーム接続が失われました。再読み込みを行ってください',
            unableToConnect: 'サーバーに接続できません。',
            disconnectedInFight: 'ネットワーク接続を失いました',
            unableToLoadAd: '広告が利用できません。後ほど再度お試しください。',
            noSpaceInBag: 'バッグにスペースがありません！\n研究所にポケットモンスターを送って空きを増やしましょう',
            notEnoughcandy: 'キャンディが足りません！\nもっと獲得するにはポケットモンスターを研究所に送ってください',
            notEnoughcoin: 'ポケコインが足りません！バトルに勝って入手しよう',
            invalidTeam: 'このチームは無効だよ！チーム編集を完了させよう',
            raidClosed: 'レイド期限切れ\n\n次の冒険を乞うご期待！',
            raidClosedDetailed: 'レイド期限切れ\n\n次の冒険が始まるまで {h}時間 {m}分！',
            raidFull: 'このレイドチームは一杯です',
            joinRaidCooldownError: 'ちょっと待って、レイドパーティーへの参加が早すぎるよ！\n\n{hours}時間 {minutes}分後にまた来てね'
        },
        flag: {
            legendary: 'レジェンド'
        },
        ftue: {
            addToTeam: 'バトルを開始するまえに {pokemon} をチームに追加しよう',
            battle2: 'バトルで {pokemon} を試してみよう！',
            claimReward: 'バトルを開始するまえに任務報酬を受け取ろう',
            evolve: 'ポケットモンスターを進化して CP とパワーを入手しよう！\n\nタップしてバッグを開こう。',
            howEvolve: '進化にはコストとしてキャンディが必要だ。\n\nキャンディを得るにはポケットモンスターを研究所に送ろう。',
            letsBattle: '[b]ようこそ\nポケットモンスター メダリオンバトルへ！[/b]\n\nバトルに [b]3[/b] 回勝利すれば優勝だ！',
            opponentName: 'ライバルトレーナー',
            playpk1: '[b]{pokemon} をプレイしよう[/b]\n\nより CP の高いポケットモンスターが勝利するぞ',
            playpk2: '[b]勝利後に最初にプレイする。{pokemon} を送り出そう！[/b]',
            playpk3: '[b]{pokemon} を選ぼう[/b]\n\n一部のポケットモンスターはパワーを持っているぞ\nタップしてもっと詳しく見よう',
            playStarter: '[b]{pokemon} でこのバトルを終わらせよう！[/b]\n特定タイプのポケットモンスターとの対戦時、効果がばつぐんだと CP が増えるぞ。',
            playStarter2: '[b]{pokemon} でこのバトルを終わらせよう！[/b]',
            superEffective: '{pokemon}の{ability}パワーは CP を{type}ポケモンに対してブーストさせる',
            protect: 'トランセル の {ability} パワーで敗北しないぞ！',
            tryPokemon: '{pokemon} にやらせてみよう。\n\nバトルをタップして試合を開始しよう。',
            removeMedalFromTeam: 'ポケモン1体をチームから削除すると{pokemon}をチームに入れることができる',
            addMedalToTeam: '{pokemon}をタップしてチームに追加',
            completeTeam: 'まだ選択されていないポケモンをタップしてチームを完成させよう'
        },
        gachaScreen: {
            note: '次のジムに着けば新しいポケットモンスターがアンロックされるぞ！',
            noteStarPack: 'スターパックを開けてスターターを\n全て集めよう！'
        },
        general: {
            cancel: 'キャンセル',
            close: '閉じる',
            countdownDHTime: '{d}日 {h}時間',
            countdownHMTime: '{h}時間 {m}分',
            countdownMSTime: '{m}分 {s}秒',
            done: '完成',
            doneExclamation: '完成！',
            errorHappened: 'エラーが発生しました\n{error}',
            get: '受け取る',
            go: '開始',
            leave: '退出',
            noButton: 'いいえ',
            off: 'オフ',
            ok: 'OK',
            on: 'オン',
            proceed: '進む',
            restartIn: '再開まで：',
            revert: '元に戻す',
            stay: '待機',
            team: 'チーム',
            yesButton: 'はい',
            score: 'スコア',
            idle: 'アイドリング'
        },
        gifts: {
            dailyLimit: 'ありがとう。でも今日はもう 3/3 回ヘルプを行っているよ。また明日来てね！',
            expired: '残念ですがこのリクエストは時間切れです。他に誰かがヘルプを出しているか見てみましょう。',
            sourceLimit: '今日はもうこのプレイヤーからプレゼントを受け取っているよ！\nまた明日確認しよう。',
            gotItem: '{friend} から {item} をゲットした！',
            help: {
                candy: 'キャンディを使ってミミッキュに友だちを作ってあげよう',
                coins: '「借りた」コインをニャースと一緒に返そう',
                starMedal: 'この卵を何とかしてくれるトレーナーをイーブイと一緒に探そう'
            },
            header: '友だちにポケットモンスターをプレゼントしよう！',
            sendAll: 'すべて送る',
            send: '送る',
            sendItem: '友だちに{item}を送ろう！',
            title: 'ギフト',
            yourRequest: '残念ですが、これはあなたのリクエストです。他に誰かがヘルプを出しているか見てみましょう。',
            gotItemInMailbox: 'メールボックスに {item} が届きました。\nお礼に {giftBack} とギフトを送ったよ！',
            gotItemAndGiftSend: '{item} をゲットした\nお礼に {giftBack} とギフトを送ったよ！',
            gotItemAndGiftRespond: '{item} をゲットした\nお礼に {giftBack} を送ったよ！'
        },
        gym: {
            1: 'トレーナータウン',
            2: 'グリーンウッドの林',
            3: 'スコーチファイア山頂',
            4: 'クリアウォーター海岸',
            5: '発電所',
            6: 'ダストロック道場',
            7: 'シャドーモス寺院',
            8: 'ドラゴンのすみか',
            9: 'リーグ協議会',
            10: 'ミストレス山',
            11: 'ムーンクレスト牧草地',
            final: 'チャンピオンズ カップ',
            title: 'ジム {gymId}：'
        },
        landingScreen: {
            battle: 'バトル',
            inviteBtn: '招待',
            nextBadge: '次のジム',
            team: 'チーム',
            challengeBtn: 'デュエル',
            rating: '評価：',
            rank: 'ランク：'
        },
        leaderboard: {
            cannotLoad: 'ランキング読み込みに失敗しました',
            requesting: 'ランキング要求中...',
            seasonNumber: 'シーズン {number} ランキング'
        },
        mailbox: {
            emptyMailboxMessage: 'メールボックスが空です',
            button: {
                claim: '受け取る',
                read: '読む'
            },
            expiration: '{h}時間{m}分で期限切れ',
            expired: '期限切れ',
            referralBonus: {
                title: 'ありがとう！',
                body: '友だちがギフトを受け取るごとに{number}{coinSymbol}を獲得しよう！'
            },
            csGift: {
                title: 'サポート',
                body: 'ポケモン メダリオンバトルチームから',
                default: {
                    title: 'サポート',
                    body: 'ポケモン メダリオンバトルチームから'
                },
                sorry: {
                    title: 'ごめんなさい！',
                    body: '技術的な不具合に対してのおわびです'
                }
            },
            gift: {
                title: 'ギフト',
                body: '友だちがギフトを送ってきたよ'
            },
            raidReward: {
                title: 'レイドパック - ステージ {stage}',
                body: '{bossName} を手伝って倒した報酬だよ！'
            },
            raidHighScore: {
                title: 'ハイスコア - ステージ {stage}',
                body: 'ハイスコアランキング #{rank} の報酬だよ！'
            },
            raidAnnouncement: {
                title: 'レイドイベント - {raidName}',
                body: '{bossName} が現れた！チームを組んで倒そう！'
            },
            referralSilverPack: {
                title: 'ありがとう！',
                body: '友だちを雇った報酬だよ'
            },
            subscriptionTutorial: {
                title: '通知を受け取る',
                body: '新しい情報を見逃すな！'
            },
            raidTotalDamage: {
                title: 'ハイスコア - ステージ{stage}',
                body: '#{rank} の結果で {amount}x {rewardIcon} を獲得した！'
            },
            lbReward: {
                global: {
                    title: 'グローバルランキング',
                    body: '全世界ランキング上位 #{rank} 位の報酬だよ！'
                },
                region: {
                    title: '国内ランキング',
                    body: '全国ランキング上位 #{rank} 位の報酬だよ！'
                }
            }
        },
        maintenance: {
            details: '申し訳ありません。\n現在メンテナンス中です。',
            title: 'すぐに終わるよ！'
        },
        navBar: {
            bag: 'バッグ',
            battle: 'バトル',
            challenge: 'デュエル',
            mail: 'メール',
            pokedex: 'ポケデックス',
            shop: 'ショップ'
        },
        noFriendReferralPrompt: {
            button: 'OK',
            header1: 'ポケモン メダリオンは友だちとプレイするとより楽しいよ！',
            text1: '友だちを招待して一緒にプレイしよう',
            text2: '友だちにデュエルをチャレンジして勝利すると、レアなピカチュウが手に入るチャンスあり！'
        },
        notification: {
            defaultPlay: {
                btn: '今すぐプレイ'
            },
            defaultClaim: {
                btn: '受け取る'
            },
            gift_candy: {
                btn: 'キャンディを {count} 個受け取る',
                text: 'ミミッキュがキャンディーをくれるよ。友だちになる？'
            },
            gift_coins: {
                btn: 'ポケコインを {count} 枚受け取る',
                text: 'ニャースが君のポケコインを持っている...'
            },
            gift_starMedal: {
                btn: 'メダルを受け取る',
                text: '{friend} からギフトが届いたよ！'
            },
            gift_reward: {
                text: '{friend} says thanks with a gift!'
            },
            simpleThanks: {
                btn: '今すぐプレイ',
                text: 'プレイしてくれてありがとう！またすぐに戻ってきてね！'
            },
            shareMedal: {
                btn: '今すぐプレイ',
                text: '{pokemon} をチェックしよう！'
            },
            whichStarter: {
                text: 'あなたの最初のポケットモンスターはどれ？'
            },
            win: {
                text: '{playerFirstName} の {myPokemon} が {opposingPokemon}を倒した！'
            },
            winBy1: {
                text: '互角の戦いだったが、{attacker} が {defender} に勝利した！'
            },
            winBy2: {
                text: '{attacker} の {pokemon} が {defenderPokemon} を倒した！'
            },
            winBy3: {
                text: '{attacker} が {defender} を完全に打ちのめした！'
            },
            lose: {
                text: '{defender} が {defenderPokemon} で {attacker} の攻撃を見事に食い止めた！'
            },
            challenge: {
                text: '{challengerName} がポケモン メダリオンバトルでチャレンジしてきた'
            },
            shareBadge: {
                text: 'ついに{badge}バッジを手に入れた！'
            },
            sharePack: {
                text: 'すごい！何が入っているか確認しよう！'
            }
        },
        pokedexEntry: {
            evolvesInto: '{evolutionName} に進化する',
            finalEvolution: '最終進化',
            height: '身長',
            moreInfo: '集めてさらに情報を得る',
            pokemonIllustrator: 'イラストレーター： {illustrator}',
            unknownValue: '???',
            weight: '体重'
        },
        pokemon: {
            alomomola: 'ママンボウ',
            ariados: 'アリアドス',
            articuno: 'フリーザー',
            bayleef: 'ベイリーフ',
            beedrill: 'スピアー',
            bellossom: 'キレイハナ',
            blastoise: 'カメックス',
            blaziken: 'バシャーモ',
            blitzle: 'シママ',
            braixen: 'テールナー',
            brionne: 'オシャマリ',
            bulbasaur: 'フシギダネ',
            bunnelby: 'ホルビー',
            butterfree: 'バタフリー',
            camerupt: 'バクーダ',
            carbink: 'メレシー',
            caterpie: 'キャタピー',
            celebi: 'セレビィ',
            charizard: 'リザードン',
            charmander: 'ヒトカゲ',
            charmeleon: 'リザード',
            chesnaught: 'ブリガロン',
            chespin: 'ハリマロン',
            chikorita: 'チコリータ',
            chimchar: 'ヒコザル',
            cloyster: 'パルシェン',
            combusken: 'ワカシャモ',
            corsola: 'サニーゴ',
            croagunk: 'グレッグル',
            crobat: 'クロバット',
            croconaw: 'アリゲイツ',
            cubone: 'カラカラ',
            cyndaquil: 'ヒノアラシ',
            dartrix: 'フクスロー',
            decidueye: 'ジュナイパー',
            dedenne: 'デデンネ',
            delibird: 'デリバード',
            delphox: 'マフォクシー',
            deoxys: 'デオキシス',
            dewott: 'フタチマル',
            diggersby: 'ホルード',
            ditto: 'メタモン',
            donphan: 'ドンファン',
            dragonair: 'ハクリュー',
            dragonite: 'カイリュー',
            dratini: 'ミニリュウ',
            ducklett: 'コアルヒー',
            duosion: 'ダブラン',
            eevee: 'イーブイ',
            electabuzz: 'エレブー',
            electivire: 'エレキブル',
            electrike: 'ラクライ',
            elekid: 'エレキッド',
            emboar: 'エンブオー',
            empoleon: 'エンペルト',
            exeggcute: 'タマタマ',
            exeggutor: 'ナッシー',
            farfetchd: 'カモネギ',
            fearow: 'オニドリル',
            feebas: 'ヒンバス',
            fennekin: 'フォッコ',
            feraligatr: 'オーダイル',
            flareon: 'ブースター',
            fletchinder: 'ヒノヤコマ',
            fletchling: 'ヤヤコマ',
            froakie: 'ケロマツ',
            frogadier: 'ゲコガシラ',
            froslass: 'ユキメノコ',
            gastly: 'ゴース',
            genesect: 'ゲノセクト',
            gengar: 'ゲンガー',
            glalie: 'オニゴーリ',
            gloom: 'クサイハナ',
            golbat: 'ゴルバット',
            golduck: 'ゴルダック',
            greninja: 'ゲッコウガ',
            grimer: 'ベトベター',
            grotle: 'ハヤシガメ',
            grovyle: 'ジュプトル',
            gyarados: 'ギャラドス',
            haunter: 'ゴースト',
            heatmor: 'クイタラン',
            heliolisk: 'エレザード',
            helioptile: 'エリキテル',
            heracross: 'ヘラクロス',
            'ho-oh': 'ホウオウ',
            hoppip: 'ハネッコ',
            horsea: 'タッツー',
            incineroar: 'ガオガエン',
            infernape: 'ゴウカザル',
            inkay: 'マーイーカ',
            ivysaur: 'フシギソウ',
            jolteon: 'サンダース',
            jumpluff: 'ワタッコ',
            jynx: 'ルージュラ',
            kakuna: 'コクーン',
            kingdra: 'キングドラ',
            kricketot: 'コロボーシ',
            kricketune: 'コロトック',
            kyurem: 'キュレム',
            lapras: 'ラプラス',
            larvesta: 'メラルバ',
            litleo: 'シシコ',
            litten: 'ニャビー',
            lucario: 'ルカリオ',
            lugia: 'ルギア',
            lunatone: 'ルナトーン',
            machamp: 'カイリキー',
            machoke: 'ゴーリキー',
            machop: 'ワンリキー',
            magcargo: 'マグカルゴ',
            magikarp: 'コイキング',
            magmar: 'ブーバー',
            magnemite: 'コイル',
            magneton: 'レアコイル',
            magnezone: 'ジバコイル',
            malamar: 'カラマネロ',
            manectric: 'ライボルト',
            maractus: 'マラカッチ',
            marowak: 'ガラガラ',
            marshtomp: 'ヌマクロー',
            meganium: 'メガニウム',
            meowth: 'ニャース',
            metapod: 'トランセル',
            mew: 'ミュウ',
            mewtwo: 'ミュウツー',
            milotic: 'ミロカロス',
            mimikyu: 'ミミッキュ',
            moltres: 'ファイヤー',
            monferno: 'モウカザル',
            morelull: 'ネマシュ',
            mudkip: 'ミズゴロウ',
            muk: 'ベトベトン',
            natu: 'ネイティ',
            ninetales: 'キュウコン',
            numel: 'ドンメル',
            oddish: 'ナゾノクサ',
            onix: 'イワーク',
            oshawott: 'ミジュマル',
            paras: 'パラス',
            parasect: 'パラセクト',
            persian: 'ペルシアン',
            phanpy: 'ゴマゾウ',
            pichu: 'ピチュー',
            pidgeot: 'ピジョット',
            pidgeotto: 'ピジョン',
            pidgey: 'ポッポ',
            pignite: 'チャオブー',
            pikachu: 'ピカチュウ',
            pinsir: 'カイロス',
            piplup: 'ポッチャマ',
            politoed: 'ニョロボン',
            poliwag: 'ニョロモ',
            poliwhirl: 'ニョロゾ',
            poliwrath: 'ニョロトノ',
            ponyta: 'ポニータ',
            popplio: 'アシマリ',
            primarina: 'アシレーヌ',
            prinplup: 'ポッタイシ',
            psyduck: 'コダック',
            pyroar: 'カエンジシ',
            quagsire: 'ヌオー',
            quilava: 'マグマラシ',
            quilladin: 'ハリボーグ',
            raichu: 'ライチュウ',
            rapidash: 'ギャロップ',
            reuniclus: 'ランクルス',
            rhydon: 'サイドン',
            rhyhorn: 'サイホーン',
            rhyperior: 'ドサイドン',
            riolu: 'リオル',
            rowlet: 'モクロー',
            salandit: 'ヤトウモリ',
            salazzle: 'エンニュート',
            samurott: 'ダイケンキ',
            sceptile: 'ジュカイン',
            seadra: 'シードラ',
            serperior: 'ジャローダ',
            servine: 'ジャノビー',
            shellder: 'シェルダー',
            shiinotic: 'マシェード',
            shuckle: 'ツボツボ',
            skiploom: 'ポポッコ',
            slowbro: 'ヤドラン',
            slowking: 'ヤドキング',
            slowpoke: 'ヤドン',
            slugma: 'マグマッグ',
            snivy: 'ツタージャ',
            snorlax: 'カビゴン',
            snorunt: 'ユキワラシ',
            solosis: 'ユニラン',
            solrock: 'ソルロック',
            spearow: 'オニスズメ',
            spinarak: 'イトマル',
            squirtle: 'ゼニガメ',
            stunfisk: 'マッギョ',
            swampert: 'ラグラージ',
            swanna: 'スワンナ',
            talonflame: 'ファイアロー',
            tepig: 'ポカブ',
            torchic: 'アチャモ',
            torracat: 'ニャヒート',
            torterra: 'ドダイトス',
            totodile: 'ワニノコ',
            toxicroak: 'ドクロッグ',
            treecko: 'キモリ',
            tropius: 'トロピウス',
            turtonator: 'バクガメス',
            turtwig: 'ナエトル',
            typhlosion: 'バクフーン',
            vaporeon: 'シャワーズ',
            venusaur: 'フシギバナ',
            vileplume: 'ラフレシア',
            volcanion: 'ボルケニオン',
            volcarona: 'ウルガモス',
            vulpix: 'ロコン',
            wailmer: 'ホエルコ',
            wailord: 'ホエルオー',
            wartortle: 'カメール',
            weedle: 'ビードル',
            wishiwashi: 'ヨワシ',
            wobbuffet: 'ソーナンス',
            wooper: 'ウパー',
            wynaut: 'ソーナノ',
            xatu: 'ネイティオ',
            zapdos: 'サンダー',
            zebstrika: 'ゼブライカ',
            zubat: 'ズバット',
            raikou: 'ライコウ',
            entei: 'エンテイ',
            suicune: 'スイクン',
            houndour: 'デルビル',
            houndoom: 'ヘルガー',
            teddiursa: 'ヒメグマ',
            ursaring: 'リングマ',
            mareep: 'メリープ',
            flaaffy: 'モココ',
            ampharos: 'デンリュウ',
            misdreavus: 'ムウマ',
            mismagius: 'ムウマージ',
            skarmory: 'エアームド',
            larvitar: 'ヨーギラス',
            pupitar: 'サナギラス',
            tyranitar: 'バンギラス',
            gligar: 'グライガー',
            gliscor: 'グライオン',
            sneasel: 'ニューラ',
            weavile: 'マニューラ',
            azurill: 'ルリリ',
            marill: 'マリル',
            azumarill: 'マリルリ',
            bronzor: 'ドーミラー',
            bronzong: 'ドータクン',
            steelix: 'ハガネール',
            growlithe: 'ガーディ',
            arcanine: 'ウインディ',
            pineco: 'クヌギダマ',
            forretress: 'フォレトス',
            togedemaru: 'トゲデマル',
            shroomish: 'キノココ',
            breloom: 'キノガッサ',
            happiny: 'ピンプク',
            chansey: 'ラッキー',
            ralts: 'ラルトス',
            kirlia: 'キルリア',
            gallade: 'エルレイド',
            gardevoir: 'サーナイト',
            cleffa: 'ピィ',
            clefairy: 'ピッピ',
            clefable: 'ピクシー',
            wingull: 'キャモメ',
            pelipper: 'ペリッパー',
            lotad: 'ハスボー',
            lombre: 'ハスブレロ',
            ludicolo: 'ルンパッパ',
            meditite: 'アサナン',
            medicham: 'チャーレム',
            beldum: 'ダンバル',
            metang: 'メタング',
            metagross: 'メタグロス',
            baltoy: 'ヤジロン',
            claydol: 'ネンドール',
            sableye: 'ヤミラミ',
            duskull: 'ヨマワル',
            dusclops: 'サマヨール',
            dusknoir: 'ヨノワール',
            jirachi: 'ジラーチ',
            aipom: 'エイパム',
            ambipom: 'エテボース',
            slakoth: 'ナマケロ',
            vigoroth: 'ヤルキモノ',
            slaking: 'ケッキング',
            torkoal: 'コータス',
            staryu: 'ヒトデマン',
            starmie: 'スターミー',
            regice: 'レジアイス',
            geodude: 'イシツブテ',
            graveler: 'ゴローン',
            golem: 'ゴローニャ',
            regirock: 'レジロック',
            aron: 'ココドラ',
            lairon: 'コドラ',
            aggron: 'ボスゴドラ',
            porygon: 'ポリゴン',
            porygon2: 'ポリゴン２',
            porygonz: 'ポリゴンＺ',
            registeel: 'レジスチル',
            cranidos: 'ズガイドス',
            rampardos: 'ラムパルド',
            shieldon: 'タテトプス',
            bastiodon: 'トリデプス',
            tyrunt: 'チゴラス',
            tyrantrum: 'ガチゴラス',
            groudon: 'グラードン',
            rayquaza: 'レックウザ',
            aerodactyl: 'プテラ',
            omanyte: 'オムナイト',
            omastar: 'オムスター',
            tirtouga: 'プロトーガ',
            carracosta: 'アバゴーラ',
            carvanha: 'キバニア',
            sharpedo: 'サメハダー',
            kyogre: 'カイオーガ',
            lileep: 'リリーラ',
            cradily: 'ユレイドル',
            anorith: 'アノプス',
            armaldo: 'アーマルド',
            scyther: 'ストライク',
            scizor: 'ハッサム',
            xerneas: 'ゼルネアス',
            swablu: 'チルット',
            altaria: 'チルタリス',
            togepi: 'トゲピー',
            togetic: 'トゲチック',
            togekiss: 'トゲキッス',
            bagon: 'タツベイ',
            shelgon: 'コモルー',
            salamence: 'ボーマンダ',
            yveltal: 'イベルタル',
            kabuto: 'カブト',
            kabutops: 'カブトプス',
            archen: 'アーケン',
            archeops: 'アーケオス',
            gible: 'フカマル',
            gabite: 'ガバイト',
            garchomp: 'ガブリアス',
            zygarde: 'ジガルデ',
            amaura: 'アマルス',
            aurorus: 'アマルルガ'
        },
        popin: {
            socialGiftPromptHigh: {
                text: '友だちにポケットモンスターをプレゼントしよう！',
                cta: 'OK'
            },
            challengePrompt: {
                text: 'ジム バトルにみごと勝利したね！',
                text2: 'でも友だちを倒せるかな？',
                cta: 'はい、もちろん！'
            },
            challengeInvite: {
                text: '友だちとデュエルしてレアな {pokemon} を獲得するチャンスあり！',
                cta: 'OK'
            }
        },
        quiz: {
            playNow: 'プレイしよう！',
            share: '共有',
            shareMsg: 'の性格は {nature} だ',
            playerIs: '{player} は',
            tap: 'タップして確認だ！',
            tryAgain: 'リトライ',
            whichStarter: 'あなたの最初のポケットモンスターはどれ？',
            yourPersonality: '{player}、\n君の {nature} な個性とは相性がいいぞ'
        },
        quizResult: {
            bulbasaur: 'おとなしい',
            charmander: 'なまいき',
            chespin: 'のんき',
            chikorita: 'すなお',
            chimchar: 'わんぱく',
            cyndaquil: 'おくびょう',
            fennekin: 'いじっぱり',
            froakie: 'しんちょう',
            litten: 'さみしがり',
            mudkip: 'きまぐれ',
            oshawott: 'やんちゃ',
            piplup: 'ひかえめ',
            popplio: 'おっとり',
            rowlet: 'がんばりや',
            snivy: 'まじめ',
            squirtle: 'ずぶとい',
            tepig: 'せっかち',
            torchic: 'ゆうかん',
            totodile: 'ようき',
            treecko: 'おだやか',
            turtwig: 'てれや'
        },
        quizShare: {
            bulbasaur: '• おとなしい\n• たのもしい\n• やくだつ\n• いつでも助けてくれる',
            charmander: '• なまいき\n• ハッピー\n• つよいこころ\n• 勝利にむかってまっしぐら！',
            chespin: '• のんき\n• がまん\n• カリスマ\n• とても冷静のように見えて、怒りをかくしている',
            chikorita: '• すなお\n• びんかん\n• かばう\n• すぐに信じてくれる、あたたかい心',
            chimchar: '• わんぱく\n• クリエイティブ\n• ねつれつ\n• パーティー好き！',
            cyndaquil: '• おくびょう\n• しんちょう\n• おもいやり\n• 外には出ないで仲間と一緒にいるのが好き',
            fennekin: '• いじっぱり\n• やさしい\n• したがう\n• いつでも友だちのそばにいる',
            froakie: '• しんちょう\n• ほんのう\n• すごうで\n• 負けを勝ちに変えるすごいアビリティーがある',
            litten: '• さみしがり\n• どうとく\n• たよれる\n• いつでも自分を信じている',
            mudkip: '• きまぐれ\n• きんべん\n• するどい\n• 新しいアイデアでいっぱい！',
            oshawott: '• やんちゃ\n• チャーミング\n• なおしや\n• 魅力的な笑顔で心をあたためる',
            piplup: '• ひかえめ\n• おもいやり\n• おうえん\n• いつでも話をよく聞いてくれる',
            popplio: '• おっとり\n• さきよみ\n• アーティスト\n• 世界はアートのキャンバスだと信じている',
            rowlet: '• がんばりや\n• アイデア\n• ロジック\n• いつでも問題を解決できる',
            snivy: '• まじめ\n• エレガント\n• まっすぐ\n• 軽く見られるのが嫌い',
            squirtle: '• ずぶとい\n• ゆめみがち\n• リーダー\n• 倒れても立ち上がる',
            tepig: '• せっかち\n• ずけずけ\n• はらぺこ\n• 何よりも食べ物が好き！',
            torchic: '• ゆうかん\n• だいたん\n• しんじる\n• いつでも次の山をめざしている！',
            totodile: '• ようき\n• のびのび\n• げんき\n• どんな時でも相手を元気にする！',
            treecko: '• おだやか\n• しんねん\n• ずのう\n• 冷静でプレッシャーに負けない',
            turtwig: '• てれや\n• りっぱ\n• かばう\n• 静かで強い心をもっている'
        },
        raid: {
            bossApproaching: 'ボス接近中',
            bossWarning: '   警告！',
            hp: 'HP: {percent}%',
            event: 'レイド',
            rank: 'ランク',
            raid: 'パーティー',
            timerLabel: 'イベント終了まで:',
            raidPack: 'レイドパック',
            stageInfo1: '探索してボスを見よう！',
            stageInfo2: '友だちとチームを組んでボスを倒そう！',
            requireGymPopup: {
                label1: '次のステージはランクのより高いトレーナー用だよ',
                label2: 'ジム {number} に到達して進もう！',
                button: 'レッツゴー'
            },
            party: {
                title: 'レイドパーティー',
                subtitle: '友だちとチームを組んでボスを倒そう！',
                expel: '追い出す',
                leave: '退出'
            },
            partyExpel: {
                confirm: 'このレイドメンバーを追放しますか？',
                expelled: 'プレイヤーがレイドパーティーから追放された'
            },
            partyLeave: {
                confirm: 'このレイドパーティーを退出しますか？',
                left: 'レイドパーティーを退出'
            },
            join: {
                title: 'このレイドパーティーに参加しますか？',
                subtitle: '現在のレイドステージですべての進行が失われます'
            },
            stage: 'ステージ {stage}',
            socialInvite: '{inviter} が、ステージ {number} の {boss} を倒すための助けを求めている！（残り HP {percent}%）',
            exploreBtn: '探索',
            revivePopup: {
                title: '大変だ！{pokemon}がケガをした！',
                question: '広告を見て続ける？',
                cancel: '退出',
                confirm: '蘇生'
            },
            bossRatingInfo: 'ステージ {stage}',
            battleScore: 'スコア',
            watchAdToBattle: {
                title: 'バトルするにはレイドパスが必要だ！',
                question: '広告を見て続ける？',
                confirm: '開始',
                cancel: '退出'
            },
            rankingTitle: 'レイドランキング',
            notEnoughPasses: '次のレイドパス発行まで: {remainingTime}',
            home: 'ジム',
            caution: '注意！',
            cautionSubtitle: 'このレイドステージは難易度が高いのでおススメしません。\n\nそれでも参加しますか？',
            defeatBoss: 'ボスを倒して開けよう',
            totalDamage: '合計ダメージ',
            invitePrompt: {
                title: 'バトルするにはレイドパスが必要だ！',
                subTitle: 'もっとメンバーを雇って、より早く{boss}を倒そう！'
            },
            tutorial: {
                msg1: '[b]キミのポケモンで勝利してボスにダメージを与えよう[/b]\n\nキミのポケモンが負けると、バトルは終了だ。出来るだけ長く生き残ろう！'
            },
            invitePopup: {
                title1: 'ポケモン メダリオンバトルに友だちを招待しよう！',
                title2: '友だちがインストールを完了すると、キミはシルバーパックを獲得するぞ！',
                title3: '{value}+ IV 確定'
            },
            rankingPopup: {
                bestScoreButton: 'スコア',
                totalDamageButton: '合計ダメージ'
            }
        },
        raidAnnouncement: {
            header: 'レイドイベント',
            message: '友だちとチームを組んでボスを倒そう！',
            reward: 'より高いステージに進めばレイド報酬もより良くなるぞ！'
        },
        resultScreen: {
            nextBadge: '次の\nバッジ',
            reward: '報酬',
            watchAd: '広告を見る',
            winner: '勝者！',
            victories: '勝利数',
            liveOppBonus: 'ライブ対戦相手ボーナス',
            quickMatchBonus: 'クイックマッチ ボーナス',
            score: 'スコア',
            totalDamage: '合計ダメージ'
        },
        settingScreen: {
            forfeit: '試合放棄',
            music: '音楽',
            pokemonPreview: 'ポケットモンスターを見る',
            privacyPolicy: 'プライバシーポリシー',
            settings: '設定',
            soundEffects: '効果音',
            supportId: 'サポート ID：{id}',
            termsOfService: '利用規約'
        },
        shopScreen: {
            claimFreePack: '受け取る',
            comingSoon: '近日\n登場！',
            medal: {
                item: 'メダル'
            },
            medalPack: {
                item: 'メダルパック'
            },
            freePack: {
                item: 'スターメダル'
            },
            adsMedal: {
                item: 'ポケメダル'
            },
            adMedal: {
                item: 'ポケメダル'
            },
            gymPack: {
                item: 'ポケパック'
            },
            guaranteed: '確定',
            left: '残り',
            freePackDescription: 'スターター ポケモン\nの可能性アリ',
            tapToOpen: 'タップして開く',
            notReady: 'このスターメダルはもう受け取っています。次のスターメダルは {h} 時間 {m} 分後に受け取ることができます。',
            silverPack: {
                item: 'シルバーパック'
            },
            guaranteedIv: '{guaranteedIv}+ IV 確定',
            gameCoin: 'トークンをトレード',
            exchange: {
                title: '交換所',
                refresh: '更新まで:',
                refreshBtn: '更新',
                selectToTrade: 'トレードするポケモンをタップして選択',
                select: '現在の価値',
                require: '必要な価値',
                trade: 'トレード'
            }
        },
        sslString: {
            btn_challengeNow: '今すぐチャレンジ',
            challenge: {
                text: '{challengerName} がポケモン メダリオンバトルでチャレンジしてきた'
            },
            bossDefeated: {
                text: '{player} が {boss} にトドメを刺した！報酬を回収しよう！'
            },
            btn_getReward: '受け取る'
        },
        starPack: {
            claim: '受け取る',
            cooldown: '新しいスターパック出現まで',
            countdownTime: '{h} 時間 {m} 分',
            title: 'スターパック'
        },
        taskScreen: {
            achievement: '実績',
            claimedReward: '受け取った！',
            countdownTime: '{h} 時間 {m} 分',
            daily: 'デイリー',
            tapToClaim: 'タップして\n受け取る',
            taskRestartIn: '任務再開まで：',
            tasks: '任務'
        },
        tier: {
            tier1: 'モンスターボール',
            tier2: 'スーパーボール',
            tier3: 'ハイパーボール'
        },
        type: {
            dragon: 'ドラゴン',
            electric: 'かみなり',
            fighting: 'ファイト',
            fire: 'ファイヤー',
            grass: 'グラス',
            normal: 'むしょく',
            psychic: 'サイキック',
            water: 'ウオーター'
        },
        raidName: {
            moltres: '溶岩モニュメント',
            zapdos: '閉ざされた駅',
            articuno: '氷結の入り口',
            mewtwo: '湖の迷宮',
            raikou: '雷鳴の嵐',
            entei: '燃え盛る炎',
            suicune: 'ゆううつな豪雨',
            deoxys: 'こうかつな侵略',
            regice: '氷結の要塞',
            regirock: '崩壊の砦',
            registeel: '鋼鉄の城塞',
            groudon: '原始的なポータル：陸上',
            kyogre: '原始的なポータル：海'
        },
        subscriptionTutorial: {
            title: '通知を受け取る',
            subtitle: '新しい情報を見逃すな！',
            caption1: 'Facebookのゲームアプリでポケモン メダリオンを開く',
            caption2: 'Facebookのゲーム設定を開く',
            caption3: 'メッセージを有効にする'
        }
    },
    'resources/strings/ms.json': {
        ability: {
            acid: 'Asid',
            ancientPower: 'Kuasa Kuno',
            aquaJet: 'Aqua Jet',
            aquaRing: 'Lingkaran Air',
            aquaTail: 'Ekor Air',
            aromatherapy: 'Aromaterapi',
            auraSphere: 'Aura Sfera',
            batonPass: 'Hantaran Baton',
            bite: 'Gigit',
            blazeKick: 'Tendangan Berapi',
            blizzard: 'Ribut Salji',
            bonemerang: 'Bumerang Tulang',
            braveBird1: 'Burung Berani',
            brickBreak: 'Pemecah Batu',
            bubble: 'Buih',
            bubbleBeam: 'Tembakan Buih',
            bulletSeed: 'Biji Peluru',
            closeCombat: 'Serangan Jarak Dekat',
            confusion: 'Keliru',
            counter: 'Serang Balas',
            crunch: 'Berderap',
            darkestLariat: 'Lariat Paling Gelap',
            dig: 'Gali',
            discharge: 'Nyahcas Elektrik',
            doubleKick: 'Tendangan Berganda',
            dreamEater: 'Pemakan Mimpi',
            drought: 'Panas Terik',
            earthquake: 'Gempa Bumi',
            ember: 'Bara',
            eruption: 'Letusan',
            fireBlast: 'Letusan Api',
            fireFang: 'Taring Berapi',
            fireSpin: 'Putaran Api',
            flamethrower: 'Semburan Api',
            flameWheel: 'Roda Berapi',
            flareBlitz2: 'Api Bertalu',
            flareBlitz3: 'Api Bertalu',
            forcePalm: 'Tamparan Kuasa',
            foresight: 'Pandangan Jauh',
            furyCutter: 'Potongan Kemarahan',
            futureSight: 'Bayangan Masa',
            guillotine1: 'Gilotin',
            gust: 'Angin Kencang',
            hammerArm: 'Tangan Tukul',
            harden: 'Mengeras',
            healPulse: 'Gelombang Penyembuh',
            flameCharge: 'Cas Api',
            heatCrash2: 'Pelanggaran Haba',
            heatCrash3: 'Pelanggaran Haba',
            hydroCannon: 'Meriam Hidro',
            hydroPump: 'Pam Hidro',
            hyperBeam2: 'Sinar Hiper',
            hypnosis: 'Hipnosis',
            iceBeam: 'Tembakan Ais',
            icePunch: 'Tumbukan Ais',
            icyWind: 'Angin Membeku',
            karateChop: 'Tangan Karate',
            lastResort1: 'Taktik Akhir',
            lavaPlume: 'Gumpalan Lava',
            leafBlade: 'Bilah Daun',
            leafStorm: 'Ribut Daun',
            leafTornado: 'Daun Tornado',
            leechSeed: 'Serapan Tenaga',
            lick: 'Ciuman Sayang',
            lowSweep: 'Libasan Rendah',
            luckyChant: 'Dikir Nasib',
            megahorn: 'Tanduk Mega',
            mindReader: 'Pembaca Minda',
            miracleEye: 'Pandangan Keajaiban',
            mirrorCoat: 'Lapisan Cermin',
            mudBomb: 'Bom Lumpur',
            muddyWater: 'Air Berlumpur',
            mudSlap: 'Tamparan Lumpur',
            mysticalFire: 'Api Mistik',
            outrage2: 'Kemarahan',
            outrage3: 'Kemarahan',
            overheat: 'Kepanasan Membara',
            payDay1: 'Hari Pembayaran',
            payDay2: 'Hari Pembayaran',
            petalBlizzard: 'Ribut Bunga',
            petalDance2: 'Tarian Bunga',
            petalDance3: 'Tarian Bunga',
            phantomForce: 'Kekuatan Khayalan',
            poisonJab: 'Tusukan Racun',
            poisonSting: 'Jarum Beracun',
            powerWhip: 'Libasan Kuasa',
            protect: 'Lindungi',
            psychic: 'Psikik',
            psywave: 'Bayangan Ombak',
            quickAttack: 'Serangan Laju',
            rainDance: 'Tarian Hujan',
            razorLeaf: 'Pisau Daun',
            razorShell: 'Pisau Cangkerang',
            rockTomb: 'Kubur Batu',
            rockWrecker: 'Pemecah Batu',
            seedBomb: 'Bom Benih',
            shadowBall: 'Bola Bayang',
            shadowSneak: 'Bayang Menyelinap',
            shellTrap: 'Perangkap Cengkerang',
            silverWind: 'Angin Perak',
            sing: 'Nyanyi',
            skyAttack1: 'Serangan Langit',
            skyAttack3: 'Serangan Langit',
            skyUppercut: 'Tumbukan Ke Langit',
            sleepPowder: 'Serbuk Tidur',
            solarBeam: 'Sinaran Solar',
            sparklingAria: 'Aria Bersinar',
            spikeCannon: 'Meriam Tusukan',
            spikes: 'Bilah',
            spikyShield: 'Perisai Pancang',
            spore: 'Spora',
            stealthRock: 'Batu Halimunan',
            stickyWeb: 'Sesawang Melekit',
            submission3: 'Penyerahan',
            sunnyDay: 'Hari Cerah',
            superpower: 'Kuasa Super',
            synthesis: 'Sintesis',
            takeDown1: 'Jatuhkan',
            takeDown2: 'Jatuhkan',
            thunder: 'Guruh',
            thunderbolt: 'Panah Petir',
            thunderShock: 'Renjatan Petir',
            topsyTurvy1: 'Tunggang-Terbalik',
            topsyTurvy2: 'Tunggang-Terbalik',
            twineedle2: 'Jarum Berkembar',
            vineWhip: 'Sebatan Akar',
            voltTackle1: 'Rempuhan Volt',
            voltTackle2: 'Rempuhan Volt',
            waterfall: 'Air Terjun',
            waterGun: 'Pistol Air',
            waterPulse: 'Gelombang Air',
            waterShuriken: 'Shuriken Air',
            wish: 'Hajat',
            withdraw: 'Masuk Cangkerang',
            woodHammer3: 'Tukul Kayu',
            wringOut2: 'Perah Keluar',
            wringOut3: 'Perah Keluar',
            xScissor: 'Gunting X',
            yawn: 'Menguap',
            zapCannon: 'Meriam Zap',
            flareBlitz1: 'Api Bertalu',
            airCutter: 'Pemotong Udara',
            airSlash: 'Libasan Udara',
            electricTerrain: 'Medan Elektrik',
            lockOn: 'Kunci',
            parabolicCharge1: 'Cas Parabolik',
            wildCharge1: 'Serbuan Cas Liar',
            psybeam: 'Bayangan Cahaya',
            sludgeBomb: 'BOM SELUT',
            thunderPunch: 'Tumbukan Guruh',
            mudShot: 'Tembakan Lumpur',
            willOWisp: 'Will-O-Wisp',
            spark: 'Percikan',
            thrash1: 'Menghancur',
            extremeSpeed: 'Kelajuan Pantas',
            nobleRoar2: 'Ngauman Kemuliaan',
            acidArmor: 'Perisai Asid',
            selfDestruct: 'Pemusnah Diri',
            explosion: 'letupan',
            psystrike: 'Gelombang Psikik',
            psychoBoost: 'Rangsangan Psiko',
            technoBlast: 'Letupan Tekno',
            steamEruption: 'Letusan Wap',
            bulldoze: 'Meratakan',
            spiritShackle: 'Perangkap Hantu',
            dynamicPunch: 'Tumbukan Dinamik',
            bounce: 'Melantun',
            sludge: 'Selut',
            absorb: 'Serap',
            fieryDance: 'Tarian Berapi',
            fireLash: 'Panahan api',
            painSplit: 'Belahan Sakit',
            powerGem: 'Gem Kuasa',
            machPunch: 'Tumbukan Mach',
            psychoCut: 'Belahan Psiko',
            metronome1: 'METRONOM',
            metronome2: 'METRONOM',
            moonlight: 'Cahaya Bulan',
            softBoiled: 'Separuh Masak',
            crossChop: 'Pancungan Bersilang',
            playRough: 'Main Kasar',
            powerUpPunch: 'Tumbukan Power-Up',
            rapidSpin: 'Putaran Tangkas',
            haze: 'Jerebu',
            nightSlash: 'Hayunan Gelap',
            iceShard: 'Ketulan Ais',
            frostBreath: 'Nafas Beku',
            hex: 'Sihir',
            agility: 'Ketangkasan',
            beatUp1: 'Memukul',
            pressure: 'Tekanan',
            earthPower: 'Kuasa Bumi',
            present: 'Hadiah',
            psyshock: 'Kejutan Psiko',
            grassKnot2: 'Simpulan Rumput',
            grassKnot3: 'Simpulan Rumput',
            moonblast: 'Letupan Bulan',
            zenHeadbutt: 'Tandukan Buah Fikiran',
            ionDeluge: 'Hujan Plasma',
            ironDefense: 'Pertahanan Besi',
            extrasensory: 'DeriaTambahan',
            darkPulse: 'Nadi Hitam',
            sacredFire: 'Api Suci',
            shadowPunch: 'Tumbukan Bayang',
            thunderFang: 'Taring Petir',
            poisonFang: 'Taring Beracun',
            crossPoison: 'Racun Bersilang',
            doubleHit1: 'Pukulan Dua Kali',
            doubleHit2: 'Pukulan Dua Kali',
            dive: 'Selam',
            fly: 'Terbang',
            hail: 'Hujan Batu',
            rockThrow: 'Lontaran Batu',
            rockSlide: 'Luncuran Batu',
            magnitude2: 'Magnitud',
            acrobatics: 'Akrobatik',
            sandstorm: 'Ribut Pasir',
            metalBurst2: 'Serpihan Logam',
            headSmash1: 'Hentaman Kepala',
            headSmash2: 'Hentaman Kepala',
            heavySlam2: 'Hempasan Berat',
            prehistoricCall: 'Seruan Prasejarah',
            dragonAscent: 'Kebangkitan Naga',
            auroraBeam: 'sinar aurora',
            brine: 'Air Masin',
            energyBall: 'Bebola Tenaga',
            smackDown: 'Tembak Jatuh',
            precipiceBlades: 'Ceracak Berbatu',
            originPulse: 'Gelombang Azali',
            glaciate: 'Pengglasieran',
            bulletPunch2: 'Tumbukan Peluru',
            doubleEdge1: 'Serangan Memudaratkan',
            dracoMeteor: 'Meteor Naga',
            oblivionWing: 'Sayap Oblivion',
            landsWrath: 'Amarah Bumi',
            geomancy: 'Geomansi',
            aerialAce: 'Serangan Tepat',
            lovelyKiss: 'Ciuman Sayang',
            conversion: 'Penukaran',
            dragonRush3: 'Serbuan Naga',
            iceFang: 'Taring Berais',
            healBell: 'Loceng Penyembuh',
            stoneEdge: 'Batu Tajam',
            slackOff1: 'Berehat',
            slackOff2: 'Berehat',
            uproar1: 'Bising',
            peck: 'patuk',
            magicalLeaf: 'Daun Magik',
            disarmingVoice: 'Suara Lembut',
            freezeDry: 'Membeku',
            pursuit: 'Mengejar',
            zingZap: 'Cucukan Renjatan'
        },
        abilityShortDesc: {
            clearance: 'Menghilangkan kuasa masuk',
            priority: 'Melawan sebelum kuasa digunakan',
            protect: 'Dilindungi daripada kehilangan',
            reveal: 'Dedahkan {value1} Pokémon yang Direhatkan'
        },
        abilityType: {
            clearance: 'Menghilangkan kuasa Sokongan dan Bahaya sebelum ia berkuatkuasa',
            priority: 'Melawan sebelum Pokémon Aktif lawan dapat menggunakan kuasanya',
            arena: '{value2} Pokémon Aktif mendapat {value1} CP',
            hazard: 'Pokémon Aktif lawan {value2} anda yang berikutnya kehilangan {value1} CP',
            protect: 'Pokémon dilindungi daripada kehilangan satu pusingan',
            reveal: 'Dedahkan {value1} Pokémon lawan anda yang Direhatkan',
            se: 'Dapatkan {value1}x CP terhadap {value2} Pokémon',
            transform: 'Ubah menjadi salinan Pokémon Aktif terakhir lawan anda',
            wish: '{value2} Pokémon Aktif anda yang berikutnya mendapat {value1} CP'
        },
        achievement: {
            collected: 'Kumpulkan {targetValue} Pokémon yang tersendiri',
            evolved: 'Ubah ansur {targetValue} Pokémon',
            play: 'Main {targetValue} Pertempuran Gim',
            sentToLab: 'Hantar {targetValue} Pokémon ke Makmal',
            win: 'Menang {targetValue} Pertempuran Gim'
        },
        adHouse: {
            0: {
                text1: 'Hantar Pokémon ke Makmal untuk mendapat Kandi',
                text2: 'Guna Kandi untuk ubah ansur Pokémon!'
            },
            1: {
                text1: 'Dedahkan Pokémon Simpanan!',
                text2: 'Remember: Pokémon are ordered left to right by CP!'
            },
            2: {
                text1: 'Lindungi Pokémon anda daripada bahaya',
                text2: 'Jadikan kuasa lawan anda tidak berbahaya!'
            },
            3: {
                text1: 'Keutamaan membenarkan anda melawan dengan segera',
                text2: 'Kalahkan Pokémon sebelum mereka dapat menggunakan kuasa mereka!'
            },
            4: {
                text1: 'Perkasakan Pokémon dalam Arena!',
                text2: 'Hanya satu Arena boleh digunakan pada satu-satu masa'
            },
            5: {
                text1: 'Bahaya Entri merosakkan Pokémon',
                text2: 'Sokongan Entri memulihkan Pokémon'
            },
            6: {
                text1: 'Hilangkan Bahaya dan Sokongan Entri!',
                text2: 'Berlaku sebelum kuasa entri memberi kesan'
            }
        },
        arenaScreen: {
            effectsCanceled: '{arena1} dan {arena2}\nterbatal!'
        },
        badge: {
            1: 'PELATIH',
            2: 'RUMPUT',
            3: 'API',
            4: 'AIR',
            5: 'ELEKTRIK',
            6: 'LAWAN',
            7: 'PSIKIK',
            8: 'NAGA',
            9: 'JUNGLE',
            10: 'GEYSER',
            11: 'PARI PARI'
        },
        badgeHistoryScreen: {
            badges: 'Lencana'
        },
        badgeTitle: {
            1: 'Pelatih',
            2: 'Rumput',
            3: 'Api',
            4: 'Air',
            5: 'Elektrik',
            6: 'Lawan',
            7: 'Psikik',
            8: 'Naga',
            9: 'Jungle',
            10: 'Geyser',
            11: 'Pari Pari'
        },
        badgeUnlock: {
            available: 'KINI TERSEDIA',
            gotBadge: 'ANDA MENDAPAT LENCANA {type}!',
            unlock: 'GIM {number} DIBUKA!'
        },
        bagScreen: {
            cannotBeUndone: 'Ini tidak boleh dibuat asal.',
            cannotEvolveEquipped: 'Pokémon ini berada dalam pasukan dan tidak boleh berubah ansur.',
            editTeam: 'EDIT PASUKAN',
            editTeamConfirmButton: 'SELESAI',
            error: {
                leaveConfirm: 'Adakah anda pasti mahu keluar?',
                noDupeFamily: 'Anda hanya boleh menggunakan satu Pokémon daripada keluarga {family} pada satu-satu masa!',
                teamFull: 'Pasukan anda sudah penuh!',
                teamateLimit: 'Anda hanya boleh menggunakan dua Pokémon {type}!',
                unableToSave: 'Tidak dapat menyimpan pasukan'
            },
            evolutionConfirm: 'Adakah anda pasti mahu\nmengubah ansur {pokemonName}?',
            evolveButton: 'UBAH ANSUR',
            evolvesFrom: 'Berubah ansur daripada {evolutionName}',
            filterModeTab: 'INFO',
            get: 'Tuntut',
            information: 'INFORMASI',
            selectPokemonFirst: 'Pilih medalion untuk dihantar ke makmal terlebih dahulu',
            sellPokemonBatchLimit: 'Anda tidak boleh menghantar lebih daripada {max} Pokémon ke Makmal pada satu-satu masa',
            sellPokemonInTeam: 'Pokémon ini berada dalam pasukan dan tidak boleh dihantar ke Makmal',
            send: 'Hantar',
            sendConfirmation1: 'Hantar {pokemonCount} Pokémon ke Makmal untuk {candiesSum}?',
            sendDisclaimer: 'Hantar Pokémon ke Makmal?',
            sendSuccesfull: 'Anda telah menghantar {pokemonCount} Pokémon ke Makmal untuk {candiesSum}',
            sendToLab: 'HANTAR KE MAKMAL',
            sendToLabConfirmButton: 'BATAL',
            topForMoreInfo: 'Sentuh pada Pokémon untuk menyemak info!',
            warning: {
                evolveEquipped: 'Mengubah ansur Pokémon ini akan mengeluarkannya daripada pasukan anda!',
                evolveEquippedQuestion: 'Adakah anda pasti mahu mengubah ansur?',
                teamNotReady1: 'Maaf, pasukan ini tidak sah!',
                teamNotReady2: 'Sila selesaikan pengeditan'
            },
            expand: 'Kembangkan Beg anda?',
            expandSucccess: 'Beg berjaya dikembangkan kepada {slot} slot'
        },
        callout: {
            opponentTurn: 'GILIRAN LAWAN',
            yourTurn: 'GILIRAN ANDA!'
        },
        challenge: {
            challengeBrag3: '{challenger} memusnahkan {opponent} dengan sepenuhnya!',
            challengeBrag2: '{challenger} memusnahkan {opponent} dengan mudah!',
            challengeBrag1: 'Ia agak setanding, tetapi {challenger} mengalahkan {opponent}!',
            challengeBrag0: '{challenger} dan {opponent} telah bertempur dengan sengit!'
        },
        challengeReferralPrompt: {
            header: 'Syabas kerana memenangi pertempuran Gim itu!',
            text: 'Tetapi bolehkah anda mengalahkan rakan anda?',
            button: 'Ya, saya boleh!'
        },
        challengeScreen: {
            title: 'Duel',
            subTitle: 'Cabar rakan anda dan dapat ganjaran!',
            battle: 'PERTEMPURAN',
            quickMatch: 'PERLAWANAN PANTAS',
            invite: 'JEMPUT',
            waitFor: 'Menantikan respons...',
            notFoundUser: 'Kami tidak dapat menemui mana-mana rakan yang bermain Pokémon Medallion Battle!',
            waitForPlayer: 'Menunggu pemain untuk respons...',
            switchAiTitle: 'Memulakan permainan',
            switchAiText: 'Sila tunggu...',
            noDoubleChallenge: 'Anda tidak boleh mencabar pemain yang sama dua kali berturut-turut',
            skipBtn: 'LANGKAU',
            loadingFriends: 'Memuatkan rakan...',
            alreadyPlayed1: 'Anda sudah pun mencabar pemain ini hari ini',
            alreadyPlayed2: 'Cabar orang baharu untuk mendapat mata!'
        },
        chatbot: {
            btn_play: 'Main Sekarang',
            btn_challengeNow: 'Cabar Sekarang',
            btn_claimNCandies: 'Tebus {amount} Kandi',
            desciptionLine1: 'Hidupkan peringatan dan',
            desciptionLine2: 'DAPATKAN FARFETCH\'D',
            message: 'Pokémon Medallion\nmungkin menghantar kepada anda pengumuman, petua\ndan banyak lagi. Anda boleh mematikan\nmesej dalam perbualan\npermainan.',
            messageHeader: 'Hidupkan Mesej Daripada\nMedalion Pokémon',
            notNow: 'bukan sekarang',
            reminders: 'Peringatan',
            thankYou: 'Terima kasih kerana bermain. Datang semula tidak lama lagi!',
            turnOn: 'hidupkan',
            claimFreePack: 'Tuntut',
            freePackRemider: 'Star Medal percuma anda sudah sedia!',
            '24hReminder': 'Berkembang untuk mendapatkan Pokémon yang lebih kuat, atas tanggungan kami!',
            '30hReminder': 'Selamat kembali! Pertempuran menarik menanti!',
            '36hReminder': '{player}, kami merindui anda! Datang semula dan bermain bersama kami!',
            '38hReminder': '{player}, Farfetch\'d telah muncul!',
            '46hReminder': 'Star Packs mengandungi Pokémon yang jarang ditemui. Cuba nasib anda!'
        },
        common: {
            fatal: 'Ralat mati: {error}',
            tapToContinue: 'Sentuh untuk teruskan',
            alreadyInvited: 'Anda sudah pun menjemput pemain ini hari ini'
        },
        daily: {
            coinSpent: 'Belanja {targetValue} PokéCoin',
            evolved: 'Ubah ansur {targetValue} Pokémon',
            play: 'Main {targetValue} Pertempuran Gim',
            sentToLab: 'Hantar {targetValue} Pokémon ke makmal',
            win: 'Menang {targetValue} Pertempuran Gim'
        },
        error: {
            candyOverflowWarning: 'Anda akan melebihi had untuk Kandi jika anda mengambil tindakan ini!',
            coinOverflowWarning: 'Anda akan melebihi had untuk PokéCoin jika anda mengambil tindakan ini!',
            noAdSupport: 'Maaf, tetapi peranti ini tidak menyokong iklan pada masa ini',
            noOpponent: 'Tidak dapat mencari lawan. Sila cuba semula sebentar lagi.',
            reconnectGiveUp: 'Sambungan permainan telah terputus, sila muat semula',
            unableToConnect: 'Tidak dapat mencapai pelayan',
            disconnectedInFight: 'Anda telah kehilangan sambungan rangkaian anda',
            unableToLoadAd: 'Tiada iklan yang tersedia. Cuba semula sebentar lagi.',
            noSpaceInBag: 'Tidak cukup ruang dalam Beg anda!\nHantar Pokémon ke Makmal untuk membebaskan ruang',
            notEnoughcandy: 'Tidak cukup Kandi!\nHantar Pokémon ke Makmal untuk mendapatkan lebih banyak lagi',
            notEnoughcoin: 'PokéCoin tidak mencukupi! Menang pertempuran untuk mendapatkan lebih banyak lagi',
            invalidTeam: 'Maaf, ini pasukan tidak sah! Sila selesaikan pengeditan.',
            raidClosed: 'Serang sudah tamat tempoh\n\nIkuti pengembaraan yang seterusnya!',
            raidClosedDetailed: 'Serang sudah tamat tempoh\n\nKembali dalam {h}j {m}m untuk pengembaraan yang seterusnya!',
            raidFull: 'Maaf, pasukan Serang ini sudah penuh',
            joinRaidCooldownError: 'Perlahankan sedikit, anda terlalu cepat menyertai pasukan Serang!\n\nCuba lagi dalam masa {hours}j {minutes}m'
        },
        flag: {
            legendary: 'Legenda'
        },
        ftue: {
            addToTeam: 'Mari kita tambah {pokemon} pada pasukan sebelum memulakan pertempuran lain',
            battle2: 'Cuba {pokemon} dalam pertempuran!',
            claimReward: 'Tuntut ganjaran Tugasan anda sebelum memulakan pertempuran lain',
            evolve: 'Ubah ansur Pokémon bagi meningkatkan CP dan mempelajari kuasa!\n\nKetik untuk buka Beg anda.',
            howEvolve: 'Harga Evolusi ialah Kandi.\n\nDapatkan Kandi dengan menghantar Pokémon ke Makmal.',
            letsBattle: '[b]Selamat datang ke\nPokémon Medallion Battle![/b]\n\nMenang [b]3[/b] perlawanan untuk menjadi pemenang!',
            opponentName: 'Jurulatih Pesaing',
            playpk1: '[b]Mari kita bermain {pokemon}[/b]\n\nPokémon dengan CP yang lebih tinggi menang',
            playpk2: '[b]Anda main dahulu selepas menang. Hantarkan {pokemon}![/b]',
            playpk3: '[b]Pilih {pokemon}[/b]\n\nSesetengah Pokémon mempunyai Kuasa\nSentuh padanya untuk mengetahui lebih lanjut',
            playStarter: '[b]Mari kita selesaikan ini dengan {pokemon}![/b]\n\nSangat Berkesan meningkatkan CP terhadap jenis Pokémon.',
            playStarter2: '[b]Mari kita selesaikan ini dengan {pokemon}![/b]',
            superEffective: 'Kuasa {ability} {pokemon} menggalak CP nya terhadap Pokémon {type}',
            protect: 'Kuasa Metapod {ability} melindunginya  daripada kalah!',
            tryPokemon: 'Cuba {pokemon}.\n\nSentuh TEMPUR untuk memulakan perlawanan.',
            removeMedalFromTeam: 'Keluarkan Pokémon daripada pasukan anda untuk memberi laluan kepada {pokemon}',
            addMedalToTeam: 'Sentuh {pokemon} untuk menambahnya pada pasukan anda',
            completeTeam: 'Lengkapkan pasukan anda dengan mengetik Pokémon yang tidak dipilih'
        },
        gachaScreen: {
            note: 'Capai Gimnasium yang berikutnya untuk membuka Pokémon baharu!',
            noteStarPack: 'Buka Star Pack untuk mengumpulsemua Pemula!'
        },
        general: {
            cancel: 'Batal',
            close: 'Tutup',
            countdownDHTime: '{d}h {h}j',
            countdownHMTime: '{h}j {m}m',
            countdownMSTime: '{m}m {s}s',
            done: 'Selesai',
            doneExclamation: 'Selesai!',
            errorHappened: 'Ralat telah berlaku\n{error}',
            get: 'TUNTUT',
            go: 'PERGI',
            leave: 'Keluar',
            noButton: 'TIDAK',
            off: 'MATI',
            ok: 'OK',
            on: 'HIDUP',
            proceed: 'Teruskan',
            revert: 'Kembali',
            stay: 'Kekal',
            team: 'Pasukan',
            yesButton: 'YA',
            score: 'Skor',
            idle: 'Melahu'
        },
        gifts: {
            dailyLimit: 'Terima kasih tetapi anda telah pun membantu 3/3 kali hari ini. Semak semula esok!',
            expired: 'Maaf, tetapi permintaan ini telah tamat tempoh. Lihat sama ada orang lain memerlukan bantuan.',
            sourceLimit: 'Anda telah pun menuntut hadiah daripada pemain ini hari ini!\nSemak semula esok.',
            gotItem: 'Anda dapat {item} daripada {friend}!',
            help: {
                candy: 'Bantu Mimikyu membuat kawan dengan Kandi',
                coins: 'Bantu Meowth memulangkan syiling yang "dipinjamnya"',
                starMedal: 'Bantu Eevee mencari jurulatih untuk telur-telur ini'
            },
            header: 'Beri rakan anda hadiah Pokémon!',
            sendAll: 'HANTAR SEMUA',
            send: 'HANTAR',
            sendItem: 'Hantar {item} kepada kawan!',
            title: 'Hadiah',
            yourRequest: 'Maaf, tetapi ini permintaan anda. Lihat sama ada orang lain memerlukan bantuan.',
            gotItemInMailbox: '{item} telah dimasukkan ke dalam Peti Mel anda.\nAnda menghantar {giftBack} dan hadiah semula!',
            gotItemAndGiftSend: 'Anda mendapat {item}\nAnda menghantar {giftBack} dan hadiah semula!',
            gotItemAndGiftRespond: 'Anda mendapat {item}\nAnda menghantar {giftBack} semula!'
        },
        gym: {
            1: 'Trainer Town',
            2: 'Greenwood Grove',
            3: 'Scorchfire Summit',
            4: 'Clearwater Coast',
            5: 'Power Plant',
            6: 'Dustrock Dojo',
            7: 'Shadowmoss Shrine',
            8: 'Dragon\'s Den',
            9: 'Silverglade Safari',
            10: 'Mistwreath Mountains',
            11: 'Mooncrest Meadow',
            final: 'Piala Juara',
            title: 'Gim {gymId}:'
        },
        landingScreen: {
            battle: 'PERTEMPURAN',
            inviteBtn: 'JEMPUT',
            nextBadge: 'Gim Berikutnya',
            team: 'PASUKAN',
            challengeBtn: 'TARUNG',
            rating: 'Rating:',
            rank: 'Kedudukan:'
        },
        leaderboard: {
            cannotLoad: 'Gagal untuk mendapatkan leaderboard',
            requesting: 'Meminta leaderboard...',
            seasonNumber: 'Kedudukan Musim {number}'
        },
        mailbox: {
            emptyMailboxMessage: 'Peti Mel Anda Tidak Berisi',
            button: {
                claim: 'TUNTUT',
                read: 'BACA'
            },
            expiration: 'Tamat tempoh dalam {h}j {m}m',
            expired: 'Tamat Tempoh',
            referralBonus: {
                title: 'Terima kasih!',
                body: 'Peroleh {number}{coinSymbol} setiap kali rakan anda menuntut hadiah!'
            },
            csGift: {
                title: 'Sokongan',
                body: 'Daripada pasukan Pokémon Medallion Battle',
                default: {
                    title: 'Sokongan',
                    body: 'Daripada pasukan Pokémon Medallion Battle'
                },
                sorry: {
                    title: 'Maaf!',
                    body: 'Pampasan bagi kesukaran teknikal'
                }
            },
            gift: {
                title: 'Hadiah',
                body: 'Rakan anda menghantar hadiah kepada anda'
            },
            raidReward: {
                title: 'Pek Serangan - Tahap {stage}',
                body: 'Ganjaran kerana membantu mengalahkan {bossName}!'
            },
            raidHighScore: {
                title: 'Skor Tinggi - Tahap {stage}',
                body: 'Ganjaran bagi skor tertinggi #{rank} anda!'
            },
            raidAnnouncement: {
                title: 'Peristiwa Serangan - {raidName}',
                body: '{bossName} telah dilihat! Bersatu untuk mengalahkannya!'
            },
            referralSilverPack: {
                title: 'Terima kasih!',
                body: 'Ganjaran kerana merekrut rakan'
            },
            subscriptionTutorial: {
                title: 'Dapatkan Pemberitahuan',
                body: 'Jangan terlepas apa-apa!'
            },
            raidTotalDamage: {
                title: 'Skor Tinggi - Tahap {stage}',
                body: 'Anda mendapat {amount}x {rewardIcon} kerana kedudukan #{rank} anda!'
            },
            lbReward: {
                global: {
                    title: 'Kedudukan Global',
                    body: 'Ganjaran bagi kedudukan global #{rank} anda!'
                },
                region: {
                    title: 'Kedudukan dalam Negara',
                    body: 'Ganjaran bagi kedudukan negara #{rank} anda!'
                }
            }
        },
        maintenance: {
            details: 'Maaf, kami sedang\nmenjalankan penyelenggaraan kecil.',
            title: 'Akan kembali tidak lama lagi!'
        },
        navBar: {
            bag: 'BEG',
            battle: 'PERTEMPURAN',
            challenge: 'TARUNG',
            mail: 'MEL',
            pokedex: 'POKÉDEX',
            shop: 'BELI'
        },
        noFriendReferralPrompt: {
            button: 'OK',
            header1: 'Pokémon Medallion lebih seronok bersama rakan-rakan!',
            text1: 'Jemput mereka untuk bermain bersama anda',
            text2: 'Duel rakan-rakan anda dan dapatkan peluang untuk memenangi Pikachu yang jarang ditemui!'
        },
        notification: {
            defaultPlay: {
                btn: 'Main Sekarang'
            },
            defaultClaim: {
                btn: 'Tuntut'
            },
            gift_candy: {
                btn: 'Tuntut {count} Kandi',
                text: 'Mimikyu ada Kandi untuk anda. Adakah anda akan menjadi rakannya?'
            },
            gift_coins: {
                btn: 'Tuntut {count} PokéCoin',
                text: 'Meowth ada beberapa PokéCoin milik anda...'
            },
            gift_starMedal: {
                btn: 'Tuntut Medal',
                text: '{friend} mempunyai hadiah untuk anda!'
            },
            gift_reward: {
                text: '{friend} says thanks with a gift!'
            },
            simpleThanks: {
                btn: 'Main Sekarang',
                text: 'Terima kasih kerana bermain. Datang semula tidak lama lagi!'
            },
            shareMedal: {
                btn: 'Main Sekarang',
                text: 'Periksa {pokemon} saya!'
            },
            whichStarter: {
                text: 'Pokémon Pemula manakah anda?'
            },
            win: {
                text: '{playerFirstName}\'s {myPokemon} menjatuhkan {opposingPokemon}!'
            },
            winBy1: {
                text: 'Ia agak setanding, tetapi {attacker} mengalahkan {defender}!'
            },
            winBy2: {
                text: '{attacker}\'s {pokemon} menjatuhkan {defenderPokemon}!'
            },
            winBy3: {
                text: '{attacker} memusnahkan {defender} dengan sepenuhnya!'
            },
            lose: {
                text: '{defender} berjaya menangkis {attacker} dengan {defenderPokemon}!'
            },
            challenge: {
                text: '{challengerName} mencabar anda ke Pokémon Medallion Battle'
            },
            shareBadge: {
                text: 'Akhirnya, saya mendapat Lencana {badge}!'
            },
            sharePack: {
                text: 'Wow! Periksa hasil saya!'
            }
        },
        pokedexEntry: {
            evolvesInto: 'Ubah ansur menjadi {evolutionName}',
            finalEvolution: 'Ubah ansur Terakhir',
            height: 'Ketinggian',
            moreInfo: 'Kumpul untuk Mengetahui Lebih Lanjut',
            pokemonIllustrator: 'Pelukis ilustrasi: {illustrator}',
            unknownValue: '???',
            weight: 'Berat'
        },
        pokemon: {
            alomomola: 'Alomomola',
            ariados: 'Ariados',
            articuno: 'Articuno',
            bayleef: 'Bayleef',
            beedrill: 'Beedrill',
            bellossom: 'Bellossom',
            blastoise: 'Blastoise',
            blaziken: 'Blaziken',
            blitzle: 'Blitzle',
            braixen: 'Braixen',
            brionne: 'Brionne',
            bulbasaur: 'Bulbasaur',
            bunnelby: 'Bunnelby',
            butterfree: 'Butterfree',
            camerupt: 'Camerupt',
            carbink: 'Carbink',
            caterpie: 'Caterpie',
            celebi: 'Celebi',
            charizard: 'Charizard',
            charmander: 'Charmander',
            charmeleon: 'Charmeleon',
            chesnaught: 'Chesnaught',
            chespin: 'Chespin',
            chikorita: 'Chikorita',
            chimchar: 'Chimchar',
            cloyster: 'Cloyster',
            combusken: 'Combusken',
            corsola: 'Corsola',
            croagunk: 'Croagunk',
            crobat: 'Crobat',
            croconaw: 'Croconaw',
            cubone: 'Cubone',
            cyndaquil: 'Cyndaquil',
            dartrix: 'Dartrix',
            decidueye: 'Decidueye',
            dedenne: 'Dedenne',
            delibird: 'Delibird',
            delphox: 'Delphox',
            deoxys: 'Deoxys',
            dewott: 'Dewott',
            diggersby: 'Diggersby',
            ditto: 'Ditto',
            donphan: 'Donphan',
            dragonair: 'Dragonair',
            dragonite: 'Dragonite',
            dratini: 'Dratini',
            ducklett: 'Ducklett',
            duosion: 'Duosion',
            eevee: 'Eevee',
            electabuzz: 'Electabuzz',
            electivire: 'Electivire',
            electrike: 'Electrike',
            elekid: 'Elekid',
            emboar: 'Emboar',
            empoleon: 'Empoleon',
            exeggcute: 'Exeggcute',
            exeggutor: 'Exeggutor',
            farfetchd: 'Farfetch\'d',
            fearow: 'Fearow',
            feebas: 'Feebas',
            fennekin: 'Fennekin',
            feraligatr: 'Feraligatr',
            flareon: 'Flareon',
            fletchinder: 'Fletchinder',
            fletchling: 'Fletchling',
            froakie: 'Froakie',
            frogadier: 'Frogadier',
            froslass: 'Froslass',
            gastly: 'Gastly',
            genesect: 'Genesect',
            gengar: 'Gengar',
            glalie: 'Glalie',
            gloom: 'Gloom',
            golbat: 'Golbat',
            golduck: 'Golduck',
            greninja: 'Greninja',
            grimer: 'Grimer',
            grotle: 'Grotle',
            grovyle: 'Grovyle',
            gyarados: 'Gyarados',
            haunter: 'Haunter',
            heatmor: 'Heatmor',
            heliolisk: 'Heliolisk',
            helioptile: 'Helioptile',
            heracross: 'Heracross',
            'ho-oh': 'Ho-Oh',
            hoppip: 'Hoppip',
            horsea: 'Horsea',
            incineroar: 'Incineroar',
            infernape: 'Infernape',
            inkay: 'Inkay',
            ivysaur: 'Ivysaur',
            jolteon: 'Jolteon',
            jumpluff: 'Jumpluff',
            jynx: 'Jynx',
            kakuna: 'Kakuna',
            kingdra: 'Kingdra',
            kricketot: 'Kricketot',
            kricketune: 'Kricketune',
            kyurem: 'Kyurem',
            lapras: 'Lapras',
            larvesta: 'Larvesta',
            litleo: 'Litleo',
            litten: 'Litten',
            lucario: 'Lucario',
            lugia: 'Lugia',
            lunatone: 'Lunatone',
            machamp: 'Machamp',
            machoke: 'Machoke',
            machop: 'Machop',
            magcargo: 'Magcargo',
            magikarp: 'Magikarp',
            magmar: 'Magmar',
            magnemite: 'Magnemite',
            magneton: 'Magneton',
            magnezone: 'Magnezone',
            malamar: 'Malamar',
            manectric: 'Manectric',
            maractus: 'Maractus',
            marowak: 'Marowak',
            marshtomp: 'Marshtomp',
            meganium: 'Meganium',
            meowth: 'Meowth',
            metapod: 'Metapod',
            mew: 'Mew',
            mewtwo: 'Mewtwo',
            milotic: 'Milotic',
            mimikyu: 'Mimikyu',
            moltres: 'Moltres',
            monferno: 'Monferno',
            morelull: 'Morelull',
            mudkip: 'Mudkip',
            muk: 'Muk',
            natu: 'Natu',
            ninetales: 'Ninetales',
            numel: 'Numel',
            oddish: 'Oddish',
            onix: 'Onix',
            oshawott: 'Oshawott',
            paras: 'Paras',
            parasect: 'Parasect',
            persian: 'Persian',
            phanpy: 'Phanpy',
            pichu: 'Pichu',
            pidgeot: 'Pidgeot',
            pidgeotto: 'Pidgeotto',
            pidgey: 'Pidgey',
            pignite: 'Pignite',
            pikachu: 'Pikachu',
            pinsir: 'Pinsir',
            piplup: 'Piplup',
            politoed: 'Poliwrath',
            poliwag: 'Poliwag',
            poliwhirl: 'Poliwhirl',
            poliwrath: 'Politoed',
            ponyta: 'Ponyta',
            popplio: 'Popplio',
            primarina: 'Primarina',
            prinplup: 'Prinplup',
            psyduck: 'Psyduck',
            pyroar: 'Pyroar',
            quagsire: 'Quagsire',
            quilava: 'Quilava',
            quilladin: 'Quilladin',
            raichu: 'Raichu',
            rapidash: 'Rapidash',
            reuniclus: 'Reuniclus',
            rhydon: 'Rhydon',
            rhyhorn: 'Rhyhorn',
            rhyperior: 'Rhyperior',
            riolu: 'Riolu',
            rowlet: 'Rowlet',
            salandit: 'Salandit',
            salazzle: 'Salazzle',
            samurott: 'Samurott',
            sceptile: 'Sceptile',
            seadra: 'Seadra',
            serperior: 'Serperior',
            servine: 'Servine',
            shellder: 'Shellder',
            shiinotic: 'Shiinotic',
            shuckle: 'Shuckle',
            skiploom: 'Skiploom',
            slowbro: 'Slowbro',
            slowking: 'Slowking',
            slowpoke: 'Slowpoke',
            slugma: 'Slugma',
            snivy: 'Snivy',
            snorlax: 'Snorlax',
            snorunt: 'Snorunt',
            solosis: 'Solosis',
            solrock: 'Solrock',
            spearow: 'Spearow',
            spinarak: 'Spinarak',
            squirtle: 'Squirtle',
            stunfisk: 'Stunfisk',
            swampert: 'Swampert',
            swanna: 'Swanna',
            talonflame: 'Talonflame',
            tepig: 'Tepig',
            torchic: 'Torchic',
            torracat: 'Torracat',
            torterra: 'Torterra',
            totodile: 'Totodile',
            toxicroak: 'Toxicroak',
            treecko: 'Treecko',
            tropius: 'Tropius',
            turtonator: 'Turtonator',
            turtwig: 'Turtwig',
            typhlosion: 'Typhlosion',
            vaporeon: 'Vaporeon',
            venusaur: 'Venusaur',
            vileplume: 'Vileplume',
            volcanion: 'Volcanion',
            volcarona: 'Volcarona',
            vulpix: 'Vulpix',
            wailmer: 'Wailmer',
            wailord: 'Wailord',
            wartortle: 'Wartortle',
            weedle: 'Weedle',
            wishiwashi: 'Wishiwashi',
            wobbuffet: 'Wobbuffet',
            wooper: 'Wooper',
            wynaut: 'Wynaut',
            xatu: 'Xatu',
            zapdos: 'Zapdos',
            zebstrika: 'Zebstrika',
            zubat: 'Zubat',
            raikou: 'Raikou',
            entei: 'Entei',
            suicune: 'Suicune',
            houndour: 'Houndour',
            houndoom: 'Houndoom',
            teddiursa: 'Teddiursa',
            ursaring: 'Ursaring',
            mareep: 'Mareep',
            flaaffy: 'Flaaffy',
            ampharos: 'Ampharos',
            misdreavus: 'Misdreavus',
            mismagius: 'Mismagius',
            skarmory: 'Skarmory',
            larvitar: 'Larvitar',
            pupitar: 'Pupitar',
            tyranitar: 'Tyranitar',
            gligar: 'Gligar',
            gliscor: 'Gliscor',
            sneasel: 'Sneasel',
            weavile: 'Weavile',
            azurill: 'Azurill',
            marill: 'Marill',
            azumarill: 'Azumarill',
            bronzor: 'Bronzor',
            bronzong: 'Bronzong',
            steelix: 'Steelix',
            growlithe: 'Growlithe',
            arcanine: 'Arcanine',
            pineco: 'Pineco',
            forretress: 'Forretress',
            togedemaru: 'Togedemaru',
            shroomish: 'Shroomish',
            breloom: 'Breloom',
            happiny: 'Happiny',
            chansey: 'Chansey',
            ralts: 'Ralts',
            kirlia: 'Kirlia',
            gallade: 'Gallade',
            gardevoir: 'Gardevoir',
            cleffa: 'Cleffa',
            clefairy: 'Clefairy',
            clefable: 'Clefable',
            wingull: 'Wingull',
            pelipper: 'Pelipper',
            lotad: 'Lotad',
            lombre: 'Lombre',
            ludicolo: 'Ludicolo',
            meditite: 'Meditite',
            medicham: 'Medicham',
            beldum: 'Beldum',
            metang: 'Metang',
            metagross: 'Metagross',
            baltoy: 'Baltoy',
            claydol: 'Claydol',
            sableye: 'Sableye',
            duskull: 'Duskull',
            dusclops: 'Dusclops',
            dusknoir: 'Dusknoir',
            jirachi: 'Jirachi',
            aipom: 'Aipom',
            ambipom: 'Ambipom',
            slakoth: 'Slakoth',
            vigoroth: 'Vigoroth',
            slaking: 'Slaking',
            torkoal: 'Torkoal',
            staryu: 'Staryu',
            starmie: 'Starmie',
            regice: 'Regice',
            geodude: 'Geodude',
            graveler: 'Graveler',
            golem: 'Golem',
            regirock: 'Regirock',
            aron: 'Aron',
            lairon: 'Lairon',
            aggron: 'Aggron',
            porygon: 'Porygon',
            porygon2: 'Porygon2',
            porygonz: 'Porygon-Z',
            registeel: 'Registeel',
            cranidos: 'Cranidos',
            rampardos: 'Rampardos',
            shieldon: 'Shieldon',
            bastiodon: 'Bastiodon',
            tyrunt: 'Tyrunt',
            tyrantrum: 'Tyrantrum',
            groudon: 'Groudon',
            rayquaza: 'Rayquaza',
            aerodactyl: 'Aerodactyl',
            omanyte: 'Omanyte',
            omastar: 'Omastar',
            tirtouga: 'Tirtouga',
            carracosta: 'Carracosta',
            carvanha: 'Carvanha',
            sharpedo: 'Sharpedo',
            kyogre: 'Kyogre',
            lileep: 'Lileep',
            cradily: 'Cradily',
            anorith: 'Anorith',
            armaldo: 'Armaldo',
            scyther: 'Scyther',
            scizor: 'Scizor',
            xerneas: 'Xerneas',
            swablu: 'Swablu',
            altaria: 'Altaria',
            togepi: 'Togepi',
            togetic: 'Togetic',
            togekiss: 'Togekiss',
            bagon: 'Bagon',
            shelgon: 'Shelgon',
            salamence: 'Salamence',
            yveltal: 'Yveltal',
            kabuto: 'Kabuto',
            kabutops: 'Kabutops',
            archen: 'Archen',
            archeops: 'Archeops',
            gible: 'Gible',
            gabite: 'Gabite',
            garchomp: 'Garchomp',
            zygarde: 'Zygarde',
            amaura: 'Amaura',
            aurorus: 'Aurorus'
        },
        popin: {
            socialGiftPromptHigh: {
                text: 'Beri rakan anda hadiah Pokémon!',
                cta: 'OK'
            },
            challengePrompt: {
                text: 'Syabas kerana memenangi pertempuran Gim itu!',
                text2: 'Tetapi bolehkah anda mengalahkan rakan anda?',
                cta: 'Ya, saya boleh!'
            },
            challengeInvite: {
                text: 'Lawan rakan anda dan anda boleh mendapat {pokemon} luar biasa!',
                cta: 'OK'
            }
        },
        quiz: {
            playNow: 'Mari Kita Main!',
            share: 'KONGSI',
            shareMsg: 'adalah seperti {nature}',
            playerIs: '{player} ialah',
            tap: 'Sentuh untuk mengetahui lebih lanjut!',
            tryAgain: 'CUBA SEMULA',
            whichStarter: 'Pokémon Pemula manakah anda?',
            yourPersonality: '{player},\npersonaliti {nature} anda sepadan'
        },
        quizResult: {
            bulbasaur: 'Sopan Santun',
            charmander: 'Lancang',
            chespin: 'Relaks',
            chikorita: 'Jinak',
            chimchar: 'Buas',
            cyndaquil: 'Penakut',
            fennekin: 'Degil',
            froakie: 'Berhatii-hati',
            litten: 'Kesunyian',
            mudkip: 'Tak Menentu',
            oshawott: 'Nakal',
            piplup: 'Bersederhana',
            popplio: 'Bersahaja',
            rowlet: 'Kuat Berusaha',
            snivy: 'Serius',
            squirtle: 'Gagah',
            tepig: 'Tergesa-Gesa',
            torchic: 'Berani',
            totodile: 'Periang',
            treecko: 'Lemah-Lembut',
            turtwig: 'Pemalu'
        },
        quizShare: {
            bulbasaur: '• Sopan Santun\n• Boleh dipercayai\n• Praktikal\n• Sentiasa sudi membantu',
            charmander: '• Lancang\n• Optimistik\n• Bersemangat waja\n• Tidak membenarkan apa-apa menjadi penghalang kepada kejayaan!',
            chespin: '• Relaks\n• Toleran\n• Berkarisma\n• Sungguh tenang, tetapi mempunyai sifat berang yang tersembunyi!',
            chikorita: '• Jinak\n• Sensitif\n• Melindungi\n• Cepat untuk mempercayai; personaliti yang mesra dan prihatin',
            chimchar: '• Buas\n• Kreatif\n• Bersemangat\n• Sentiasa ceria!',
            cyndaquil: '• Penakut\n• Berhati-hati\n• Bertimbang rasa\n• Tidak suka keluar rumah dan suka berada dalam kalangan kumpulan yang rapat sahaja',
            fennekin: '• Degil\n• Baik Hati\n• Setia\n• Mempunyai pendirian yang teguh dan semangat setiakawan yang tinggi',
            froakie: '• Berhatii-hati\n• Intuitif\n• Bijak\n• Mempunyai kebolehan luar biasa untuk mengubah kekalahan menjadi kejayaan',
            litten: '• Kesunyian\n• Berprinsip\n• Boleh Diharapkan\n• Mengikuti keyakinan diri, ke mana sahaja yang dibawa',
            mudkip: '• Tak Menentu\n• Rajin\n• Perseptif\n• Sentiasa penuh dengan idea dan sibuk!',
            oshawott: '• Nakal\n• Menawan\n• Suka godek\n• Mencairkan hati dengan senyuman yang nakal',
            piplup: '• Bersederhana\n• Altruistik\n• Membantu\n• Pendengar terbaik',
            popplio: '• Bersahaja\n• Berwawasan\n• Berseni\n• Mempercayai dunia ini ialah kanvas kita',
            rowlet: '• Kuat Berusaha\n• Inovatif\n• Wajar\n• Penyelesai masalah yang sentiasa mempunyai rancangan',
            snivy: '• Serius\n• Anggun\n• Berterus-terang\n• Tidak suka diperkecilkan',
            squirtle: '• Gagah\n• Idealistik\n• Pemimpin semula jadi\n• Sentiasa bangkit selepas ditumbangkan',
            tepig: '• Tergesa-Gesa\n• Lantang\n• Sentiasa lapar\n• Makan dahulu, soal kemudian!',
            torchic: '• Berani\n• Suka Cabaran\n• Mempercayai\n• Sentiasa mencari cabaran baharu!',
            totodile: '• Periang\n• Spontan\n• Bertenaga\n• Boleh menghiburkan orang lain dalam apa jua keadaan!',
            treecko: '• Lemah-Lembut\n• Yakin\n• Analitik\n• Sentiasa tenang di bawah tekanan',
            turtwig: '• Pemalu\n• Dihormati\n• Melindungi\n• Rendah diri dengan kekuatan dalaman yang hebat'
        },
        raid: {
            bossApproaching: 'BOS MENGHAMPIRI',
            bossWarning: '   AMARAN!',
            hp: 'HP: {percent}%',
            event: 'SERANG',
            rank: 'KEDUDUKAN',
            raid: 'PARTI',
            timerLabel: 'Acara tamat:',
            raidPack: 'Pek Serangan',
            stageInfo1: 'Teroka untuk mendedahkan Bos!',
            stageInfo2: 'Bersatu dengan rakan-rakan untuk mengalahkan Bos!',
            requireGymPopup: {
                label1: 'Tahap berikutnya untuk jurulatih berpangkat tinggi',
                label2: 'Capai Gim {number} untuk teruskan!',
                button: 'JOM PERGI'
            },
            party: {
                title: 'Parti Serang',
                subtitle: 'Bersatu dengan rakan-rakan untuk mengalahkan Bos!',
                expel: 'PECAT',
                leave: 'KELUAR'
            },
            partyExpel: {
                confirm: 'Adakah anda pasti mahu memecat ahli Serang ini?',
                expelled: 'Pemain dipecat daripada pasukan Serang'
            },
            partyLeave: {
                confirm: 'Adakah anda pasti mahu meninggalkan pasukan Serang ini?',
                left: 'Anda meninggalkan pasukan Serang'
            },
            join: {
                title: 'Adakah anda ingin menyertai pasukan Serang ini?',
                subtitle: 'Anda akan hilang semua kemajuan pada tahap Serang semasa'
            },
            stage: 'Tahap {stage}',
            socialInvite: '{inviter} memerlukan bantuan anda untuk mengalahkan {boss} pada Tahap {number}! ({percent}% HP yang tinggal)',
            exploreBtn: 'TEROKA',
            revivePopup: {
                title: 'Oh tidak! {pokemon} telah tercedera!',
                question: 'Tonton iklan untuk teruskan?',
                cancel: 'KELUAR',
                confirm: 'HIDUPKAN'
            },
            bossRatingInfo: 'Tahap {stage}',
            battleScore: 'Skor',
            watchAdToBattle: {
                title: 'Anda  memerlukan Pas Serang untuk bertempur!',
                question: 'Tonton iklan untuk teruskan?',
                confirm: 'PERGI',
                cancel: 'KELUAR'
            },
            rankingTitle: 'Kedudukan Serangan',
            notEnoughPasses: 'Pas Serang yang berikutnya dalam masa: {remainingTime}',
            home: 'GIM',
            caution: 'AWAS!',
            cautionSubtitle: 'Kesukaran tahap Serang ini tidak disyorkan untuk anda\n\nAdakah anda pasti ingin turut serta?',
            defeatBoss: 'Kalahkan Bos untuk buka',
            totalDamage: 'Jumlah Kerosakan',
            invitePrompt: {
                title: 'Anda  memerlukan Pas Serang untuk bertempur!',
                subTitle: 'Rekrut ahli baharu untuk mengalahkan {boss} lebih cepat!'
            },
            tutorial: {
                msg1: '[b]Menang dengan Pokémon anda untuk menghancurkan Bos[/b]\nJika mana-mana Pokémon anda kalah, pertempuran akan tamat. Cuba bertahan seberapa lama yang boleh!'
            },
            invitePopup: {
                title1: 'Jemput rakan-rakan anda untuk bermain Pokémon Medallion Battle',
                title2: 'Selepas mereka memasangnya, anda akan mendapat SILVER PACK!',
                title3: 'Dijamin {value}+ IV'
            },
            rankingPopup: {
                bestScoreButton: 'Skor',
                totalDamageButton: 'JUMLAH KEROSAKAN'
            }
        },
        raidAnnouncement: {
            header: 'Peristiwa Serangan',
            message: 'Bersatu dengan rakan-rakan untuk mengalahkan Bos!',
            reward: 'Ganjaran serangan bertambah baik apabila anda maju ke tahap yang lebih tinggi!'
        },
        resultScreen: {
            nextBadge: 'BERIKUTNYA\nLENCANA',
            reward: 'GANJARAN',
            watchAd: 'TONTON IKLAN',
            winner: 'Pemenang!',
            victories: 'Kemenangan',
            liveOppBonus: 'Bonus Lawan Langsung',
            quickMatchBonus: 'Bonus Perlawanan Pantas',
            score: 'SKOR',
            totalDamage: 'JUMLAH KEROSAKAN'
        },
        settingScreen: {
            forfeit: 'DIRAMPAS',
            music: 'Muzik',
            pokemonPreview: 'Pratonton Pokémon',
            privacyPolicy: 'DASAR PRIVASI',
            settings: 'Tetapan',
            soundEffects: 'Kesan Bunyi',
            supportId: 'ID Sokongan:{id}',
            termsOfService: 'TERMA PERKHIDMATAN'
        },
        shopScreen: {
            claimFreePack: 'TUNTUT',
            comingSoon: 'AKAN\nDATANG!',
            medal: {
                item: 'MEDAL'
            },
            medalPack: {
                item: 'MEDAL PACK'
            },
            freePack: {
                item: 'STAR MEDAL'
            },
            adsMedal: {
                item: 'POKÉ MEDAL'
            },
            adMedal: {
                item: 'POKÉ MEDAL'
            },
            gymPack: {
                item: 'POKÉ PACK'
            },
            guaranteed: 'Dijamin',
            left: 'Baki',
            freePackDescription: 'Mungkin mengandungi\n Pokémon Pemula',
            tapToOpen: 'Sentuh untuk Buka',
            notReady: 'Anda telah pun menuntut Star Medal ini. Yang berikutnya akan tersedia dalam {h}h {m}m.',
            silverPack: {
                item: 'SILVER PACK'
            },
            guaranteedIv: 'Dijamin {guaranteedIv}+ IV',
            gameCoin: 'Dagang Token',
            exchange: {
                title: 'TUKAR',
                refresh: 'Segar semula dalam:',
                refreshBtn: 'SEGAR SEMULA',
                selectToTrade: 'Pilih Pokémon untuk didagangkan',
                select: 'Dipilih',
                require: 'Diperlukan',
                trade: 'DAGANG'
            }
        },
        sslString: {
            btn_challengeNow: 'Cabar Sekarang',
            challenge: {
                text: '{challengerName} mencabar anda ke Pokémon Medallion Battle'
            },
            bossDefeated: {
                text: '{player} menamatkan {boss}! Datang ambil ganjaran anda!'
            },
            btn_getReward: 'Tuntut'
        },
        starPack: {
            claim: 'TUNTUT',
            cooldown: 'Star Pack baharu dalam',
            countdownTime: '{h}j {m}m',
            title: 'Star Pack'
        },
        taskScreen: {
            achievement: 'PENCAPAIAN',
            claimedReward: 'Dituntut!',
            countdownTime: '{h}j {m}m',
            daily: 'HARIAN',
            tapToClaim: 'Sentuh untuk\nTuntut',
            tasks: 'Tugasan'
        },
        tier: {
            tier1: 'Poké Ball',
            tier2: 'Great Ball',
            tier3: 'Ultra Ball'
        },
        type: {
            dragon: 'NAGA',
            electric: 'ELEKTRIK',
            fighting: 'LAWAN',
            fire: 'API',
            grass: 'RUMPUT',
            normal: 'BENING',
            psychic: 'PSIKIK',
            water: 'AIR'
        },
        raidName: {
            moltres: 'The Molten Monument',
            zapdos: 'The Shuttered Station',
            articuno: 'The Icebound Inlet',
            mewtwo: 'The Lakeside Labyrinth',
            raikou: 'The Thundering Tempest',
            entei: 'The Blazing Balefire',
            suicune: 'The Dismal Downpour',
            deoxys: 'The Insidious Invasion',
            regice: 'The Frozen Fortress',
            regirock: 'The Crumbling Citadel',
            registeel: 'The Steel Stronghold',
            groudon: 'The Primal Portal: Land',
            kyogre: 'The Primal Portal: Sea'
        },
        subscriptionTutorial: {
            title: 'Dapatkan Pemberitahuan',
            subtitle: 'Jangan terlepas apa-apa!',
            caption1: 'Buka Pokémon Medallion dalam aplikasi Facebook Gaming',
            caption2: 'Akses tetapan Facebook Game',
            caption3: 'Dayakan mesej'
        }
    },
    'resources/strings/th.json': {
        ability: {
            acid: 'กรดละลาย',
            ancientPower: 'พลังโบราณ',
            aquaJet: 'อควาเจ็ท',
            aquaRing: 'อควาริง',
            aquaTail: 'อควาเทล',
            aromatherapy: 'อโรมาเทอราปี',
            auraSphere: 'คลื่นพลัง',
            batonPass: 'ผลัดไม้',
            bite: 'กัดติด',
            blazeKick: 'เตะเปลวเพลิง',
            blizzard: 'พายุหิมะ',
            bonemerang: 'บูมเมอแรงกระดูก',
            braveBird1: 'เบรฟเบิร์ด',
            brickBreak: 'ผ่าอิฐ',
            bubble: 'ฟอง',
            bubbleBeam: 'บับเบิ้ลบีม',
            bulletSeed: 'ปืนกลเมล็ดพืช',
            closeCombat: 'อินไฟท์',
            confusion: 'จิตตานุภาพ',
            counter: 'ตอบโต้',
            crunch: 'กัดขย้ำ',
            darkestLariat: 'ดีดีแลเรียท',
            dig: 'ขุดรู',
            discharge: 'ปล่อยกระแสไฟฟ้า',
            doubleKick: 'เตะสองครั้ง',
            dreamEater: 'เขมือบฝัน',
            drought: 'ร้อนระอุ',
            earthquake: 'แผ่นดินไหว',
            ember: 'ลูกไฟ',
            eruption: 'ระเบิดปะทุ',
            fireBlast: 'เพลิงอัคคี',
            fireFang: 'เขี้ยวไฟ',
            fireSpin: 'วงล้อไฟ',
            flamethrower: 'พ่นไฟ',
            flameWheel: 'กงล้อไฟ',
            flareBlitz2: 'แฟลร์ไดรฟ์',
            flareBlitz3: 'แฟลร์ไดรฟ์',
            forcePalm: 'พลังฝ่ามือ',
            foresight: 'คาดการณ์',
            furyCutter: 'ตัดต่อเนื่อง',
            futureSight: 'รู้ล่วงหน้า',
            guillotine1: 'กรรไกรกิโยติน',
            gust: 'เรียกลม',
            hammerArm: 'อาร์มแฮมเมอร์',
            harden: 'แข็งขึ้น',
            healPulse: 'รักษาชีพจร',
            flameCharge: 'ไนโตรชาร์จ',
            heatCrash2: 'ฮีทแสตมป์',
            heatCrash3: 'ฮีทแสตมป์',
            hydroCannon: 'ปืนใหญ่พลังน้ำ',
            hydroPump: 'ไฮโดรปั๊มพ์',
            hyperBeam2: 'แสงมฤตยู',
            hypnosis: 'สะกดจิต',
            iceBeam: 'ลำแสงเยือกแข็ง',
            icePunch: 'หมัดเยือกแข็ง',
            icyWind: 'สายลมเยือกแข็ง',
            karateChop: 'คาราเต้ช็อป',
            lastResort1: 'สุดยอดไม้ตาย',
            lavaPlume: 'ขนนกลาวา',
            leafBlade: 'ลีฟเบลด',
            leafStorm: 'ลีฟสตอร์ม',
            leafTornado: 'กราสมิกเซอร์',
            leechSeed: 'เมล็ดกาฝาก',
            lick: 'จุ๊บน่าเกลียด',
            lowSweep: 'เตะต่ำ',
            luckyChant: 'บทเพลงแห่งความโชคดี',
            megahorn: 'เมก้าฮอร์น',
            mindReader: 'อ่านใจ',
            miracleEye: 'เนตรอัศจรรย์',
            mirrorCoat: 'มิเรอร์โค้ต',
            mudBomb: 'ระเบิดโคลน',
            muddyWater: 'น้ำโคลน',
            mudSlap: 'สาดโคลน',
            mysticalFire: 'เมจิคัลเฟลม',
            odorSleuth: 'สืบตามกลิ่น',
            outrage2: 'อารมณ์เดือดพล่าน',
            outrage3: 'อารมณ์เดือดพล่าน',
            overheat: 'โอเวอร์ฮีท',
            payDay1: 'ดูดเงิน',
            payDay2: 'ดูดเงิน',
            petalBlizzard: 'บุษบาโปรยปราย',
            petalDance2: 'ระบำกลีบดอกไม้',
            petalDance3: 'ระบำกลีบดอกไม้',
            phantomForce: 'โกสต์ไดฟ์',
            poisonJab: 'โจมตีด้วยพิษ',
            poisonSting: 'เหล็กในพิษ',
            powerWhip: 'พาวเวอร์วิป',
            protect: 'ป้องกันตัว',
            psychic: 'ไซโคคิเนซิส',
            psywave: 'คลื่นพลังจิต',
            quickAttack: 'เคลื่อนที่ความไวแสง',
            rainDance: 'เต้นเรียกฝน',
            razorLeaf: 'คัตเตอร์ใบไม้',
            razorShell: 'เชลล์เบลด',
            rockTomb: 'สุสานกำแพงศิลา',
            rockWrecker: 'ทลายหิน',
            seedBomb: 'ระเบิดเมล็ดพืช',
            shadowBall: 'ชาโดว์บอล',
            shadowSneak: 'แฝงเงา',
            shellTrap: 'แทรปเชลล์',
            silverWind: 'ลมสีเงิน',
            sing: 'ร้องเพลง',
            skyAttack1: 'ก็อดเบิร์ด',
            skyAttack3: 'ก็อดเบิร์ด',
            skyUppercut: 'หมัดทะลุฟ้า',
            sleepPowder: 'ผงนิทรา',
            solarBeam: 'โซล่าร์บีม',
            sparklingAria: 'บทเพลงแห่งฟองน้ำ',
            spikeCannon: 'ปืนใหญ่หนาม',
            spikes: 'สไปกส์',
            spikyShield: 'เกราะหนาม',
            spore: 'สปอร์เห็ด',
            stealthRock: 'สเตลท์ร็อก',
            stickyWeb: 'ตาข่ายหนึบหนับ',
            submission3: 'กงล้อนรก',
            sunnyDay: 'วันฟ้าใส',
            superpower: 'พลังสุดขีด',
            synthesis: 'สังเคราะห์แสง',
            takeDown1: 'พุ่งเข้าใส่',
            takeDown2: 'พุ่งเข้าใส่',
            thunder: 'ฟ้าผ่า',
            thunderbolt: 'หนึ่งแสนโวลต์',
            thunderShock: 'ช็อคไฟฟ้า',
            topsyTurvy1: 'พลิกกลับ',
            topsyTurvy2: 'พลิกกลับ',
            twineedle2: 'ดับเบิ้ลนีดเดิ้ล',
            vineWhip: 'แส้เถาวัลย์',
            voltTackle1: 'โวลต์แทคเกิล',
            voltTackle2: 'โวลต์แทคเกิล',
            waterfall: 'ปีนน้ำตก',
            waterGun: 'ปืนฉีดน้ำ',
            waterPulse: 'คลื่นน้ำ',
            waterShuriken: 'ดาวกระจายน้ำ',
            wish: 'พร',
            withdraw: 'หดกำบัง',
            woodHammer3: 'วู้ดแฮมเมอร์',
            wringOut2: 'บีบออก',
            wringOut3: 'บีบออก',
            xScissor: 'ซิสเซอร์ครอส',
            yawn: 'หาว',
            zapCannon: 'ปืนใหญ่แม่เหล็กไฟฟ้า',
            flareBlitz1: 'แฟลร์ไดรฟ์',
            airCutter: 'แอร์คัตเตอร์',
            airSlash: 'แอร์สแลช',
            electricTerrain: 'อิเล็คทริกฟิลด์',
            lockOn: 'ล็อคออน',
            parabolicCharge1: 'พาราโบล่าชาร์จ',
            wildCharge1: 'ไวลด์โวลต์',
            psybeam: 'ลำแสงพลังจิต',
            sludgeBomb: 'ระเบิดโคลน',
            thunderPunch: 'หมัดสายฟ้า',
            mudShot: 'มัดช็อต',
            willOWisp: 'ลูกไฟวิญญาณ',
            spark: 'สปาร์ค',
            thrash1: 'อาละวาด',
            extremeSpeed: 'ความเร็วเทพ',
            nobleRoar2: 'คำรามก้อง',
            acidArmor: 'ละลาย',
            selfDestruct: 'ระเบิดตัวเอง',
            explosion: 'ระเบิดยักษ์',
            psystrike: 'ไซโคเบรก',
            psychoBoost: 'ไซโคบูสท์',
            technoBlast: 'เทคโนบัสเตอร์',
            steamEruption: 'สตีมเบิร์ส',
            bulldoze: 'ข่มขู่',
            spiritShackle: 'เย็บเงา',
            dynamicPunch: 'หมัดดินระเบิด',
            bounce: 'เด้งกลับ',
            sludge: 'โจมตีด้วยโคลน',
            absorb: 'ดูดซับ',
            fieryDance: 'ระบำไฟ',
            fireLash: 'แส้เพลิง',
            painSplit: 'แบ่งพลัง',
            powerGem: 'พาวเวอร์เจม',
            machPunch: 'มัคพันช์',
            psychoCut: 'ไซโคคัตเตอร์',
            metronome1: 'เครื่องเคาะจังหวะ',
            metronome2: 'เครื่องเคาะจังหวะ',
            moonlight: 'แสงจันทร์',
            softBoiled: 'ออกไข่',
            crossChop: 'ครอสช็อป',
            playRough: 'คลอเคลีย',
            powerUpPunch: 'โกรว์พันช์',
            rapidSpin: 'หมุนติ้ว',
            haze: 'หมอกดำ',
            nightSlash: 'ไนท์สแลช',
            iceShard: 'สะเก็ดน้ำแข็ง',
            frostBreath: 'ลมหายใจเยือกแข็ง',
            hex: 'คำสาป',
            agility: 'สปีดี้',
            beatUp1: 'บีทอัพ',
            pressure: 'กดดัน',
            earthPower: 'พลังปฐพี',
            present: 'ของขวัญ',
            psyshock: 'ไซโคช็อค',
            grassKnot2: 'ปมหญ้า',
            grassKnot3: 'ปมหญ้า',
            moonblast: 'มูนฟอร์ซ',
            zenHeadbutt: 'ท่าโขกหัวเต็มพิกัด',
            ionDeluge: 'พลาสม่าชาวเวอร์',
            ironDefense: 'กำแพงเหล็ก',
            extrasensory: 'สัมผัสพิเศษ',
            darkPulse: 'คลื่นชั่วร้าย',
            sacredFire: 'ไฟศักดิ์สิทธิ์',
            shadowPunch: 'ชาโดว์พันช์',
            thunderFang: 'เขี้ยวสายฟ้า',
            poisonFang: 'เขี้ยวพิษ',
            crossPoison: 'ครอสพอยซัน',
            doubleHit1: 'ดับเบิลแอทแทก',
            doubleHit2: 'ดับเบิลแอทแทก',
            dive: 'ดำน้ำ',
            fly: 'บินขึ้น',
            hail: 'โห่ร้อง',
            rockThrow: 'หินผาถล่ม',
            rockSlide: 'ผาทลาย',
            magnitude2: 'แม็กนิจูด',
            acrobatics: 'อะโครแบท',
            sandstorm: 'พายุทราย',
            metalBurst2: 'เมทัลเบิสท์',
            headSmash1: 'ท่าโขกหัวดาบสองคม',
            headSmash2: 'ท่าโขกหัวดาบสองคม',
            heavySlam2: 'เฮฟวีบอมเบอร์',
            prehistoricCall: 'เสียงเรียกแห่งยุคดึกดำบรรพ์ ',
            dragonAscent: 'ไม้ตายมังกรทยานฟ้า',
            auroraBeam: 'ออโรร่าบีม',
            brine: 'น้ำเค็ม',
            energyBall: 'เอนเนอร์จี้บอล',
            smackDown: 'ตีตก',
            precipiceBlades: 'ดาบผาชัน',
            originPulse: 'กระแสคลื่นแหล่งกำเนิด',
            glaciate: 'แช่แข็งโลก',
            bulletPunch2: 'บูลเล็ทพันช์',
            doubleEdge1: 'กระแทกสุดแรง',
            dracoMeteor: 'หมู่ดาวตก',
            oblivionWing: 'ปีกแห่งความตาย',
            landsWrath: 'กราวด์ฟอร์ซ',
            geomancy: 'จีโอคอนโทรล',
            aerialAce: 'คมมีดบูมเมอแรง',
            lovelyKiss: 'จุ๊บน่าเกลียด',
            conversion: 'เปลี่ยนสภาพ',
            dragonRush3: 'ดรากอนไดฟ์',
            iceFang: 'เขี้ยวน้ำแข็ง',
            healBell: 'กระดิ่งรักษา',
            stoneEdge: 'ศิลาพิฆาต',
            slackOff1: 'หนีงาน',
            slackOff2: 'หนีงาน',
            uproar1: 'วุ่นวาย',
            peck: 'จิก',
            magicalLeaf: 'เมจิคัลลีฟ',
            disarmingVoice: 'เสียงทรงเสน่ห์',
            freezeDry: 'ฟรีซดราย',
            pursuit: 'ซ้ำเติม',
            zingZap: 'แปร๊บๆ'
        },
        abilityShortDesc: {
            clearance: 'ลบล้างพลังเมื่อเข้า',
            priority: 'ต่อสู้ก่อนที่พลังจะถูกใช้',
            protect: 'ได้รับการปกป้องไม่ให้แพ้',
            reveal: 'เผย {value1} โปเกมอนบนเบนช์'
        },
        abilityType: {
            clearance: 'ลบล้างพลังโจมตีและพลังสนับสนุนก่อนที่จะมีผล',
            priority: 'ต่อสู้ก่อนที่โปเกมอนที่ใช้งานอยู่ของคู่ต่อสู้สามารถใช้พลัง',
            arena: '{value2} โปเกมอนที่ใช้งานอยู่ได้รับ {value1} CP',
            hazard: '{value2} โปเกมอนที่ใช้งานอยู่ตัวถัดไปของคู่ต่อสู้จะเสีย {value1} CP',
            protect: 'โปเกมอนได้รับการปกป้องไม่ให้แพ้นานหนึ่งตา',
            reveal: 'เผย {value1} โปเกมอนที่พักอยู่ของคู่ต่อสู้',
            se: 'รับ {value1}x CP เมื่อปะทะ {value2} โปเกมอน',
            transform: 'เลียนร่างโปเกมอนที่คู่ต่อสู้ใช้งานเป็นตัวสุดท้าย',
            wish: '{value2} โปเกมอนที่ใช้งานอยู่ตัวถัดไปของคุณได้รับ {value1} CP'
        },
        achievement: {
            collected: 'รับโปเกมอนที่แตกต่าง {targetValue} ตัว',
            evolved: 'วิวัฒนาการโปเกมอน {targetValue} ตัว',
            play: 'เข้าร่วมการประลองในยิม {targetValue} ครั้ง',
            sentToLab: 'ส่งโปเกมอน {targetValue} ตัวไปที่ห้องแล็บ',
            win: 'ชนะการประลองในยิม {targetValue} ครั้ง'
        },
        adHouse: {
            0: {
                text1: 'ส่งโปเกมอนไปที่แล็บเพื่อรับลูกอม',
                text2: 'ใช้ลูกอมเพื่อวิวัฒนาการโปเกมอน!'
            },
            1: {
                text1: 'เปิดเผยโปเกมอนที่พักอยู่!',
                text2: 'จำไว้ว่าโปเกมอนจะเรียงตามค่า CP จากซ้ายไปขวา'
            },
            2: {
                text1: 'ปกป้องโปเกมอนของคุณจากอันตราย',
                text2: 'ทำให้พลังของคู่ต่อสู้ไร้ผล!'
            },
            3: {
                text1: 'การจัดลำดับจะทำให้คุณต่อสู้ได้ทันที',
                text2: 'เอาชนะโปเกมอนให้ได้ก่อนที่มันจะแสดงพลัง!'
            },
            4: {
                text1: 'บูสต์โปเกมอนในอารีน่า!',
                text2: 'สามารถใช้ได้แค่อารีน่าเดียวต่อครั้ง'
            },
            5: {
                text1: 'พลังโจมตีเมื่อเข้าจะสร้างความเสียหายให้โปเกมอน',
                text2: 'พลังสนับสนุนเมื่อเข้าจะรักษาโปเกมอน'
            },
            6: {
                text1: 'ล้างพลังโจมตีเมื่อเข้าและพลังสนับสนุนเมื่อเข้า!',
                text2: 'เกิดขึ้นก่อนที่พลังเริ่มต้นจะมีผล'
            }
        },
        arenaScreen: {
            effectsCanceled: '{arena1} และ {arena2}\nลบล้างกัน!'
        },
        badge: {
            1: 'ฝึกหัด',
            2: 'หญ้า',
            3: 'ไฟ ',
            4: 'น้ำ',
            5: 'สายฟ้า',
            6: 'ต่อสู้',
            7: 'พลังจิต',
            8: 'มังกร',
            9: 'ป่า',
            10: 'น้ำพุร้อน',
            11: 'แฟรี่'
        },
        badgeHistoryScreen: {
            badges: 'เหรียญตรา'
        },
        badgeTitle: {
            1: 'ฝึกหัด',
            2: 'หญ้า',
            3: 'ไฟฟ้า',
            4: 'น้ำ',
            5: 'สายฟ้า',
            6: 'ต่อสู้',
            7: 'พลังจิต',
            8: 'มังกร',
            9: 'ป่า',
            10: 'น้ำพุร้อน',
            11: 'แฟรี่'
        },
        badgeUnlock: {
            available: 'พร้อมแล้ว',
            gotBadge: 'คุณได้รับเหรียญตรา {type}',
            unlock: 'ยิม {number} ปลดล็อกแล้ว'
        },
        bagScreen: {
            cannotBeUndone: 'ไม่สามารถย้อนกลับได้',
            cannotEvolveEquipped: 'โปเกมอนตัวนี้อยู่ในทีมและไม่สามารถวิวัฒนาการได้',
            editTeam: 'แก้ไขทีม',
            editTeamConfirmButton: 'เสร็จสิ้น',
            error: {
                leaveConfirm: 'แน่ใจหรือไม่ว่าต้องการออก',
                noDupeFamily: 'คุณสามารถใช้โปเกมอนจากตระกูล {family} ครั้งละหนึ่งตัวเท่านั้น',
                teamFull: 'ทีมของคุณเต็มแล้ว',
                teamateLimit: 'คุณสามารถใช้โปเกมอน {type} สองตัวเท่านั้น',
                unableToSave: 'ไม่สามารถบันทึกข้อมูลทีม'
            },
            evolutionConfirm: 'แน่ใจหรือไม่ว่าต้องการ\nวิวัฒนาการ {pokemonName}',
            evolveButton: 'วิวัฒนาการ',
            evolvesFrom: 'วิวัฒนาการจาก {evolutionName}',
            filterModeTab: 'ข้อมูล',
            get: 'รับ',
            information: 'ข้อมูล',
            selectPokemonFirst: 'โปรดเลือกเหรียญรางวัลเพื่อส่งไปที่ห้องแล็บก่อน',
            sellPokemonBatchLimit: 'คุณไม่สามารถส่งโปเกมอนได้มากเกินกว่า {max} ตัวไปที่ห้องแล็บต่อครั้ง',
            sellPokemonInTeam: 'โปเกมอนตัวนี้อยู่ในทีมและไม่สามารถส่งไปที่ห้องแล็บได้',
            send: 'ส่ง',
            sendConfirmation1: 'ส่งโปเกมอน {pokemonCount} ตัวไปที่ห้องแล็บและรับ {candiesSum}',
            sendDisclaimer: 'ส่งโปเกมอนไปที่ห้องแล็บหรือไม่',
            sendSuccesfull: 'คุณได้ส่งโปเกมอน {pokemonCount} ตัวไปที่ห้องแล็บและรับ {candiesSum}',
            sendToLab: 'ส่งไปที่ห้องแล็บ',
            sendToLabConfirmButton: 'ยกเลิก',
            topForMoreInfo: 'แตะที่โปเกมอนเพื่อดูข้อมูลและวิวัฒนาการ',
            warning: {
                evolveEquipped: 'การวิวัฒนาการโปเกมอนตัวนี้จะเป็นการเอาออกจากทีมของคุณ',
                evolveEquippedQuestion: 'แน่ใจหรือไม่ว่าต้องการวิวัฒนาการ',
                teamNotReady1: 'ขออภัย ทีมไม่ถูกต้อง',
                teamNotReady2: 'โปรดแก้ไขก่อน'
            },
            expand: 'ต้องการขยายกระเป๋าหรือไม่',
            expandSucccess: 'เพิ่มพื้นที่ในกระเป๋าเป็น {slot} ช่อง'
        },
        callout: {
            opponentTurn: 'ตาของคู่ต่อสู้',
            yourTurn: 'ตาของคุณ'
        },
        challenge: {
            challengeBrag3: '{challenger} โค่น {opponent} อย่างสมบูรณ์แบบ!',
            challengeBrag2: '{challenger} บดขยี้ {opponent} โดยสมบูรณ์!',
            challengeBrag1: 'เกือบไปแล้ว แต่ {challenger} เอาชนะ {opponent}!',
            challengeBrag0: '{challenger} และ {opponent} เพิ่งผ่านการต่อสู้ที่ดุเดือดมา!'
        },
        challengeReferralPrompt: {
            header: 'ยอดเยี่ยมมากที่ชนะการประลองในยิมนั้น!',
            text: 'แต่คุณจะเอาชนะเพื่อนได้หรือไม่',
            button: 'ทำได้แน่นอน'
        },
        challengeScreen: {
            title: 'ดวล',
            subTitle: 'แข่งกับเพื่อนๆ เพื่อรับรางวัล!',
            battle: 'ต่อสู้',
            quickMatch: 'จับคู่ด่วน',
            invite: 'เชิญ',
            waitFor: 'กำลังรอคำตอบ...',
            notFoundUser: 'ไม่พบเพื่อนที่เล่น Pokémon Medallion Battle!',
            joinChallengeRequestHanging: 'เชื่อมต่อกับเพื่อนไม่ได้',
            waitForPlayer: 'กำลังรอให้ผู้เล่นตอบ...',
            switchAiTitle: 'กำลังเริ่มเกม',
            switchAiText: 'โปรดรอ...',
            noDoubleChallenge: 'คุณไม่สามารถต่อสู้กับผู้เล่นคนเดิมได้สองครั้งติดกัน',
            skipBtn: 'เล่นเลย',
            loadingFriends: 'กำลังโหลดเพื่อน...',
            alreadyPlayed1: 'คุณได้ต่อสู้กับผู้เล่นคนนี้แล้วในวันนี้',
            alreadyPlayed2: 'ต่อสู้กับคนใหม่ๆ เพื่อรับคะแนน!'
        },
        chatbot: {
            btn_play: 'เล่นเลย',
            btn_challengeNow: 'ท้าทายเลย',
            btn_claimNCandies: 'รับลูกอม {amount} เม็ด',
            desciptionLine1: 'เปิดการแจ้งเตือนและ',
            desciptionLine2: 'รับคาโมเนกิ',
            message: 'Pokémon Medallion\nจะส่งประกาศ เคล็ดลับ และอื่นๆ \nให้คุณ คุณสามารถปิดรับ\nข้อความใน\nบทสนทนาในเกม',
            messageHeader: 'เปิดรับข้อความจาก\nPokémon Medallion',
            notNow: 'ยังไม่ใช่ตอนนี้',
            reminders: 'คำเตือน',
            thankYou: 'ขอบคุณที่เล่น ไว้มาเล่นกันใหม่นะ',
            turnOn: 'เปิด',
            claimFreePack: 'รับ',
            freePackRemider: 'เหรียญดาวแรกของคุณมาแล้ว',
            '24hReminder': 'วิวัฒนาการเพื่อให้ได้โปเกมอนที่แข็งแกร่งยิ่งขึ้นเลย ไว้ใจได้!',
            '30hReminder': 'ยินดีต้อนรับกลับมา การต่อสู้รอคุณอยู่',
            '36hReminder': '{player} เราคิดถึงคุณนะ! กลับมาเล่นกับพวกเราสิ!',
            '38hReminder': '{player}, คาโมเนกิ ปรากฏตัวแล้ว!',
            '46hReminder': 'แพ็คดาวมีโปเกมอนหายาก ลองเสี่ยงโชคเลย!'
        },
        common: {
            fatal: 'ข้อผิดพลาดร้ายแรง: {error}',
            tapToContinue: 'แตะเพื่อดำเนินการต่อ',
            alreadyInvited: 'คุณได้เชิญผู้เล่นคนนี้แล้วในวันนี้'
        },
        daily: {
            coinSpent: 'ใช้ PokéCoin {targetValue} เหรียญ',
            evolved: 'วิวัฒนาการโปเกมอน {targetValue} ตัว',
            play: 'เข้าร่วมการประลองในยิม {targetValue} ครั้ง',
            sentToLab: 'ส่งโปเกมอน {targetValue} ตัวไปที่ห้องแล็บ',
            win: 'ชนะการประลองในยิม {targetValue} ครั้ง'
        },
        error: {
            candyOverflowWarning: 'คุณจะมีลูกอมเกินขีดจำกัดหากทำสิ่งนี้',
            coinOverflowWarning: 'คุณจะมีเหรียญ PokéCoin เกินขีดจำกัดหากทำสิ่งนี้',
            noAdSupport: 'ขออภัย แต่อุปกรณ์นี้ไม่รองรับโฆษณาในขณะนี้',
            noOpponent: 'ไม่พบคู่ต่อสู้ โปรดลองใหม่ภายหลัง',
            reconnectGiveUp: 'การเชื่อมต่อเกมถูกตัดขาด โปรดโหลดใหม่',
            unableToConnect: 'ไม่สามารถเข้าถึงเซิร์ฟเวอร์ได้',
            disconnectedInFight: 'การเชื่อมต่อเครือข่ายถูกตัด',
            unableToLoadAd: 'ไม่มีโฆษณา โปรดลองใหม่ภายหลัง',
            noSpaceInBag: 'มีพื้นที่ในกระเป๋าไม่พอ\nส่งโปเกมอนไปที่ห้องแล็บเพื่อเพิ่มที่ว่าง',
            notEnoughcandy: 'มีลูกอมไม่พอ\nส่งโปเกมอนไปที่ห้องแล็บเพื่อรับลูกอมเพิ่ม',
            notEnoughcoin: 'มีเหรียญ PokéCoin ไม่พอ เอาชนะการต่อสู้เพื่อรับเหรียญเพิ่ม',
            invalidTeam: 'ขออภัย ทีมไม่ถูกต้อง โปรดแก้ไขก่อน',
            raidClosed: 'เรดสิ้นสุดแล้ว\n\nรอสนุกกับการผจญภัยครั้งถัดไป!',
            raidClosedDetailed: 'เรดสิ้นสุดแล้ว\n\nกลับมาในอีก {h} ชม. {m} นาที เพื่อสนุกกับการผจญภัยครั้งถัดไป!',
            raidFull: 'ขออภัย แต่ทีมเรดนี้เต็มแล้ว',
            joinRaidCooldownError: 'รอสักนิด คุณเข้าร่วมเรดปาร์ตี้เร็วเกินไป!\n\nลองอีกครั้งใน {hours} ชม. {minutes} นาที'
        },
        flag: {
            legendary: 'ตำนาน'
        },
        ftue: {
            addToTeam: 'ลองเพิ่ม {pokemon} ลงในทีมก่อนเริ่มการต่อสู้ใหม่',
            battle2: 'ลองใช้ {pokemon} ในการต่อสู้สิ',
            claimReward: 'รับรางวัลงานของคุณก่อนเริ่มการต่อสู้ใหม่',
            evolve: 'วิวัฒนาการโปเกมอนเพื่อเพิ่มค่า CP และเรียนรู้พลังต่างๆ!\n\nแตะเพื่อเปิดกระเป๋า',
            howEvolve: 'การวิวัฒนาการต้องใช้ลูกอม\n\nรับลูกอมโดยการส่งโปเกมอนไปที่ห้องแล็บ',
            letsBattle: '[b]ยินดีต้อนรับสู่\nPokémon Medallion Battle![/b]\n\nเอาชนะการต่อสู้ [b]3[/b] ครั้งเพื่อเป็นผู้ชนะ',
            opponentName: 'เทรนเนอร์คู่แข่ง',
            playpk1: '[b]เล่น {pokemon}[/b]\n\nโปเกมอนที่มี CP สูงกว่าจะชนะ',
            playpk2: '[b]คุณจะได้เล่นก่อนหลังจากชนะส่ง {pokemon} ออกไปเลย![/b]',
            playpk3: '[b]เลือก {pokemon}[/b]\n\nโปเกมอนบางตัวมีพลัง\nแตะที่โปเกมอนเพื่อดูข้อมูลเพิ่มเติม',
            playStarter: '[b]จบการต่อสู้นี้ด้วย {pokemon}![/b]\n\n\'ซูเปอร์ เอฟเฟคทีฟ\' จะเพิ่ม CP หากสู้กับโปเกมอนบางไทป์',
            playStarter2: '[b]จบการต่อสู้นี้ด้วย {pokemon}![/b]',
            superEffective: 'พลัง {ability} ของ {pokemon} จะเพิ่ม CP ให้ตัวเอง เมื่อสู้กับโปเกมอนประเภท {type}',
            protect: 'พลัง {ability} ของ ทรานเซล ปกป้องไม่ให้โปเกมอนแพ้!',
            tryPokemon: 'ลองใช้ {pokemon}\n\nแตะ \'ต่อสู้\' เพื่อเริ่มต้นการต่อสู้',
            removeMedalFromTeam: 'เอาโปเกมอนออกจากทีมของคุณเพื่อให้มีที่ว่างสำหรับ {pokemon}',
            addMedalToTeam: 'แตะ {pokemon} เพื่อเพิ่มลงในทีมของคุณ',
            completeTeam: 'สร้างทีมให้เสร็จสิ้นโดยการแตะโปเกมอนที่ไม่ได้เลือก'
        },
        gachaScreen: {
            note: 'ไปให้ถึงยิมถัดไปเพื่อปลดล็อกโปเกมอนใหม่',
            noteStarPack: 'เปิดแพ็คดาวเพื่อรับ\nโปเกมอนเริ่มต้นทั้งหมด'
        },
        general: {
            cancel: 'ยกเลิก',
            close: 'ปิด',
            countdownDHTime: '{d}วัน {h}ชม.',
            countdownHMTime: '{h}ชม. {m}นาที',
            countdownMSTime: '{m}นาที {s}วินาที',
            done: 'เสร็จสิ้น',
            doneExclamation: 'เสร็จสิ้น',
            errorHappened: 'เกิดข้อผิดพลาด\n{error}',
            get: 'รับ',
            go: 'ไป',
            leave: 'ออก',
            noButton: 'ไม่',
            off: 'ปิด',
            ok: 'โอเค',
            on: 'เปิด',
            proceed: 'ไปต่อ',
            restartIn: 'รีสตาร์ทในอีก:',
            revert: 'ย้อนกลับ',
            stay: 'อยู่ต่อ',
            team: 'ทีม',
            yesButton: 'ใช่',
            score: 'คะแนน',
            idle: 'อยู่เฉยๆ'
        },
        gifts: {
            dailyLimit: 'ขอบคุณ แต่คุณช่วยเหลือครบ 3/3 ครั้งแล้วในวันนี้ กลับมาอีกทีพรุ่งนี้นะ',
            expired: 'ขออภัย แต่คำขอนี้หมดอายุแล้ว ดูว่ามีใครต้องการความช่วยเหลือหรือไม่',
            sourceLimit: 'ของขวัญจากผู้เล่นคนนี้',
            gotItem: 'คุณได้รับ {item} จาก {friend}!',
            help: {
                candy: 'ช่วยมิมิคคิวหาเพื่อนโดยใช้ลูกอมหน่อย',
                coins: 'ช่วยเนียสคืนเหรียญที่เขา "ยืม" ไป',
                starMedal: 'ช่วยอีวุยหาเทรนเนอร์ให้ไข่พวกนี้หน่อยนะ'
            },
            header: 'ให้ของขวัญจากโปเกมอนกกับเพื่อนๆ!',
            sendAll: 'ส่งถึงทั้งหมด',
            send: 'ส่ง',
            sendItem: 'ส่ง {item} ไปให้เพื่อน',
            title: 'ของขวัญ',
            yourRequest: 'ขออภัย แต่นี่คือคำขอของคุณ ดูว่ามีใครต้องการความช่วยเหลือหรือไม่',
            gotItemInMailbox: '{item} อยู่ในกล่องจดหมายแล้ว\nคุณส่ง {giftBack} และของขวัญตอบแทน!',
            gotItemAndGiftSend: 'คุณได้รับ {item}\nคุณส่ง {giftBack} และของขวัญตอบแทน!',
            gotItemAndGiftRespond: 'คุณได้รับ {item}\nคุณส่ง {giftBack} ตอบแทน!'
        },
        gym: {
            1: 'เมืองเทรนเนอร์',
            2: 'ป่าเขียวชอุ่ม',
            3: 'ยอดเขาเพลิงไหม้',
            4: 'ชายหาดน้ำใส',
            5: 'โรงงานพลังงาน',
            6: 'โรงฝึกวิชาหินผง',
            7: 'วิหารเงา',
            8: 'รังมังกร',
            9: 'ประชุมลีก',
            10: 'เทือกเขาหมอกล้อม',
            11: 'ทุ่งยอดจันทร์',
            final: 'แชมเปี้ยน คัพ',
            title: 'ยิม {gymId}:'
        },
        landingScreen: {
            battle: 'ต่อสู้',
            inviteBtn: 'เชิญ',
            nextBadge: 'ยิมถัดไป',
            team: 'ทีม',
            challengeBtn: 'ดวล',
            rating: 'คะแนน:',
            rank: 'อันดับ:'
        },
        leaderboard: {
            cannotLoad: 'ไม่สามารถดูข้อมูลกระดานผู้นำ',
            requesting: 'กำลังขอดูข้อมูลกระดานผู้นำ...',
            seasonNumber: 'อันดับประจำซีซัน {number}'
        },
        mailbox: {
            emptyMailboxMessage: 'กล่องจดหมายว่างเปล่า',
            button: {
                claim: 'รับ',
                read: 'อ่าน'
            },
            expiration: 'หมดอายุในอีn {h} ชม. {m} นาที',
            expired: 'สิ้นสุดแล้ว',
            referralBonus: {
                title: 'ขอบคุณนะ!',
                body: 'รับ {number}{coinSymbol} ทุกครั้งที่เพื่อนของคุณกดรับของขวัญ'
            },
            csGift: {
                title: 'สนับสนุน',
                body: 'ทีมต่อสู้',
                default: {
                    title: 'สนับสนุน',
                    body: 'ทีมต่อสู้'
                },
                sorry: {
                    title: 'ขออภัย!',
                    body: 'รางวัลชดเชยสำหรับข้อผิดพลาดทางเทคนิค'
                }
            },
            gift: {
                title: 'ของขวัญ',
                body: 'เพื่อนส่งของขวัญมาให้'
            },
            raidReward: {
                title: 'แพ็คเรด - ด่าน {stage}',
                body: 'รางวัลที่คุณช่วยกำจัด {bossName}!'
            },
            raidHighScore: {
                title: 'คะแนนสูงสุด - ด่าน {stage}',
                body: 'รางวัลที่คุณได้คะแนนสูงเป็นอันดับที่ #{rank}!'
            },
            raidAnnouncement: {
                title: 'กิจกรรมเรด - {raidName}',
                body: '{bossName} ถูกพบเห็น! รวมทีมเพื่อปราบมันเลย!'
            },
            referralSilverPack: {
                title: 'ขอบคุณนะ!',
                body: 'รางวัลจากการชวนเพื่อน'
            },
            subscriptionTutorial: {
                title: 'รับการแจ้งเตือน',
                body: 'จะได้ไม่พลาดข่าวสาร!'
            },
            raidTotalDamage: {
                title: 'คะแนนสูงสุด - ด่าน {stage}',
                body: 'คุณได้รับ {amount}x {rewardIcon} เพราะได้อันดับที่ #{rank}!'
            },
            lbReward: {
                global: {
                    title: 'อันดับโลก',
                    body: 'รางวัลที่คุณติด #{rank} อันดับแรกของโลก!'
                },
                region: {
                    title: 'การจัดอันดับประเทศ',
                    body: 'รางวัลที่คุณติด #{rank} อันดับแรกของประเทศ!'
                }
            }
        },
        maintenance: {
            details: 'ขออภัย เรากำลัง\nปิดปรับปรุงเล็กน้อย',
            title: 'กลับมาใหม่เร็วๆ นี้นะ'
        },
        navBar: {
            bag: 'กระเป๋า',
            battle: 'ต่อสู้',
            challenge: 'ดวล',
            mail: 'เมล',
            pokedex: 'โปเกเด็กซ์',
            shop: 'ร้านค้า'
        },
        noFriendReferralPrompt: {
            button: 'โอเค',
            header1: 'Pokémon Medallion จะสนุกยิ่งขึ้นถ้าได้เล่นกับเพื่อน',
            text1: 'ชวนพวกเขามาเล่นด้วยสิ',
            text2: 'ท้าดวลกับเพื่อนๆ และคุณอาจได้รับปิกาจูหายาก!'
        },
        notification: {
            defaultPlay: {
                btn: 'เล่นเลย'
            },
            defaultClaim: {
                btn: 'รับ'
            },
            gift_candy: {
                btn: 'รับลูกอม {count} เม็ด',
                text: 'มิมิคคิวมีลูกกวาดให้คุณ คุณจะยอมเป็นเพื่อนกับเขาไหม'
            },
            gift_coins: {
                btn: 'รับ PokéCoin {count} เหรียญ',
                text: 'เนียสมี PokéCoin ที่เป็นของคุณ...'
            },
            gift_starMedal: {
                btn: 'รับเหรียญรางวัล',
                text: '{friend} มีของขวัญให้คุณ'
            },
            gift_reward: {
                text: '{friend} says thanks with a gift!'
            },
            simpleThanks: {
                btn: 'เล่นเลย',
                text: 'ไว้มาเล่นกันใหม่นะ'
            },
            shareMedal: {
                btn: 'เล่นเลย',
                text: 'ดู {pokemon} ของฉันสิ!'
            },
            whichStarter: {
                text: 'คุณเป็นโปเกมอนเริ่มต้นตัวไหน'
            },
            win: {
                text: '{myPokemon} ของ {playerFirstName} โค่น {opposingPokemon} ลงได้!'
            },
            winBy1: {
                text: 'เกือบไปแล้ว แต่ {attacker} เอาชนะ {defender}!'
            },
            winBy2: {
                text: '{pokemon} ของ {attacker} โค่น {defenderPokemon} ลงได้!'
            },
            winBy3: {
                text: '{attacker} โค่น {defender} อย่างสมบูรณ์แบบ!'
            },
            lose: {
                text: '{defender} กำจัด {attacker} ได้สำเร็จด้วย {defenderPokemon}!'
            },
            challenge: {
                text: '{challengerName} ท้าให้คุณลองเล่น Pokémon Medallion Battle'
            },
            shareBadge: {
                text: 'ในที่สุดฉันก็ได้เหรียญตรา {badge}!'
            },
            sharePack: {
                text: 'ว้าว! ดูโปเกมอนที่ฉันจับได้สิ!'
            }
        },
        pokedexEntry: {
            evolvesInto: 'วิวัฒนาการเป็น {evolutionName}',
            finalEvolution: 'วิวัฒนาการร่างสุดท้าย',
            height: 'ส่วนสูง',
            moreInfo: 'สะสมเพื่อเรียนรู้เพิ่มเติม',
            pokemonIllustrator: 'นักวาด: {illustrator}',
            unknownValue: '???',
            weight: 'น้ำหนัก'
        },
        pokemon: {
            alomomola: 'มามันโบ',
            ariados: 'อาริอาโดส',
            articuno: 'ฟรีเซอร์',
            bayleef: 'เบย์ลีฟ',
            beedrill: 'สเปียร์',
            bellossom: 'คิเรอิฮานะ',
            blastoise: 'คาเม็กซ์',
            blaziken: 'บาชาโม',
            blitzle: 'ชิมามา',
            braixen: 'ไทเรนาร์',
            brionne: 'โอชามาริ',
            bulbasaur: 'ฟุชิกิดาเนะ',
            bunnelby: 'โฮรุบี',
            butterfree: 'บัตเตอร์ฟรี',
            camerupt: 'บาคูดา',
            carbink: 'เมเลซี',
            caterpie: 'คาเตอร์ปี',
            celebi: 'เซเลบี',
            charizard: 'ลิซาร์ดอน',
            charmander: 'ฮิโตคาเงะ',
            charmeleon: 'ลิซาร์โดะ',
            chesnaught: 'บริการอน',
            chespin: 'ฮาริมารอน',
            chikorita: 'จิโคริตา',
            chimchar: 'ฮิโกซารุ',
            cloyster: 'พาร์เชน',
            combusken: 'วาคาชาโม',
            corsola: 'ซันนีโก',
            croagunk: 'กูเรกกรู',
            crobat: 'โครแบท',
            croconaw: 'อัลลิเกต',
            cubone: 'คาระคาระ',
            cyndaquil: 'ฮิโนอาราชิ',
            dartrix: 'ฟุคุซึโร',
            decidueye: 'จูไนเปอร์',
            dedenne: 'เดเด็นเนะ',
            delibird: 'เดลิเบิร์ด',
            delphox: 'มาโฮคซี',
            deoxys: 'ดีอ็อกซิส',
            dewott: 'ฟุตาจิมารุ',
            diggersby: 'โฮรุโด',
            ditto: 'เมตามอน',
            donphan: 'ดอนแฟน',
            dragonair: 'ฮาคุริว',
            dragonite: 'ไคริว',
            dratini: 'มินิริว',
            ducklett: 'โคอารูฮิ',
            duosion: 'ดาบูลัน',
            eevee: 'อีวุย',
            electabuzz: 'เอเลบู',
            electivire: 'เอเลคิเบิล',
            electrike: 'ราคุไร',
            elekid: 'เอเลคิด',
            emboar: 'เอ็นบูโอ',
            empoleon: 'เอ็มเพลท์',
            exeggcute: 'ทามะทามะ',
            exeggutor: 'นัชชี',
            farfetchd: 'คาโมเนกิ',
            fearow: 'โอนิดริล',
            feebas: 'ฮินบาส',
            fennekin: 'ฟ็อกโกะ',
            feraligatr: 'ออไดล์',
            flareon: 'บูสเตอร์',
            fletchinder: 'ฮิโนยาโคมะ',
            fletchling: 'ยายาโคมะ',
            froakie: 'เคโรมัตซึ',
            frogadier: 'เกโคกาชิระ',
            froslass: 'ยูกิเมโนโกะ',
            gastly: 'โกส',
            genesect: 'เกโนเซ็กท์',
            gengar: 'เก็งกา',
            glalie: 'โอนิโกริ',
            gloom: 'คุไซฮานะ',
            golbat: 'โกลแบท',
            golduck: 'โกลดัก',
            greninja: 'เก็คโคกะ',
            grimer: 'เบ็ทเบเตอร์',
            grotle: 'ฮายาชิกาเมะ',
            grovyle: 'จุปไทล์',
            gyarados: 'เกียราดอส',
            haunter: 'โกสท์',
            heatmor: 'คุยทาแรน',
            heliolisk: 'เอเลซาร์ด',
            helioptile: 'เอลิคิเทล',
            heracross: 'เฮราครอส',
            'ho-oh': 'โฮโอ',
            hoppip: 'ฮาเน็กโกะ',
            horsea: 'ทัททู',
            incineroar: 'กาโอกาเอ็น',
            infernape: 'โกคาซารุ',
            inkay: 'มาอีกะ',
            ivysaur: 'ฟุชิกิโซ',
            jolteon: 'ธันเดอร์ส',
            jumpluff: 'วาทักโกะ',
            jynx: 'รูจูลา',
            kakuna: 'โคคูน',
            kingdra: 'คิงดรา',
            kricketot: 'โคโรโบชิ',
            kricketune: 'โคโรท็อก',
            kyurem: 'คิวเรม',
            lapras: 'ลาพลาซ',
            larvesta: 'เมลาร์วา',
            litleo: 'ชิชิโกะ',
            litten: 'เนียบี',
            lucario: 'ลูคาริโอ',
            lugia: 'ลูเกีย',
            lunatone: 'ลูนาโทน',
            machamp: 'ไคริกี',
            machoke: 'โกริกี',
            machop: 'วันริกี',
            magcargo: 'มักคาร์โก',
            magikarp: 'คอยคิง',
            magmar: 'บูเบอร์',
            magnemite: 'คอยล์',
            magneton: 'แรคอยล์',
            magnezone: 'จิบะคอยล์',
            malamar: 'คาลามาเนโร',
            manectric: 'ไลโวลต์',
            maractus: 'มาราคัจจิ',
            marowak: 'การะการะ',
            marshtomp: 'นูมาโคร',
            meganium: 'เมกาเนียม',
            meowth: 'เนียส',
            metapod: 'ทรานเซล',
            mew: 'มิว',
            mewtwo: 'มิวทู',
            milotic: 'มิโลคารอส',
            mimikyu: 'มิมิคคิว',
            moltres: 'ไฟเยอร์',
            monferno: 'โมคาซารุ',
            morelull: 'เนมาชู',
            mudkip: 'มิซึโกโร',
            muk: 'เบ็ทเบตัน',
            natu: 'เนที',
            ninetales: 'คิวคอน',
            numel: 'ดอนเมล',
            oddish: 'นาโซโนะคุสะ',
            onix: 'อิวาร์ค',
            oshawott: 'มิจูมารุ',
            paras: 'พารัส',
            parasect: 'พาราเซ็คท์',
            persian: 'เปอร์เซียน',
            phanpy: 'โกมาโซ',
            pichu: 'พิชู',
            pidgeot: 'พีเจียต',
            pidgeotto: 'พีเจียน',
            pidgey: 'ป็อปโปะ',
            pignite: 'จาโอบู',
            pikachu: 'พิคาชู',
            pinsir: 'ไคลอส',
            piplup: 'โพจจามะ',
            politoed: 'เนียวโรบอน',
            poliwag: 'เนียวโรโมะ',
            poliwhirl: 'เนียวโรโซ',
            poliwrath: 'นิวโรโทโน',
            ponyta: 'โพนีตะ',
            popplio: 'อชิมาริ',
            primarina: 'อชิเรเน',
            prinplup: 'โพจไทชิ',
            psyduck: 'โคดัก',
            pyroar: 'คาเอ็นจิชิ',
            quagsire: 'นูโอ',
            quilava: 'แม็กมาราชิ',
            quilladin: 'ฮาริบอร์ก',
            raichu: 'ไรชู',
            rapidash: 'แกลล็อป',
            reuniclus: 'แลนคูลัส',
            rhydon: 'ไซดอน',
            rhyhorn: 'ไซฮอร์น',
            rhyperior: 'โดไซดอน',
            riolu: 'ริโอลุ',
            rowlet: 'โมคุโร',
            salandit: 'ยาโทโมริ',
            salazzle: 'เอ็นนิวท์',
            samurott: 'ไดเคนคิ',
            sceptile: 'จูไคน',
            seadra: 'ซีดรา',
            serperior: 'จาโลดา',
            servine: 'จาโนวี',
            shellder: 'เชลเดอร์',
            shiinotic: 'มาเชโดะ',
            shuckle: 'ซึโบซึโบะ',
            skiploom: 'โพพ็อกโกะ',
            slowbro: 'ยาโดรัน',
            slowking: 'ยาโดคิง',
            slowpoke: 'ยาดง',
            slugma: 'มักแม็ก',
            snivy: 'ซึทาจะ',
            snorlax: 'คาบิกอน',
            snorunt: 'ยูกิวาราชิ',
            solosis: 'ยูนิรัน',
            solrock: 'โซลร็อก',
            spearow: 'โอนิสึซึเมะ',
            spinarak: 'อิโตมารุ',
            squirtle: 'เซนิกาเมะ',
            stunfisk: 'แมกเกียว',
            swampert: 'ลากลาจ',
            swanna: 'สวอนนา',
            talonflame: 'ไฟร์แอโรว์',
            tepig: 'โพคาบู',
            torchic: 'อาชาโม',
            torracat: 'เนียฮีท',
            torterra: 'โดไดโทส',
            totodile: 'วานิโนโกะ',
            toxicroak: 'โดคูร็อก',
            treecko: 'คิโมริ',
            tropius: 'โทรพิอุส',
            turtonator: 'บาคุกาเมส',
            turtwig: 'นาเอเติล',
            typhlosion: 'แบ็กฟูน',
            vaporeon: 'ชาวเวอร์ส',
            venusaur: 'ฟุชิกิบานะ',
            vileplume: 'รัฟเฟรเซีย',
            volcanion: 'โวลเคเนียน',
            volcarona: 'อุลกามอธ',
            vulpix: 'โรคอน',
            wailmer: 'เวลโกะ',
            wailord: 'เวลโอ',
            wartortle: 'คาเมล',
            weedle: 'บีเดิล',
            wishiwashi: 'โยวาชิ',
            wobbuffet: 'โซนานส์',
            wooper: 'อูปา',
            wynaut: 'โซนาโนะ',
            xatu: 'เนทิโอ',
            zapdos: 'ธันเดอร์',
            zebstrika: 'ซีบรายกา',
            zubat: 'ซูแบท',
            raikou: 'ไรโค',
            entei: 'เอ็นเต',
            suicune: 'ซุยคูน',
            houndour: 'เดลวิล',
            houndoom: 'เฮลการ์',
            teddiursa: 'ฮิเมกุมะ',
            ursaring: 'ริงกุมะ',
            mareep: 'เมรีป',
            flaaffy: 'โมโคโค',
            ampharos: 'เด็นริว',
            misdreavus: 'มูมา',
            mismagius: 'มูมาจิ',
            skarmory: 'แอร์มุโด',
            larvitar: 'โยกิราส',
            pupitar: 'ซานากิราส',
            tyranitar: 'บันกิราส',
            gligar: 'ไกลกา',
            gliscor: 'ไกลออน',
            sneasel: 'นิวลา',
            weavile: 'มานิวลา',
            azurill: 'รูริริ',
            marill: 'มาริล',
            azumarill: 'มาริลลิ',
            bronzor: 'โดมิเรอร์',
            bronzong: 'โดทาคุน',
            steelix: 'ฮากาเนล',
            growlithe: 'การ์ดี',
            arcanine: 'วินดี',
            pineco: 'คุนุกิดามะ',
            forretress: 'ฟอเรทอส',
            togedemaru: 'โทเกะเดมารุ',
            shroomish: 'คิโนโคโค',
            breloom: 'คิโนกัซซา',
            happiny: 'พินพูคุ',
            chansey: 'ลัคกี',
            ralts: 'ราลท์ซ',
            kirlia: 'เคอเรีย',
            gallade: 'เอรูเรโด',
            gardevoir: 'เซอไนท์',
            cleffa: 'ปี',
            clefairy: 'ปิปปี',
            clefable: 'ปิคซี',
            wingull: 'คาโมเมะ',
            pelipper: 'เพลิปเปอร์',
            lotad: 'ฮาซึโบ',
            lombre: 'ฮาซึเบรโร',
            ludicolo: 'รุนปัปปา',
            meditite: 'อาซานัน',
            medicham: 'ชาเรม',
            beldum: 'ดันบัล',
            metang: 'เมแทงก์',
            metagross: 'เมทากรอส',
            baltoy: 'ยาจิลอน',
            claydol: 'เนนดอลล์',
            sableye: 'ยามิรามิ',
            duskull: 'โยมาวารุ',
            dusclops: 'ซามาโยรุ',
            dusknoir: 'โยนัว',
            jirachi: 'จิราชิ',
            aipom: 'เอย์แพม',
            ambipom: 'เอเทโบธ',
            slakoth: 'นามาเคโร',
            vigoroth: 'ยารุคิโมโนะ',
            slaking: 'เค็คคิง',
            torkoal: 'โคทอยซ์',
            staryu: 'ฮิโตเดมัน',
            starmie: 'สตาร์มี',
            regice: 'เรจิไอซ์',
            geodude: 'อิชิซึบูเตะ',
            graveler: 'โกโลน',
            golem: 'โกโลเนีย',
            regirock: 'เรจิร็อก',
            aron: 'โคโคโดรา',
            lairon: 'โคโดรา',
            aggron: 'บอสโกโดรา',
            porygon: 'โพรีกอน',
            porygon2: 'โพรีกอน2',
            porygonz: 'โพรีกอน-แซด',
            registeel: 'เรจิสตีล',
            cranidos: 'ซึไกโดส',
            rampardos: 'แรมพาล์ด',
            shieldon: 'ทาเทท็อปส์',
            bastiodon: 'โทริเด็ปส์',
            tyrunt: 'จิโกรัส',
            tyrantrum: 'กาจิโกรัส',
            groudon: 'กราดอน',
            rayquaza: 'เร็คควอซา',
            aerodactyl: 'พเทอรา',
            omanyte: 'ออมไนต์',
            omastar: 'ออมสตาร์',
            tirtouga: 'โปรโตกา',
            carracosta: 'อบาโกรา',
            carvanha: 'คิบาเนีย',
            sharpedo: 'ซาเมฮาเดอร์',
            kyogre: 'ไคออกา',
            lileep: 'ลิลีลา',
            cradily: 'ยูเรเดิล',
            anorith: 'อน็อปธ์',
            armaldo: 'อามัลโด',
            scyther: 'สไตรค์',
            scizor: 'ฮัซซัม',
            xerneas: 'เซอเนียส',
            swablu: 'ทิลท์โท',
            altaria: 'ทิลทาลิส',
            togepi: 'โทเกปี',
            togetic: 'โทเกชิก',
            togekiss: 'โทเกคิส',
            bagon: 'ทัทซึเบ',
            shelgon: 'โคโมรู',
            salamence: 'โบมันเดอร์',
            yveltal: 'อีเวลทอล',
            kabuto: 'คาบูโตะ',
            kabutops: 'คาบูท็อปส์',
            archen: 'อาเคน',
            archeops: 'อาเคโอส',
            gible: 'ฟุคามารุ',
            gabite: 'กาไบต์',
            garchomp: 'กาเบรียส',
            zygarde: 'ซีการ์ด',
            amaura: 'อมารุส',
            aurorus: 'อมารูรูกา'
        },
        popin: {
            socialGiftPromptHigh: {
                text: 'ให้ของขวัญจากโปเกมอนกกับเพื่อนๆ!',
                cta: 'โอเค'
            },
            challengePrompt: {
                text: 'ยอดเยี่ยมมากที่ชนะการประลองในยิมนั้น!',
                text2: 'แต่คุณจะเอาชนะเพื่อนได้หรือไม่',
                cta: 'ทำได้แน่นอน'
            },
            challengeInvite: {
                text: 'ดวลกับเพื่อนและคุณอาจได้รับ {pokemon} หายาก!',
                cta: 'โอเค'
            }
        },
        quiz: {
            playNow: 'มาเล่นกัน',
            share: 'แชร์',
            shareMsg: 'มีนิสัย {nature}',
            playerIs: '{player} คือ',
            tap: 'แตะเพื่อดู',
            tryAgain: 'ลองอีกครั้ง',
            whichStarter: 'คุณเป็นโปเกมอนเริ่มต้นตัวไหน',
            yourPersonality: '{player}\nลักษณะนิสัย {nature} ของคุณตรงกัน'
        },
        quizResult: {
            bulbasaur: 'เป็นผู้ใหญ่',
            charmander: 'แก่แดด',
            chespin: 'สบายๆ',
            chikorita: 'ซื่อสัตย์',
            chimchar: 'ซุกซน',
            cyndaquil: 'ขี้ขลาด',
            fennekin: 'ดื้อไม่ฟังใคร',
            froakie: 'ระมัดระวัง',
            litten: 'ขี้เหงา',
            mudkip: 'แปรปรวน',
            oshawott: 'ซุกซนแก่น',
            piplup: 'ขี้เกรงใจ',
            popplio: 'สงบ',
            rowlet: 'มีความพยายาม',
            snivy: 'จริงจัง',
            squirtle: 'ใจกล้า',
            tepig: 'ใจร้อน',
            torchic: 'กล้าหาญ',
            totodile: 'ร่าเริง',
            treecko: 'เงียบ',
            turtwig: 'ขี้อาย'
        },
        quizShare: {
            bulbasaur: '• เป็นผู้ใหญ่\n• ไว้ใจได้\n• ชอบปฏิบัติ\n• เต็มใจช่วยผู้อื่นเสมอ',
            charmander: '• แก่แดด\n• มองโลกในแง่ดี\n• มุ่งมั่น\n• ไม่ยอมให้อะไรมาขวางเส้นทางสู่ชัยชนะ!',
            chespin: '• สบายๆ\n• อดทน\n• มีพรสวรรค์\n• เป็นคนสบายๆ แต่เวลาโกรธ จะเก็บไว้ในใจ!',
            chikorita: '• ซื่อสัตย์\n• อ่อนไหวง่าย\n• ชอบปกป้อง\n• เชื่อใจคนอื่นง่าย เป็นคนที่อบอุ่น เอาใจใส่ผู้อื่น',
            chimchar: '• ซุกซน\n• สร้างสรรค์\n• กระตือรือร้น\n• ตัวสร้างสีสันของกลุ่ม!',
            cyndaquil: '• ขี้ขลาด\n• ไตร่ตรองแล้ว\n• รอบคอบ\n• ชอบทำกิจกรรมที่อยู่ภายในอาคารกับคนที่สนิทจริงๆ',
            fennekin: '• ดื้อไม่ฟังใคร\n• ใจดี\n• ซื่อสัตย์\n• มั่นคงและจริงใจกับเพื่อน',
            froakie: '• ระมัดระวัง\n• ใช้สัญชาตญาณ\n• ฉลาด\n• มีความสามารถพิเศษในการพลิกวิกฤติให้เป็นโอกาส',
            litten: '• ขี้เหงา\n• มีระเบียบ\n• พึ่งพาได้\n• เมื่อศรัทธาสิ่งใดแล้ว จะทำจนถึงที่สุด',
            mudkip: '• แปรปรวน\n• ขยัน\n• ละเอียดอ่อน\n• เป็นคนร่าเริง มักจะมีไอเดียใหม่ๆ อยู่เสมอ!',
            oshawott: '• ซุกซนแก่น\n• มีเสน่ห์\n• ชอบงานอดิเรก\n• ละลายหัวใจผู้อื่นได้ด้วยรอยยิ้มซุกซน',
            piplup: '• ขี้เกรงใจ\n• เห็นอกเห็นใจผู้อื่น\n• ชอบช่วยเหลือ\n• ผู้ฟังที่ดีที่สุด',
            popplio: '• สงบ\n• มีวิสัยทัศน์\n• มีหัวศิลป์\n• เชื่อว่าโลกนี้คือผืนผ้าใบของเรา',
            rowlet: '• มีความพยายาม\n• ชอบคิดค้น\n• มีเหตุผล\n• นักแก้ปัญหาที่ชอบวางแผนอยู่เสมอ',
            snivy: '• จริงจัง\n• สง่างาม\n• ตรงไปตรงมา\n• ทนการโดนดูถูกไม่ได้',
            squirtle: '• ใจกล้า\n• ยึดมั่นอุดมการณ์\n• ผู้นำโดยธรรมชาติ\n• เมื่อล้ม จะลุกขึ้นมาสู้ใหม่เสมอ',
            tepig: '• ใจร้อน\n• กล้าพูดตรงๆ\n• หิวตลอดเวลา\n• เรื่องกินสำคัญที่สุด!',
            torchic: '• กล้าหาญ\n• ชอบผจญภัย\n• เชื่อใจได้\n• มองหาความท้าทายใหม่ๆ เสมอ!',
            totodile: '• ร่าเริง\n• หุนหัน\n• สดใสร่าเริง\n• ให้กำลังใจผู้อื่นได้ในทุกสถานการณ์!',
            treecko: '• เงียบ\n• มั่นใจ\n• ชอบวิเคราะห์\n• แม้อยู่ภายใต้ความกดดัน ก็ยังสงบนิ่งได้',
            turtwig: '• ขี้อาย\n• น่านับถือ\n• ชอบปกป้อง\n• เป็นคนชอบเก็บตัวเงียบๆ แต่มีกำลังใจที่เข้มแข็ง'
        },
        raid: {
            bossApproaching: 'บอสกำลังมา',
            bossWarning: '   ระวัง!',
            hp: 'HP: {percent}%',
            event: 'เรด',
            rank: 'อันดับเรด',
            raid: 'ปาร์ตี้',
            timerLabel: 'กิจกรรมสิ้นสุด:',
            raidPack: 'แพ็คเรด',
            stageInfo1: 'สำรวจดูว่าเป็นบอสตัวไหน!',
            stageInfo2: 'รวมทีมกับเพื่อนเพื่อปราบบอส!',
            requireGymPopup: {
                label1: 'ด่านต่อไปเหมาะสำหรับเทรนเนอร์ที่มีอันดับสูงกว่านี้',
                label2: 'ไปให้ถึงยิมที่ {number} เพื่อเล่นต่อ!',
                button: 'ไปกันเลย'
            },
            party: {
                title: 'ปาร์ตี้เรด',
                subtitle: 'รวมทีมกับเพื่อนเพื่อปราบบอส!',
                expel: 'ไล่ออก',
                leave: 'ออก'
            },
            partyExpel: {
                confirm: 'แน่ใจหรือไม่ว่าต้องการไล่สมาชิกเรดคนนี้ออก',
                expelled: 'ผู้เล่นถูกขับไล่ออกจากปาร์ตี้เรด'
            },
            partyLeave: {
                confirm: 'แน่ใจหรือไม่ว่าต้องการออกจากปาร์ตี้เรดนี้',
                left: 'คุณออกจากปาร์ตี้เรด'
            },
            join: {
                title: 'ต้องการเข้าร่วมปาร์ตี้เรดนี้ไหม',
                subtitle: 'คุณจะเสียความก้าวหน้าในด่านเรดทั้งหมด'
            },
            stage: 'ด่าน {stage}',
            socialInvite: '{inviter} ต้องการให้คุณช่วยปราบ {boss} ในด่านที่ {number}! (เหลือ HP {percent}%)',
            exploreBtn: 'สำรวจ',
            revivePopup: {
                title: 'ไม่นะ! {pokemon} ได้รับบาดเจ็บ!',
                question: 'ดูโฆษณาเพื่อเล่นต่อไหม',
                cancel: 'ออก',
                confirm: 'ฟื้นคืนชีพ'
            },
            bossRatingInfo: 'ด่าน {stage}',
            battleScore: 'คะแนน',
            watchAdToBattle: {
                title: 'คุณต้องมีบัตรผ่านเรดเพื่อต่อสู้!',
                question: 'ดูโฆษณาเพื่อเล่นต่อไหม',
                confirm: 'ไป',
                cancel: 'ออก'
            },
            rankingTitle: 'อันดับเรด',
            notEnoughPasses: 'เรดพาสถัดไปในอีก: {remainingTime}',
            home: 'ยิม',
            caution: 'ระวัง!',
            defeatBoss: 'เอาชนะบอสเพื่อเปิด',
            totalDamage: 'ความเสียหายรวม',
            invitePrompt: {
                title: 'คุณต้องมีบัตรผ่านเรดเพื่อต่อสู้!',
                subTitle: 'หาสมาชิกเพิ่มเพื่อกำจัด {boss} ให้ไวขึ้น!'
            },
            tutorial: {
                msg1: '[b]เอาชนะด้วยโปเกมอน จึงจะสร้างความเสียหายให้บอสได้[/b]\n\nถ้าโปเกมอนของคุณแพ้ การต่อสู้จะจบลง พยายามรอดชีวิตให้ได้นานที่สุด!'
            },
            invitePopup: {
                title1: 'ชวนเพื่อนๆ มาเล่น Pokémon Medallion Battle',
                title2: 'หลังจากที่พวกเขาติดตั้งเกมแล้ว คุณจะได้รับแพ็คซิลเวอร์!',
                title3: 'การันตี {value}+ IV'
            },
            rankingPopup: {
                bestScoreButton: 'คะแนน',
                totalDamageButton: 'ความเสียหายรวม'
            }
        },
        raidAnnouncement: {
            header: 'กิจกรรมเรด',
            message: 'รวมทีมกับเพื่อนเพื่อปราบบอส!',
            reward: 'รางวัลเรดจะดีขึ้นเมื่อคุณไปถึงด่านสูงๆ!'
        },
        resultScreen: {
            nextBadge: 'เหรีญตรา\nถัดไป',
            reward: 'รางวัล',
            watchAd: 'ดูโฆษณา',
            winner: 'ผู้ชนะ!',
            victories: 'ชัยชนะ',
            liveOppBonus: 'โบนัสคู่ต่อสู้แบบไลฟ์',
            quickMatchBonus: 'โบนัสการจับคู่ด่วน',
            score: 'คะแนน',
            totalDamage: 'ความเสียหายรวม'
        },
        settingScreen: {
            forfeit: 'ริบ',
            music: 'เพลง',
            pokemonPreview: 'ตัวอย่างโปเกมอน',
            privacyPolicy: 'นโยบายความเป็นส่วนตัว',
            settings: 'การตั้งค่า',
            soundEffects: 'เอฟเฟกต์เสียง',
            supportId: 'ID การสนับสนุน:{id}',
            termsOfService: 'เงื่อนไขการให้บริการ'
        },
        shopScreen: {
            claimFreePack: 'รับ',
            comingSoon: 'เร็วๆ\nนี้',
            medal: {
                item: 'เหรียญรางวัล'
            },
            medalPack: {
                item: 'แพ็คเหรียญรางวัล'
            },
            freePack: {
                item: 'เหรียญดาว'
            },
            adsMedal: {
                item: 'เหรียญโปเก'
            },
            adMedal: {
                item: 'เหรียญโปเก'
            },
            gymPack: {
                item: 'แพ็คโปเก'
            },
            guaranteed: 'รับประกัน',
            left: 'เหลืออีก',
            freePackDescription: 'อาจมี\nโปเกมอนเริ่มต้น',
            tapToOpen: 'แตะเพื่อเปิด',
            notReady: 'คุณรับเหรียญดาวนี้แล้ว เหรียญดาวถัดไปจะมาในอีก {h} ชม. {m} นาที',
            silverPack: {
                item: 'แพ็คซิลเวอร์'
            },
            guaranteedIv: 'การันตี {guaranteedIv}+ IV',
            gameCoin: 'แลกเปลี่ยนโทเค็น',
            exchange: {
                title: 'ตลาด',
                refresh: 'รีเฟรชในอีก:',
                refreshBtn: 'รีเฟรช',
                selectToTrade: 'แตะเพื่อเลือกโปเกมอนที่จะแลก',
                select: 'เลือกแล้ว',
                require: 'ที่ต้องการ',
                trade: 'แลก'
            }
        },
        sslString: {
            btn_challengeNow: 'ท้าทายเลย',
            challenge: {
                text: '{challengerName} ท้าให้คุณลองเล่น Pokémon Medallion Battle'
            },
            bossDefeated: {
                text: '{player} สังหาร {boss}! มารับรางวัล!'
            },
            btn_getReward: 'รับ'
        },
        starPack: {
            claim: 'รับ',
            cooldown: 'แพ็คดาวใหม่ในอีก',
            countdownTime: '{h}ชม. {m}นาที',
            title: 'แพ็คดาว'
        },
        taskScreen: {
            achievement: 'ความสำเร็จ',
            claimedReward: 'รับแล้ว',
            countdownTime: '{h}ชม. {m}นาที',
            daily: 'ประจำวัน',
            tapToClaim: 'แตะเพื่อ\nรับ',
            taskRestartIn: 'งานจะรีสตาร์ทในอีก:',
            tasks: 'งาน'
        },
        tier: {
            tier1: 'มอนสเตอร์บอล',
            tier2: 'ซูเปอร์บอล',
            tier3: 'ไฮเปอร์บอล'
        },
        type: {
            dragon: 'มังกร',
            electric: 'สายฟ้า',
            fighting: 'ต่อสู้',
            fire: 'ไฟฟ้า',
            grass: 'หญ้า',
            normal: 'ไร้สี',
            psychic: 'พลังจิต',
            water: 'น้ำ'
        },
        raidName: {
            moltres: 'อนุสรณ์หลอมละลาย',
            zapdos: 'สถานีที่ถูกปิด',
            articuno: 'ปากน้ำยะเยือกแข็ง',
            mewtwo: 'วงกตริมทะเลสาบ',
            raikou: 'พายุสายฟ้าฟาด',
            entei: 'กองเพลิงมอดไหม้',
            suicune: 'ห่าฝนแห่งความหดหู่',
            deoxys: 'การบุกรุกที่มีเงื่อนงำ',
            regice: 'ป่าเยือกแข็ง',
            regirock: 'ซากปรักหักพังของป้อม',
            registeel: 'ฐานทัพแข็งแกร่ง',
            groudon: 'ทวารแห่งปฐมบท: พื้นดิน',
            kyogre: 'ทวารแห่งปฐมบท: ทะเล'
        },
        subscriptionTutorial: {
            title: 'รับการแจ้งเตือน',
            subtitle: 'จะได้ไม่พลาดข่าวสาร!',
            caption1: 'เปิด Pokémon Medallion ในแอป Facebook Gaming',
            caption2: 'เข้าถึงการตั้งค่า Facebook Game',
            caption3: 'เปิดใช้งานข้อความ'
        }
    },
    'resources/strings/zh-TW.json': {
        ability: {
            acid: '溶解液',
            ancientPower: '原始之力',
            aquaJet: '水流噴射',
            aquaRing: '水流環',
            aquaTail: '水流尾',
            aromatherapy: '芳香治療',
            auraSphere: '波導彈',
            batonPass: '接棒',
            bite: '咬住',
            blazeKick: '火焰踢',
            blizzard: '暴風雪',
            bonemerang: '骨頭回力鏢',
            braveBird1: '勇鳥猛攻',
            brickBreak: '劈瓦',
            bubble: '泡沫',
            bubbleBeam: '泡沫光線',
            bulletSeed: '種子機關槍',
            closeCombat: '近身戰',
            confusion: '念力',
            counter: '雙倍奉還',
            crunch: '咬碎',
            darkestLariat: 'ＤＤ金勾臂',
            dig: '挖洞',
            discharge: '放電',
            doubleKick: '二連踢',
            dreamEater: '食夢',
            drought: '猛暑',
            earthquake: '地震',
            ember: '火花',
            eruption: '噴火',
            fireBlast: '大字爆炎',
            fireFang: '火焰牙',
            fireSpin: '火焰旋渦',
            flamethrower: '噴射火焰',
            flameWheel: '火焰輪',
            flareBlitz2: '閃焰衝鋒',
            flareBlitz3: '閃焰衝鋒',
            forcePalm: '發勁',
            foresight: '識破',
            furyCutter: '連斬',
            futureSight: '預知未來',
            guillotine1: '斷頭鉗',
            gust: '起風',
            hammerArm: '臂錘',
            harden: '變硬',
            healPulse: '治癒波動',
            flameCharge: '蓄能焰襲',
            heatCrash2: '高溫重壓',
            heatCrash3: '高溫重壓',
            hydroCannon: '加農水炮',
            hydroPump: '水炮',
            hyperBeam2: '破壞光線',
            hypnosis: '催眠術',
            iceBeam: '冰凍光束',
            icePunch: '冰凍拳',
            icyWind: '冰凍之風',
            karateChop: '空手劈',
            lastResort1: '珍藏',
            lavaPlume: '噴煙',
            leafBlade: '葉刃',
            leafStorm: '飛葉風暴',
            leafTornado: '青草攪拌器',
            leechSeed: '寄生種子',
            lick: '惡魔之吻',
            lowSweep: '下盤踢',
            luckyChant: '幸運咒語',
            megahorn: '超級角擊',
            mindReader: '心之眼',
            miracleEye: '奇跡之眼',
            mirrorCoat: '鏡面反射',
            mudBomb: '泥巴炸彈',
            muddyWater: '濁流',
            mudSlap: '擲泥',
            mysticalFire: '魔法火焰',
            odorSleuth: '氣味偵測',
            outrage2: '逆鱗',
            outrage3: '逆鱗',
            overheat: '過熱',
            payDay1: '聚寶功',
            payDay2: '聚寶功',
            petalBlizzard: '落英繽紛',
            petalDance2: '花瓣舞',
            petalDance3: '花瓣舞',
            phantomForce: '潛靈奇襲',
            poisonJab: '毒擊',
            poisonSting: '毒針',
            powerWhip: '強力鞭打',
            protect: '守住',
            psychic: '精神強念',
            psywave: '精神波',
            quickAttack: '電光一閃',
            rainDance: '求雨',
            razorLeaf: '飛葉快刀',
            razorShell: '貝殼刃',
            rockTomb: '岩石封鎖',
            rockWrecker: '岩石炮',
            seedBomb: '種子炸彈',
            shadowBall: '暗影球',
            shadowSneak: '影子偷襲',
            shellTrap: '陷阱甲殼',
            silverWind: '銀色旋風',
            sing: '唱歌',
            skyAttack1: '神鳥猛擊',
            skyAttack3: '神鳥猛擊',
            skyUppercut: '衝天拳',
            sleepPowder: '催眠粉',
            solarBeam: '日光束',
            sparklingAria: '泡影的詠歎調',
            spikeCannon: '尖刺加農炮',
            spikes: '撒菱',
            spikyShield: '尖刺防守',
            spore: '蘑菇孢子',
            stealthRock: '隱形岩',
            stickyWeb: '黏黏網',
            submission3: '地獄翻滾',
            sunnyDay: '大晴天',
            superpower: '蠻力',
            synthesis: '光合作用',
            takeDown1: '猛撞',
            takeDown2: '猛撞',
            thunder: '打雷',
            thunderbolt: '十萬伏特',
            thunderShock: '電擊',
            topsyTurvy1: '顛倒',
            topsyTurvy2: '顛倒',
            twineedle2: '雙針',
            vineWhip: '藤鞭',
            voltTackle1: '伏特攻擊',
            voltTackle2: '伏特攻擊',
            waterfall: '攀瀑',
            waterGun: '水槍',
            waterPulse: '水之波動',
            waterShuriken: '飛水手裡劍',
            wish: '祈願',
            withdraw: '縮入殼中',
            woodHammer3: '木槌',
            wringOut2: '絞緊',
            wringOut3: '絞緊',
            xScissor: '十字剪',
            yawn: '哈欠',
            zapCannon: '電磁炮',
            flareBlitz1: '閃焰衝鋒',
            airCutter: '空氣利刃',
            airSlash: '空氣斬',
            electricTerrain: '電氣場地',
            lockOn: '鎖定',
            parabolicCharge1: '拋物面充電',
            wildCharge1: '瘋狂伏特',
            psybeam: '幻象光線',
            sludgeBomb: '污泥炸彈',
            thunderPunch: '雷電拳',
            mudShot: '泥巴射擊',
            willOWisp: '鬼火',
            spark: '電光',
            thrash1: '大鬧一番',
            extremeSpeed: '神速',
            nobleRoar2: '戰吼',
            acidArmor: '溶化',
            selfDestruct: '自爆',
            explosion: '大爆炸',
            psystrike: '精神擊破',
            psychoBoost: '精神突進',
            technoBlast: '高科技光炮',
            steamEruption: '蒸汽爆炸',
            bulldoze: '重踏',
            spiritShackle: '縫影',
            dynamicPunch: '爆裂拳',
            bounce: '彈跳',
            sludge: '污泥攻擊',
            absorb: '吸取',
            fieryDance: '火之舞',
            fireLash: '火焰鞭',
            painSplit: '分擔痛楚',
            powerGem: '力量寶石',
            machPunch: '音速拳',
            psychoCut: '精神利刃',
            metronome1: '節拍器',
            metronome2: '節拍器',
            moonlight: '月光',
            softBoiled: '生蛋',
            crossChop: '十字劈',
            playRough: '嬉鬧',
            powerUpPunch: '增強拳',
            rapidSpin: '高速旋轉',
            haze: '黑霧',
            nightSlash: '暗襲要害',
            iceShard: '冰礫',
            frostBreath: '冰息',
            hex: '禍不單行',
            agility: '高速移動',
            beatUp1: '圍攻',
            pressure: '壓迫感',
            earthPower: '大地之力',
            present: '禮物',
            psyshock: '精神衝擊',
            grassKnot2: '打草結',
            grassKnot3: '打草結',
            moonblast: '月亮之力',
            zenHeadbutt: '意念頭錘',
            ionDeluge: '等離子浴',
            ironDefense: '鐵壁',
            extrasensory: '神通力',
            darkPulse: '惡之波動',
            sacredFire: '神聖之火',
            shadowPunch: '暗影拳',
            thunderFang: '雷電牙',
            poisonFang: '劇毒牙',
            crossPoison: '十字毒刃',
            doubleHit1: '二連擊',
            doubleHit2: '二連擊',
            dive: '潛水',
            fly: '飛翔',
            hail: '冰雹',
            rockThrow: '落石',
            rockSlide: '岩崩',
            magnitude2: '震級',
            acrobatics: '雜技',
            sandstorm: '沙暴',
            metalBurst2: '金屬爆炸',
            headSmash1: '雙刃頭錘',
            headSmash2: '雙刃頭錘',
            heavySlam2: '重磅衝撞',
            prehistoricCall: '遠古呼聲',
            dragonAscent: '畫龍點睛',
            auroraBeam: '極光束',
            brine: '鹽水',
            energyBall: '能量球',
            smackDown: '擊落',
            precipiceBlades: '斷崖之劍',
            originPulse: '根源波動',
            glaciate: '冰封世界',
            bulletPunch2: '子彈拳',
            doubleEdge1: '捨身衝撞',
            dracoMeteor: '流星群',
            oblivionWing: '死亡之翼',
            landsWrath: '大地神力',
            geomancy: '大地掌控',
            aerialAce: '燕返',
            lovelyKiss: '惡魔之吻',
            conversion: '紋理',
            dragonRush3: '龍之俯衝',
            iceFang: '冰凍牙',
            healBell: '治癒鈴聲',
            stoneEdge: '尖石攻擊',
            slackOff1: '偷懶',
            slackOff2: '偷懶',
            uproar1: '吵鬧',
            peck: '啄',
            magicalLeaf: '魔法葉',
            disarmingVoice: '魅惑之聲',
            freezeDry: '冷凍乾燥',
            pursuit: '追打',
            zingZap: '麻麻刺刺'
        },
        abilityShortDesc: {
            clearance: '移除進場能力',
            priority: '在能力未發動前進行戰鬥',
            protect: '受到不會輸的保護',
            reveal: '現出 {value1} 隻備戰寶可夢'
        },
        abilityType: {
            clearance: '在支援和威脅的能力啟用前移除它們',
            priority: '在對手的戰鬥寶可夢未能發動能力前進行戰鬥',
            arena: '{value2} 戰鬥寶可夢獲得 {value1} CP 值',
            hazard: '對手的下 {value2} 隻戰鬥寶可夢失去 {value1} CP 值',
            protect: '寶可夢受到一回合不會輸的保護',
            reveal: '現出 {value1} 隻對手的備戰寶可夢',
            se: '與 {value2} 寶可夢進行對戰時，會增加 {value1} 倍 CP 值',
            transform: '變身成對手上一隻戰鬥寶可夢的複製品',
            wish: '您接下來出戰的 {value2} 戰鬥寶可夢將獲得 {value1} CP 值'
        },
        achievement: {
            collected: '收集 {targetValue} 種不同的寶可夢',
            evolved: '進化 {targetValue} 隻寶可夢',
            play: '進行 {targetValue} 場道館戰鬥',
            sentToLab: '傳送 {targetValue} 隻寶可夢到實驗室',
            win: '贏得 {targetValue} 場道館戰鬥'
        },
        adHouse: {
            0: {
                text1: '把寶可夢傳送到實驗室換取糖果',
                text2: '使用糖果來進化寶可夢吧！'
            },
            1: {
                text1: '現出備戰寶可夢！',
                text2: '記住：寶可夢是以 CP 值ˊ高低從左到右的順序排列！'
            },
            2: {
                text1: '保護您的寶可夢不受傷害',
                text2: '讓對手的能力變得無害！'
            },
            3: {
                text1: '優先順序讓您立即戰鬥',
                text2: '在寶可夢可以啟用能力前打敗牠們！'
            },
            4: {
                text1: '在競技場中強化寶可夢！',
                text2: '一次只有一個競技場會受到影響'
            },
            5: {
                text1: '進場威脅會傷害寶可夢',
                text2: '進場支援會治療寶可夢'
            },
            6: {
                text1: '移除進場威脅和進場支援！',
                text2: '發生在進場能力啟用前'
            }
        },
        arenaScreen: {
            effectsCanceled: '{arena1} 及 {arena2}\n已互相抵消！'
        },
        badge: {
            1: '新手',
            2: '青草',
            3: '火焰',
            4: '清水',
            5: '雷',
            6: '戰鬥',
            7: '精神',
            8: '龍',
            9: '叢林',
            10: '間歇泉',
            11: '妖精'
        },
        badgeHistoryScreen: {
            badges: '徽章'
        },
        badgeTitle: {
            1: '新手',
            2: '青草',
            3: '火焰',
            4: '清水',
            5: '雷',
            6: '戰鬥',
            7: '精神',
            8: '龍',
            9: '叢林',
            10: '間歇泉',
            11: '妖精'
        },
        badgeUnlock: {
            available: '可使用',
            gotBadge: '您獲得了 {type} 徽章！',
            unlock: '道館 {number} 已解除鎖定！'
        },
        bagScreen: {
            cannotBeUndone: '送出後不可取消。',
            cannotEvolveEquipped: '這隻寶可夢在隊伍裡，無法進化。',
            editTeam: '編輯隊伍',
            editTeamConfirmButton: '完成',
            error: {
                leaveConfirm: '您確定要離開嗎？',
                noDupeFamily: '您一次只能使用一隻 {family} 家族的寶可夢！',
                teamFull: '隊伍已滿！',
                teamateLimit: '您只能使用兩隻 {type} 寶可夢！',
                unableToSave: '無法儲存隊伍'
            },
            evolutionConfirm: '您確定要進化 {pokemonName} 嗎？',
            evolveButton: '進化',
            evolvesFrom: '由 {evolutionName} 進化而成',
            filterModeTab: '資料',
            get: '領取',
            information: '資料',
            selectPokemonFirst: '請先選擇要傳送到實驗室的寶可夢獎牌',
            sellPokemonBatchLimit: '一次最多只能傳送 {max} 隻寶可夢到實驗室',
            sellPokemonInTeam: '這隻寶可夢在隊伍裡，無法傳送到實驗室',
            send: '傳送',
            sendConfirmation1: '確定把 {pokemonCount} 隻寶可夢傳送到實驗室來獲得 {candiesSum} 顆糖果嗎？',
            sendDisclaimer: '確定要傳送寶可夢到實驗室嗎？',
            sendSuccesfull: '您已將 {pokemonCount} 隻寶可夢傳送到實驗室，獲得了 {candiesSum} 顆糖果',
            sendToLab: '傳送到實驗室',
            sendToLabConfirmButton: '取消',
            topForMoreInfo: '按一下寶可夢，可以查看資料或進化！',
            warning: {
                evolveEquipped: '要進化寶可夢，得先把牠從隊伍移除！',
                evolveEquippedQuestion: '您確定要進化嗎？',
                teamNotReady1: '很抱歉，這是個無效的隊伍！',
                teamNotReady2: '請完成隊伍編輯。'
            },
            expand: '想擴充您的背包嗎？',
            expandSucccess: '背包成功擴充到 {slot} 個空間'
        },
        callout: {
            opponentTurn: '對手的回合',
            yourTurn: '您的回合！'
        },
        challenge: {
            challengeBrag3: '{challenger}完全擊垮了{opponent}！',
            challengeBrag2: '{challenger}徹底粉碎了{opponent}！',
            challengeBrag1: '勝負很接近，不過{challenger}最後打敗了{opponent}！',
            challengeBrag0: '{challenger}與{opponent}打了場激烈的戰鬥！'
        },
        challengeReferralPrompt: {
            header: '贏了道館戰鬥真厲害！',
            text: '但您能打敗好友嗎？',
            button: '我可以！'
        },
        challengeScreen: {
            title: '決鬥',
            subTitle: '跟您的朋友對戰即可贏得獎勵！',
            battle: '戰鬥',
            quickMatch: '快速對戰',
            invite: '邀請',
            waitFor: '等待回覆...',
            notFoundUser: '我們找不到您有任何好友在玩 Pokémon Medallion Battle！',
            joinChallengeRequestHanging: '無法與好友連線',
            waitForPlayer: '等待玩家回覆...',
            switchAiTitle: '開始遊戲',
            switchAiText: '請稍後...',
            noDoubleChallenge: '您不能連續兩次挑戰同一位玩家。',
            skipBtn: '立刻遊玩',
            loadingFriends: '載入朋友...',
            alreadyPlayed1: '您今天已經挑戰過這個玩家了。',
            alreadyPlayed2: '挑戰新對手來賺取點數！'
        },
        chatbot: {
            btn_play: '立刻遊玩',
            btn_challengeNow: '快來挑戰',
            btn_claimNCandies: '領取 {amount} 顆糖果',
            desciptionLine1: '開啟提醒即可',
            desciptionLine2: '獲得大蔥鴨',
            message: 'Pokémon Medallion\n會寄送公告、小訣竅\n等給您。您可以在\n遊戲內的\n交談選項關閉訊息。',
            messageHeader: '開啟接收\nPokémon Medallion的訊息',
            notNow: '稍後再說',
            reminders: '提醒',
            thankYou: '感謝您的遊玩。要再來喲！',
            turnOn: '開啟',
            claimFreePack: '領取',
            freePackRemider: '您的免費星星獎牌準備好囉！',
            '24hReminder': '進化可獲得更強大的寶可夢，這次免費！',
            '30hReminder': '歡迎回來！令人興奮的戰鬥等著您挑戰！',
            '36hReminder': '{player}，我們想您了！快回來和我們一起玩！',
            '38hReminder': '{player}，有個 大蔥鴨 出現了！',
            '46hReminder': '星星套組中有稀有寶可夢，試試您的運氣吧！'
        },
        common: {
            fatal: '重大錯誤：{error}',
            tapToContinue: '按一下以繼續',
            alreadyInvited: '您今天已經邀請過這個玩家了'
        },
        daily: {
            coinSpent: '消費 {targetValue} 枚寶可幣',
            evolved: '進化 {targetValue} 隻寶可夢',
            play: '進行 {targetValue} 道館戰鬥',
            sentToLab: '傳送 {targetValue} 隻寶可夢到實驗室',
            win: '贏得 {targetValue} 場道館戰鬥'
        },
        error: {
            candyOverflowWarning: '若執行這項動作，您的糖果會超過持有上限！',
            coinOverflowWarning: '若執行這項動作，您的寶可幣會超過持有上限！',
            noAdSupport: '很抱歉，這個裝置目前不支援廣告',
            noOpponent: '無法找到對手，請稍後再試。',
            reconnectGiveUp: '遊戲連結已中斷，請重新連線',
            unableToConnect: '無法連線到伺服器',
            disconnectedInFight: '您的網路失去連線',
            unableToLoadAd: '沒有廣告可提供，請稍後再試',
            noSpaceInBag: '背包的空間不夠了！\n把寶可夢傳送到實驗室即可清出空間',
            notEnoughcandy: '糖果不夠了！\n把寶可夢傳送到實驗室即可換取糖果',
            notEnoughcoin: '寶可幣不夠了！贏得戰鬥即可獲得寶可幣',
            invalidTeam: '很抱歉，這是個無效的隊伍！請繼續完成隊伍編輯。',
            raidClosed: '團體戰已過期\n\n請繼續關注下一次的歷險！',
            raidClosedDetailed: '團體戰已過期\n\n{h} 小時 {m} 分鐘後再回來進行下一個歷險喔！',
            raidFull: '很抱歉，但是這個團體戰隊伍已滿',
            joinRaidCooldownError: '別急，您太快加入團體戰隊伍了！\n\n請於 {hours} 小時 {minutes} 分鐘後再試一次'
        },
        flag: {
            legendary: '傳奇'
        },
        ftue: {
            addToTeam: '在開始另一場戰鬥前，把{pokemon}加入隊伍吧！',
            battle2: '使用 {pokemon} 來戰鬥吧！',
            claimReward: '在開始另一場戰鬥前，快來領取您的任務獎勵',
            evolve: '讓寶可夢進化可以增加 CP 值和學習更多能力喔！\n\n按一下以開啟您的背包。',
            howEvolve: '進化會消耗糖果。\n\n傳送寶可夢到實驗室即可獲得糖果。',
            letsBattle: '[b]歡迎來到\nPokémon Medallion Battle！[/b]\n\n贏得 [b]3[/b] 場戰鬥即可獲得勝利！',
            opponentName: '敵對訓練家',
            playpk1: '[b]派出 {pokemon} 對戰吧！[/b]\n\nCP 值較高的寶可夢會贏得這輪戰鬥',
            playpk2: '[b]獲勝後由您先上。派出 {pokemon} 吧！[/b]',
            playpk3: '[b]選擇 {pokemon}[/b]\n\n某些寶可夢有特殊能力\n按寶可夢看看牠的能力',
            playStarter: '[b]派出 {pokemon} 結束戰鬥吧！[/b]\n\n與特定屬性的寶可夢對戰時，將有絕佳的效果並增加 CP 值。',
            playStarter2: '[b]派出 {pokemon} 結束戰鬥吧！[/b]',
            superEffective: '{pokemon} 的 {ability} 能力\n可提升 CP 值來對抗 {type} 類的寶可夢',
            protect: '鐵甲蛹 的 {ability} 能力\n效果可以保護牠不會輸！',
            tryPokemon: '讓{pokemon}上場試試。\n\n按一下「戰鬥」來開始一場對戰。',
            removeMedalFromTeam: '從您的隊伍中移除一隻寶可夢，讓出空位給{pokemon}',
            addMedalToTeam: '按一下{pokemon}，把牠加入您的隊伍',
            completeTeam: '按一下尚未選取的寶可夢來完成您的隊伍'
        },
        gachaScreen: {
            note: '前往下一個道館，解鎖新的寶可夢！',
            noteStarPack: '打開星星套組來收集\n所有初始寶可夢！'
        },
        general: {
            cancel: '取消',
            close: '關閉',
            countdownDHTime: '{d}天 {h}時',
            countdownHMTime: '{h}時 {m}分',
            countdownMSTime: '{m}分 {s}秒',
            done: '完成',
            doneExclamation: '完成！',
            errorHappened: '發生錯誤\n{error}',
            get: '領取',
            go: '開始',
            leave: '離開',
            noButton: '否',
            off: '關閉',
            ok: '是',
            on: '開啟',
            proceed: '繼續',
            restartIn: '重置時間：',
            revert: '復原',
            stay: '保留',
            team: '隊伍',
            yesButton: '是',
            score: '分數',
            idle: '閒置'
        },
        gifts: {
            dailyLimit: '非常感謝，但今天的幫忙次數已達到 3/3 了，請明天再來哟！',
            expired: '很抱歉，該請求已逾期。看看有沒有其他人需要幫忙。',
            sourceLimit: '您今天已經領取了這個玩家給的禮物！\n請明天再來喲。',
            gotItem: '您從{friend}那裡得到了{item}！',
            help: {
                candy: '分享糖果，幫助謎擬 Q 交朋友',
                coins: '幫助喵喵歸還借來的金幣',
                starMedal: '幫助伊布找到願意收留這些蛋的訓練家'
            },
            header: '送一個寶可夢禮物給朋友！',
            sendAll: '全部傳送',
            send: '傳送',
            sendItem: '贈送 {item} 給朋友！',
            title: '禮物',
            yourRequest: '很抱歉，這是您自己的請求。看看有沒有其他人需要幫忙。',
            gotItemInMailbox: '{item} 已經存入您的信箱了。\n您回送了 {giftBack} 和禮物！',
            gotItemAndGiftSend: '您收到了{item}\n回送了 {giftBack} 和禮物！',
            gotItemAndGiftRespond: '您收到了{item}\n回送了 {giftBack}！'
        },
        gym: {
            1: '訓練家小鎮',
            2: '綠木樹林',
            3: '火燒山巔',
            4: '清水海岸',
            5: '發電廠',
            6: '砂岩道場',
            7: '影苔神社',
            8: '飛龍棲息處',
            9: '聯盟大會',
            10: '薄霧環山',
            11: '月冠花園',
            final: '冠軍盃',
            title: '道館{gymId}：'
        },
        landingScreen: {
            battle: '戰鬥',
            inviteBtn: '邀請',
            nextBadge: '下一個道館',
            team: '隊伍',
            challengeBtn: '決鬥',
            rating: '等級：',
            rank: '排名：'
        },
        leaderboard: {
            cannotLoad: '無法讀取排行榜',
            requesting: '要求排行榜資料中...',
            seasonNumber: '第 {number} 季排名'
        },
        mailbox: {
            emptyMailboxMessage: '您的信箱是空的',
            button: {
                claim: '領取',
                read: '閱讀'
            },
            expiration: '將於 {h} 小時 {m} 分鐘過期',
            expired: '已過期',
            referralBonus: {
                title: '謝謝！',
                body: '每當您的好友領取禮物，您就可以獲得 {number}{coinSymbol}！'
            },
            csGift: {
                title: '贊助',
                body: '來自 Pokémon Medallion Battle 官方團隊',
                default: {
                    title: '贊助',
                    body: '來自 Pokémon Medallion Battle 官方團隊'
                },
                sorry: {
                    title: '抱歉！',
                    body: '技術困難補償'
                }
            },
            gift: {
                title: '禮物',
                body: '好友送了一個禮物給您'
            },
            raidReward: {
                title: '團體戰套組 - 第 {stage} 階段',
                body: '協助打敗 {bossName} 的獎勵！'
            },
            raidHighScore: {
                title: '最高分 - 第 {stage} 階段',
                body: '排名第 {rank} 高分的獎勵！'
            },
            raidAnnouncement: {
                title: '團體戰活動 - {raidName}',
                body: '{bossName} 出現了！來組隊擊敗牠吧！'
            },
            referralSilverPack: {
                title: '謝謝！',
                body: '招募一個朋友的獎勵'
            },
            subscriptionTutorial: {
                title: '收到通知',
                body: '讓您不錯過任何訊息！'
            },
            raidTotalDamage: {
                title: '最高分 - 第 {stage} 階段',
                body: '因為獲得了第 {rank} 名，您得到了 {amount} 倍的 {rewardIcon}！'
            },
            lbReward: {
                global: {
                    title: '全球排名',
                    body: '全球排名 #{rank} 名的獎勵！'
                },
                region: {
                    title: '全國排名',
                    body: '全國排名 #{rank} 名的獎勵！'
                }
            }
        },
        maintenance: {
            details: '抱歉，我們正在進行維護。',
            title: '遊戲很快就會再度開放！'
        },
        navBar: {
            bag: '背包',
            battle: '戰鬥',
            challenge: '決鬥',
            mail: '信箱',
            pokedex: '寶可夢圖鑑',
            shop: '商店'
        },
        noFriendReferralPrompt: {
            button: '是',
            header1: '與朋友一起玩 Pokémon Medallion，享受更多樂趣！',
            text1: '邀請好友一起玩',
            text2: '向好友進行決鬥挑戰就能獲得一隻稀有皮卡丘！'
        },
        notification: {
            defaultPlay: {
                btn: '立刻遊玩'
            },
            defaultClaim: {
                btn: '領取'
            },
            gift_candy: {
                btn: '領取 {count} 顆糖果',
                text: '謎擬 Q 有糖果要給您。您想當他的朋友嗎？'
            },
            gift_coins: {
                btn: '領取 {count} 枚寶可幣',
                text: '喵喵有些屬於您的寶可幣...'
            },
            gift_starMedal: {
                btn: '領取獎牌',
                text: '{friend} 有個禮物要給您！'
            },
            gift_reward: {
                text: '爲了感謝您， {friend} 送給您一個禮物！'
            },
            simpleThanks: {
                btn: '立刻遊玩',
                text: '感謝您的遊玩。要再來喲！'
            },
            shareMedal: {
                btn: '立刻遊玩',
                text: '查看我的 {pokemon}！'
            },
            whichStarter: {
                text: '您是哪一隻初始寶可夢呢？'
            },
            win: {
                text: '{playerFirstName} 的 {myPokemon} 打敗了 {opposingPokemon}！'
            },
            winBy1: {
                text: '勝負很接近，不過 {attacker} 最後打敗了 {defender}！'
            },
            winBy2: {
                text: '{attacker} 的 {pokemon} 打敗了 {defenderPokemon}！'
            },
            winBy3: {
                text: '{attacker} 完全擊垮了 {defender}！'
            },
            lose: {
                text: '{defender} 派出 {defenderPokemon} 成功擊退了 {attacker}！'
            },
            challenge: {
                text: '{challengerName} 向您挑戰 Pokémon Medallion Battle'
            },
            shareBadge: {
                text: '我終於獲得了{badge}徽章！'
            },
            sharePack: {
                text: '哇！看看我的戰利品！'
            }
        },
        pokedexEntry: {
            evolvesInto: '進化成 {evolutionName}',
            finalEvolution: '最終進化',
            height: '身高',
            moreInfo: '收集即可得知更多資訊',
            pokemonIllustrator: '繪師：{illustrator}',
            unknownValue: '???',
            weight: '體重'
        },
        pokemon: {
            alomomola: '保母曼波',
            ariados: '阿利多斯',
            articuno: '急凍鳥',
            bayleef: '月桂葉',
            beedrill: '大針蜂',
            bellossom: '美麗花',
            blastoise: '水箭龜',
            blaziken: '火焰雞',
            blitzle: '斑斑馬',
            braixen: '長尾火狐',
            brionne: '花漾海獅',
            bulbasaur: '妙蛙種子',
            bunnelby: '掘掘兔',
            butterfree: '巴大蝶',
            camerupt: '噴火駝',
            carbink: '小碎鑽',
            caterpie: '綠毛蟲',
            celebi: '時拉比',
            charizard: '噴火龍',
            charmander: '小火龍',
            charmeleon: '火恐龍',
            chesnaught: '布里卡隆',
            chespin: '哈力栗',
            chikorita: '菊草葉',
            chimchar: '小火焰猴',
            cloyster: '刺甲貝',
            combusken: '力壯雞',
            corsola: '太陽珊瑚',
            croagunk: '不良蛙',
            crobat: '叉字蝠',
            croconaw: '藍鱷',
            cubone: '卡拉卡拉',
            cyndaquil: '火球鼠',
            dartrix: '投羽梟',
            decidueye: '狙射樹梟',
            dedenne: '咚咚鼠',
            delibird: '信使鳥',
            delphox: '妖火紅狐',
            deoxys: '代歐奇希斯',
            dewott: '雙刃丸',
            diggersby: '掘地兔',
            ditto: '百變怪',
            donphan: '頓甲',
            dragonair: '哈克龍',
            dragonite: '快龍',
            dratini: '迷你龍',
            ducklett: '鴨寶寶',
            duosion: '雙卵細胞球',
            eevee: '伊布',
            electabuzz: '電擊獸',
            electivire: '電擊魔獸',
            electrike: '落雷獸',
            elekid: '電擊怪',
            emboar: '炎武王',
            empoleon: '帝王拿波',
            exeggcute: '蛋蛋',
            exeggutor: '椰蛋樹',
            farfetchd: '大蔥鴨',
            fearow: '大嘴雀',
            feebas: '醜醜魚',
            fennekin: '火狐狸',
            feraligatr: '大力鱷',
            flareon: '火伊布',
            fletchinder: '火箭雀',
            fletchling: '小箭雀',
            froakie: '呱呱泡蛙',
            frogadier: '呱頭蛙',
            froslass: '雪妖女',
            gastly: '鬼斯',
            genesect: '蓋諾賽克特',
            gengar: '耿鬼',
            glalie: '冰鬼護',
            gloom: '臭臭花',
            golbat: '大嘴蝠',
            golduck: '哥達鴨',
            greninja: '甲賀忍蛙',
            grimer: '臭泥',
            grotle: '樹林龜',
            grovyle: '森林蜥蜴',
            gyarados: '暴鯉龍',
            haunter: '鬼斯通',
            heatmor: '熔蟻獸',
            heliolisk: '光電傘蜥',
            helioptile: '傘電蜥',
            heracross: '赫拉克羅斯',
            'ho-oh': '鳳王',
            hoppip: '毽子草',
            horsea: '墨海馬',
            incineroar: '熾焰咆哮虎',
            infernape: '烈焰猴',
            inkay: '好啦魷',
            ivysaur: '妙蛙草',
            jolteon: '雷伊布',
            jumpluff: '毽子棉',
            jynx: '迷唇姐',
            kakuna: '鐵殼蛹',
            kingdra: '刺龍王',
            kricketot: '圓法師',
            kricketune: '音箱蟀',
            kyurem: '酋雷姆',
            lapras: '拉普拉斯',
            larvesta: '燃燒蟲',
            litleo: '小獅獅',
            litten: '火斑喵',
            lucario: '路卡利歐',
            lugia: '洛奇亞',
            lunatone: '月石',
            machamp: '怪力',
            machoke: '豪力',
            machop: '腕力',
            magcargo: '熔岩蝸牛',
            magikarp: '鯉魚王',
            magmar: '鴨嘴火獸',
            magnemite: '小磁怪',
            magneton: '三合一磁怪',
            magnezone: '自爆磁怪',
            malamar: '烏賊王',
            manectric: '雷電獸',
            maractus: '沙鈴仙人掌',
            marowak: '嘎啦嘎啦',
            marshtomp: '沼躍魚',
            meganium: '大竺葵',
            meowth: '喵喵',
            metapod: '鐵甲蛹',
            mew: '夢幻',
            mewtwo: '超夢',
            milotic: '美納斯',
            mimikyu: '謎擬Ｑ',
            moltres: '火焰鳥',
            monferno: '猛火猴',
            morelull: '睡睡菇',
            mudkip: '水躍魚',
            muk: '臭臭泥',
            natu: '天然雀',
            ninetales: '九尾',
            numel: '呆火駝',
            oddish: '走路草',
            onix: '大岩蛇',
            oshawott: '水水獺',
            paras: '派拉斯',
            parasect: '派拉斯特',
            persian: '貓老大',
            phanpy: '小小象',
            pichu: '皮丘',
            pidgeot: '大比鳥',
            pidgeotto: '比比鳥',
            pidgey: '波波',
            pignite: '炒炒豬',
            pikachu: '皮卡丘',
            pinsir: '凱羅斯',
            piplup: '波加曼',
            politoed: '蚊香泳士',
            poliwag: '蚊香蝌蚪',
            poliwhirl: '蚊香君',
            poliwrath: '蚊香蛙皇',
            ponyta: '小火馬',
            popplio: '球球海獅',
            primarina: '西獅海壬',
            prinplup: '波皇子',
            psyduck: '可達鴨',
            pyroar: '火炎獅',
            quagsire: '沼王',
            quilava: '火岩鼠',
            quilladin: '胖胖哈力',
            raichu: '雷丘',
            rapidash: '烈焰馬',
            reuniclus: '人造細胞卵',
            rhydon: '鑽角犀獸',
            rhyhorn: '獨角犀牛',
            rhyperior: '超甲狂犀',
            riolu: '利歐路',
            rowlet: '木木梟',
            salandit: '夜盜火蜥',
            salazzle: '焰后蜥',
            samurott: '大劍鬼',
            sceptile: '蜥蜴王',
            seadra: '海刺龍',
            serperior: '君主蛇',
            servine: '青藤蛇',
            shellder: '大舌貝',
            shiinotic: '燈罩夜菇',
            shuckle: '壺壺',
            skiploom: '毽子花',
            slowbro: '呆殼獸',
            slowking: '呆呆王',
            slowpoke: '呆呆獸',
            slugma: '熔岩蟲',
            snivy: '藤藤蛇',
            snorlax: '卡比獸',
            snorunt: '雪童子',
            solosis: '單卵細胞球',
            solrock: '太陽岩',
            spearow: '烈雀',
            spinarak: '圓絲蛛',
            squirtle: '傑尼龜',
            stunfisk: '泥巴魚',
            swampert: '巨沼怪',
            swanna: '舞天鵝',
            talonflame: '烈箭鷹',
            tepig: '暖暖豬',
            torchic: '火稚雞',
            torracat: '炎熱喵',
            torterra: '土台龜',
            totodile: '小鋸鱷',
            toxicroak: '毒骷蛙',
            treecko: '木守宮',
            tropius: '熱帶龍',
            turtonator: '爆焰龜獸',
            turtwig: '草苗龜',
            typhlosion: '火爆獸',
            vaporeon: '水伊布',
            venusaur: '妙蛙花',
            vileplume: '霸王花',
            volcanion: '波爾凱尼恩',
            volcarona: '火神蛾',
            vulpix: '六尾',
            wailmer: '吼吼鯨',
            wailord: '吼鯨王',
            wartortle: '卡咪龜',
            weedle: '獨角蟲',
            wishiwashi: '弱丁魚',
            wobbuffet: '果然翁',
            wooper: '烏波',
            wynaut: '小果然',
            xatu: '天然鳥',
            zapdos: '閃電鳥',
            zebstrika: '雷電斑馬',
            zubat: '超音蝠',
            raikou: '雷公',
            entei: '炎帝',
            suicune: '水君',
            houndour: '戴魯比',
            houndoom: '黑魯加',
            teddiursa: '熊寶寶',
            ursaring: '圈圈熊',
            mareep: '咩利羊',
            flaaffy: '茸茸羊',
            ampharos: '電龍',
            misdreavus: '夢妖',
            mismagius: '夢妖魔',
            skarmory: '盔甲鳥',
            larvitar: '幼基拉斯',
            pupitar: '沙基拉斯',
            tyranitar: '班基拉斯',
            gligar: '天蠍',
            gliscor: '天蠍王',
            sneasel: '狃拉',
            weavile: '瑪狃拉',
            azurill: '露力麗',
            marill: '瑪力露',
            azumarill: '瑪力露麗',
            bronzor: '銅鏡怪',
            bronzong: '青銅鐘',
            steelix: '大鋼蛇',
            growlithe: '卡蒂狗',
            arcanine: '風速狗',
            pineco: '榛果球',
            forretress: '佛烈托斯',
            togedemaru: '托戈德瑪爾',
            shroomish: '蘑蘑菇',
            breloom: '斗笠菇',
            happiny: '小福蛋',
            chansey: '吉利蛋',
            ralts: '拉魯拉絲',
            kirlia: '奇魯莉安',
            gallade: '艾路雷朵',
            gardevoir: '沙奈朵',
            cleffa: '皮寶寶',
            clefairy: '皮皮',
            clefable: '皮可西',
            wingull: '長翅鷗',
            pelipper: '大嘴鷗',
            lotad: '蓮葉童子',
            lombre: '蓮帽小童',
            ludicolo: '樂天河童',
            meditite: '瑪沙那',
            medicham: '恰雷姆',
            beldum: '鐵啞鈴',
            metang: '金屬怪',
            metagross: '巨金怪',
            baltoy: '天秤偶',
            claydol: '念力土偶',
            sableye: '勾魂眼',
            duskull: '夜巡靈',
            dusclops: '彷徨夜靈',
            dusknoir: '黑夜魔靈',
            jirachi: '基拉祈',
            aipom: '長尾怪手',
            ambipom: '雙尾怪手',
            slakoth: '懶人獺',
            vigoroth: '過動猿',
            slaking: '請假王',
            torkoal: '煤炭龜',
            staryu: '海星星',
            starmie: '寶石海星',
            regice: '雷吉艾斯',
            geodude: '小拳石',
            graveler: '隆隆石',
            golem: '隆隆岩',
            regirock: '雷吉洛克',
            aron: '可可多拉',
            lairon: '可多拉',
            aggron: '波士可多拉',
            porygon: '多邊獸',
            porygon2: '多邊獸Ⅱ',
            porygonz: '多邊獸Ｚ',
            registeel: '雷吉斯奇魯',
            cranidos: '頭蓋龍',
            rampardos: '戰槌龍',
            shieldon: '盾甲龍',
            bastiodon: '護城龍',
            tyrunt: '寶寶暴龍',
            tyrantrum: '怪顎龍',
            groudon: '固拉多',
            rayquaza: '烈空坐',
            aerodactyl: '化石翼龍',
            omanyte: '菊石獸',
            omastar: '多刺菊石獸',
            tirtouga: '原蓋海龜',
            carracosta: '肋骨海龜',
            carvanha: '利牙魚',
            sharpedo: '巨牙鯊',
            kyogre: '蓋歐卡',
            lileep: '觸手百合',
            cradily: '搖籃百合',
            anorith: '太古羽蟲',
            armaldo: '太古盔甲',
            scyther: '飛天螳螂',
            scizor: '巨鉗螳螂',
            xerneas: '哲爾尼亞斯',
            swablu: '青綿鳥',
            altaria: '七夕青鳥',
            togepi: '波克比',
            togetic: '波克基古',
            togekiss: '波克基斯',
            bagon: '寶貝龍',
            shelgon: '甲殼龍',
            salamence: '暴飛龍',
            yveltal: '伊裴爾塔爾',
            kabuto: '化石盔',
            kabutops: '鐮刀盔',
            archen: '始祖小鳥',
            archeops: '始祖大鳥',
            gible: '圓陸鯊',
            gabite: '尖牙陸鯊',
            garchomp: '烈咬陸鯊',
            zygarde: '基格爾德',
            amaura: '冰雪龍',
            aurorus: '冰雪巨龍'
        },
        popin: {
            socialGiftPromptHigh: {
                text: '送一個寶可夢禮物給朋友！',
                cta: '是'
            },
            challengePrompt: {
                text: '贏了道館戰鬥真厲害！',
                text2: '但您能打敗好友嗎？',
                cta: '我可以！'
            },
            challengeInvite: {
                text: '跟好友進行決鬥就有機會獲得一隻稀有 {pokemon}！',
                cta: '是'
            }
        },
        quiz: {
            playNow: '來一起玩吧！',
            share: '分享',
            shareMsg: '的性格是 {nature}',
            playerIs: '{player} 是',
            tap: '按一下看結果！',
            tryAgain: '再試一次',
            whichStarter: '您是哪一隻初始寶可夢呢？',
            yourPersonality: '{player}、\n您的 {nature} 性格最相配的是'
        },
        quizResult: {
            bulbasaur: '溫順',
            charmander: '自大',
            chespin: '悠閒',
            chikorita: '坦率',
            chimchar: '淘氣',
            cyndaquil: '膽小',
            fennekin: '固執',
            froakie: '慎重',
            litten: '怕寂寞',
            mudkip: '浮躁',
            oshawott: '頑皮',
            piplup: '內斂',
            popplio: '慢吞吞',
            rowlet: '勤奮',
            snivy: '認真',
            squirtle: '大膽',
            tepig: '急躁',
            torchic: '勇敢',
            totodile: '爽朗',
            treecko: '溫和',
            turtwig: '害羞'
        },
        quizShare: {
            bulbasaur: '• 溫順\n• 值得信賴\n• 務實\n• 總是願意伸出援手',
            charmander: '• 自大\n• 樂觀\n• 意志堅定\n• 不讓任何事物阻擋勝利之路！',
            chespin: '• 悠閒\n• 寬容\n• 魅力\n• 看來非常冷靜放鬆，但要小心隱藏的憤怒！',
            chikorita: '• 坦率\n• 敏感\n• 呵護\n• 容易相信他人；具有熱情和關懷的個性',
            chimchar: '• 淘氣\n• 有創意的\n• 熱情\n• 派對般的生活！',
            cyndaquil: '• 膽小\n• 慎重\n• 體貼\n• 比較喜歡跟小團體的人待在室內',
            fennekin: '• 固執\n• 仁慈\n• 忠誠\n• 堅定不移地忠於朋友',
            froakie: '• 慎重\n• 直覺\n• 足智多謀\n• 具有將失敗轉化為勝利的神奇能力',
            litten: '• 怕寂寞\n• 正直\n• 可靠\n• 無論他們去哪，總是跟隨自己的信念',
            mudkip: '• 浮躁\n• 勤勞\n• 敏銳\n• 總是充滿新的想法和瞎忙！',
            oshawott: '• 頑皮\n• 迷人\n• 鬼靈精怪\n• 用調皮的笑容融化心靈',
            piplup: '• 內斂\n• 無私\n• 樂於助人\n• 有史以來最好的傾聽者',
            popplio: '• 慢吞吞\n• 富有遠見\n• 藝術家\n• 相信這個世界就是我們的畫布',
            rowlet: '• 勤奮\n• 創意\n• 有條有理\n• 一個總是有計劃的問題解決者',
            snivy: '• 認真\n• 優雅\n• 直接\n• 不能忍受被低估',
            squirtle: '• 大膽\n• 理想\n• 天生領導者\n• 總是被打倒後重新再站起來',
            tepig: '• 急躁\n• 坦率\n• 貪吃\n• 先吃飽，再動腦！',
            torchic: '• 勇敢\n• 冒險\n• 真誠\n• 總是攀登下一個高峰！',
            totodile: '• 爽朗\n• 隨性\n• 精力充沛\n• 在任何情況下都能讓人開心起來！',
            treecko: '• 溫和\n• 自信\n• 分析型\n• 在壓力下總會有自制力的保持冷靜',
            turtwig: '• 害羞\n• 誠實\n• 呵護\n• 低調的個性，具有強大的內在力量'
        },
        raid: {
            bossApproaching: '頭目正在逼近',
            bossWarning: '   注意！',
            hp: 'HP: {percent}%',
            event: '團戰',
            rank: '排名',
            raid: '團體',
            timerLabel: '活動時間剩下：',
            raidPack: '團體戰套組',
            stageInfo1: '進行探索、尋找頭目的蹤影！',
            stageInfo2: '與好友組隊擊敗頭目！',
            requireGymPopup: {
                label1: '下個階段僅開放給高排名訓練家',
                label2: '前往道館 {number} 即可繼續！',
                button: '開始吧'
            },
            party: {
                title: '團體戰',
                subtitle: '與好友組隊擊敗頭目！',
                expel: '退學',
                leave: '離開'
            },
            partyExpel: {
                confirm: '您確定要讓這位團體戰成員退學嗎？',
                expelled: '玩家被踢出團體戰隊伍'
            },
            partyLeave: {
                confirm: '您確定要離開這支團體戰隊伍嗎？',
                left: '您離開了團體戰隊伍'
            },
            join: {
                title: '您要加入這支團體戰隊伍嗎？',
                subtitle: '您會失去目前團體戰階段的所有進度'
            },
            stage: '第 {stage} 階段',
            socialInvite: '{inviter} 需要您的協助一起打敗第 {number} 階段的{boss}！（剩下 {percent}% HP）',
            exploreBtn: '探索',
            revivePopup: {
                title: '糟糕！{pokemon}受傷了！',
                question: '觀賞廣告以繼續？',
                cancel: '離開',
                confirm: '復活'
            },
            bossRatingInfo: '第 {stage} 階段',
            battleScore: '分數',
            watchAdToBattle: {
                title: '需有團體戰入場券才能開始戰鬥！',
                question: '觀賞廣告以繼續？',
                confirm: '開始',
                cancel: '離開'
            },
            rankingTitle: '團體戰排名',
            notEnoughPasses: '距離得到下個團體戰入場券還剩：{remainingTime}',
            home: '道館',
            caution: '注意！',
            cautionSubtitle: '這個團體戰階段的難度可能不適合您\n\n您確定要加入嗎？',
            defeatBoss: '擊敗頭目即可開啟',
            totalDamage: '總傷害',
            invitePrompt: {
                title: '需有團體戰入場券才能開始戰鬥！',
                subTitle: '招募更多成員加速打敗{boss}！'
            },
            tutorial: {
                msg1: '[b]用您的寶可夢戰勝以對頭目造成傷害[/b]\n\n如果您的任何一隻寶可夢戰敗，戰鬥就結束了。盡力撐到最後喔！'
            },
            invitePopup: {
                title1: '邀請好友一起遊玩 Pokémon Medallion Battle！',
                title2: '好友加入遊戲後，您將獲得銀色套組！',
                title3: '保證可得到 {value}+ IV'
            },
            rankingPopup: {
                bestScoreButton: '分數',
                totalDamageButton: '總傷害'
            }
        },
        raidAnnouncement: {
            header: '團體戰活動',
            message: '與好友組隊擊敗頭目！',
            reward: '您進入的階段越高，團體戰獎勵會越好！'
        },
        resultScreen: {
            nextBadge: '下個\n徽章',
            reward: '獎勵',
            watchAd: '觀看廣告',
            winner: '贏家！',
            victories: '勝利',
            liveOppBonus: '即時對手獎賞',
            quickMatchBonus: '快速對戰獎賞',
            score: '分數',
            totalDamage: '總傷害'
        },
        settingScreen: {
            forfeit: '放棄戰鬥',
            music: '音樂',
            pokemonPreview: '寶可夢預覽',
            privacyPolicy: '隱私權政策',
            settings: '設定',
            soundEffects: '音效',
            supportId: '支援 ID：{id}',
            termsOfService: '服務條款'
        },
        shopScreen: {
            claimFreePack: '領取',
            comingSoon: '即將\n推出！',
            medal: {
                item: '獎牌'
            },
            medalPack: {
                item: '獎牌套組'
            },
            freePack: {
                item: '星星獎牌'
            },
            adsMedal: {
                item: '寶可獎牌'
            },
            adMedal: {
                item: '寶可獎牌'
            },
            gymPack: {
                item: '寶可套組'
            },
            guaranteed: '保證',
            left: '剩下',
            freePackDescription: '可能包含\n初始寶可夢',
            tapToOpen: '按一下即可開啟',
            notReady: '您已經領取了這個星星獎牌。下一個星星獎牌將會在 {h} 小時 {m} 分鐘後準備好。',
            silverPack: {
                item: '銀色套組'
            },
            guaranteedIv: '保證可得到 {guaranteedIv}+ IV',
            gameCoin: '交易代幣',
            exchange: {
                title: '交易市集',
                refresh: '離更新時間還有：',
                refreshBtn: '更新',
                selectToTrade: '點選寶可夢來進行交易',
                select: '已選取',
                require: '需要',
                trade: '交易'
            }
        },
        sslString: {
            btn_challengeNow: '快來挑戰',
            challenge: {
                text: '{challengerName} 向您挑戰 Pokémon Medallion Battle'
            },
            bossDefeated: {
                text: '{player}解決了{boss}！快來領取您的獎勵吧！'
            },
            btn_getReward: '領取'
        },
        starPack: {
            claim: '領取',
            cooldown: '離下個星星套組出現還有',
            countdownTime: '{h}時 {m}分',
            title: '星星套組'
        },
        taskScreen: {
            achievement: '成就',
            claimedReward: '領取了！',
            countdownTime: '{h}時 {m}分',
            daily: '每日',
            tapToClaim: '按一下即可\n領取',
            taskRestartIn: '任務重置時間：',
            tasks: '任務'
        },
        tier: {
            tier1: '精靈球',
            tier2: '超級球',
            tier3: '高級球'
        },
        type: {
            dragon: '龍',
            electric: '雷',
            fighting: '戰鬥',
            fire: '火焰',
            grass: '青草',
            normal: '無色',
            psychic: '精神',
            water: '清水'
        },
        raidName: {
            moltres: '火熔紀念碑',
            zapdos: '封閉的發電站',
            articuno: '冰封灣',
            mewtwo: '湖邊迷宮',
            raikou: '雷電風暴',
            entei: '熾烈野火',
            suicune: '傾盆大雨',
            deoxys: '陰險入侵',
            regice: '冰封要塞',
            regirock: '崩塌城堡',
            registeel: '鋼鐵堡壘',
            groudon: '始源之路：陸',
            kyogre: '始源之路：海'
        },
        subscriptionTutorial: {
            title: '收到通知',
            subtitle: '讓您不錯過任何訊息！',
            caption1: '在 Facebook Gaming 應用程式中開啟 Pokémon Medallion',
            caption2: '存取 Facebook 遊戲設定',
            caption3: '啟用訊息功能'
        }
    },
    'src/conf/bossArtworkAdjustement.json': {
        cyndaquil: {
            scale: .8,
            shiftX: -5,
            shiftY: 0
        },
        quilava: {
            scale: .7,
            shiftX: 0,
            shiftY: 4
        },
        typhlosion: {
            scale: .55,
            shiftX: 0,
            shiftY: 4
        },
        moltres: {
            scale: .65,
            shiftX: 6,
            shiftY: 7
        },
        DEFAULT: {
            scale: 1,
            shiftX: 0,
            shiftY: 0
        },
        articuno: {
            scale: .55,
            shiftX: 2,
            shiftY: 10
        },
        blaziken: {
            scale: .65,
            shiftX: 0,
            shiftY: 8
        },
        braixen: {
            scale: .9,
            shiftX: -12,
            shiftY: 3
        },
        bulbasaur: {
            scale: 1,
            shiftX: -15,
            shiftY: 3
        },
        charizard: {
            scale: .7,
            shiftX: -5,
            shiftY: 5
        },
        charmander: {
            scale: 1.15,
            shiftX: -7,
            shiftY: 3
        },
        charmeleon: {
            scale: .9,
            shiftX: 0,
            shiftY: 3
        },
        combusken: {
            scale: 1,
            shiftX: 0,
            shiftY: 3
        },
        croconaw: {
            scale: .95,
            shiftX: 3,
            shiftY: 5
        },
        dartrix: {
            scale: .8,
            shiftX: 13,
            shiftY: 4
        },
        decidueye: {
            scale: .65,
            shiftX: -8,
            shiftY: 5
        },
        delphox: {
            scale: .8,
            shiftX: -6,
            shiftY: 4
        },
        deoxys: {
            scale: .65,
            shiftX: -10,
            shiftY: 2
        },
        dewott: {
            scale: .85,
            shiftX: -9,
            shiftY: 2
        },
        empoleon: {
            scale: .7,
            shiftX: -8,
            shiftY: 3
        },
        entei: {
            scale: .75,
            shiftX: -7,
            shiftY: 0
        },
        fennekin: {
            scale: 1.15,
            shiftX: -11,
            shiftY: 0
        },
        froakie: {
            scale: 1,
            shiftX: -11,
            shiftY: 13
        },
        frogadier: {
            scale: 1,
            shiftX: -3,
            shiftY: 13
        },
        genesect: {
            scale: .7,
            shiftX: 0,
            shiftY: 5
        },
        greninja: {
            scale: .7,
            shiftX: 0,
            shiftY: 5
        },
        grotle: {
            scale: .6,
            shiftX: 0,
            shiftY: 8
        },
        groudon: {
            scale: .5,
            shiftX: -9,
            shiftY: 7
        },
        grovyle: {
            scale: .95,
            shiftX: -11,
            shiftY: 8
        },
        'ho-oh': {
            scale: .6,
            shiftX: -1,
            shiftY: 4
        },
        incineroar: {
            scale: .65,
            shiftX: 5,
            shiftY: 4
        },
        ivysaur: {
            scale: .8,
            shiftX: 8,
            shiftY: 5
        },
        jirachi: {
            scale: 1,
            shiftX: -1,
            shiftY: 3
        },
        kyogre: {
            scale: .55,
            shiftX: -6,
            shiftY: 0
        },
        litten: {
            scale: 1.1,
            shiftX: 6,
            shiftY: 2
        },
        lugia: {
            scale: .55,
            shiftX: 9,
            shiftY: 12
        },
        marshtomp: {
            scale: .9,
            shiftX: -9,
            shiftY: 0
        },
        mew: {
            scale: 1,
            shiftX: -21,
            shiftY: 21
        },
        mewtwo: {
            scale: .5,
            shiftX: -14,
            shiftY: 7
        },
        mudkip: {
            scale: 1,
            shiftX: 5,
            shiftY: 3
        },
        oshawott: {
            scale: 1,
            shiftX: -10,
            shiftY: 0
        },
        piplup: {
            scale: 1,
            shiftX: 0,
            shiftY: 5
        },
        prinplup: {
            scale: .7,
            shiftX: 6,
            shiftY: 5
        },
        raikou: {
            scale: .75,
            shiftX: -7,
            shiftY: 12
        },
        rayquaza: {
            scale: .55,
            shiftX: -8,
            shiftY: 6
        },
        regice: {
            scale: .6,
            shiftX: -1,
            shiftY: 4
        },
        regirock: {
            scale: .55,
            shiftX: 8,
            shiftY: 4
        },
        registeel: {
            scale: .6,
            shiftX: 0,
            shiftY: 6
        },
        rowlet: {
            scale: 1,
            shiftX: 5,
            shiftY: -4
        },
        samurott: {
            scale: .65,
            shiftX: -3,
            shiftY: 6
        },
        sceptile: {
            scale: .65,
            shiftX: 1,
            shiftY: 9
        },
        suicune: {
            scale: .6,
            shiftX: -2,
            shiftY: 4
        },
        swampert: {
            scale: .75,
            shiftX: -16,
            shiftY: 4
        },
        torchic: {
            scale: 1,
            shiftX: 10,
            shiftY: 0
        },
        torracat: {
            scale: 1,
            shiftX: 0,
            shiftY: 4
        },
        torterra: {
            scale: .5,
            shiftX: 1,
            shiftY: 7
        },
        totodile: {
            scale: 1.05,
            shiftX: 0,
            shiftY: 4
        },
        treecko: {
            scale: 1.4,
            shiftX: 0,
            shiftY: 0
        },
        venusaur: {
            scale: .65,
            shiftX: 1,
            shiftY: 10
        },
        zapdos: {
            scale: .6,
            shiftX: 4,
            shiftY: 11
        },
        turtwig: {
            scale: .8,
            shiftX: 0,
            shiftY: 9
        },
        feraligatr: {
            scale: .64,
            shiftX: 7,
            shiftY: 5
        }
    },
    'src/conf/staticData/ability.json': {
        electricTerrain: {
            id: 'electricTerrain',
            element: 'electric',
            type: 'arena',
            value1: 50,
            value2: 'electric'
        },
        sandstorm: {
            id: 'sandstorm',
            element: 'fighting',
            type: 'arena',
            value1: -100,
            value2: 'sandstorm'
        },
        drought: {
            id: 'drought',
            element: 'fire',
            type: 'arena',
            value1: 50,
            value2: 'fire'
        },
        sunnyDay: {
            id: 'sunnyDay',
            element: 'grass',
            type: 'arena',
            value1: 100,
            value2: 'grass'
        },
        pressure: {
            id: 'pressure',
            element: 'normal',
            type: 'arena',
            value1: -100,
            value2: 'tier2'
        },
        prehistoricCall: {
            id: 'prehistoricCall',
            element: 'normal',
            type: 'arena',
            value1: 100,
            value2: 'fossil'
        },
        moonlight: {
            id: 'moonlight',
            element: 'psychic',
            type: 'arena',
            value1: 100,
            value2: 'psychic'
        },
        hail: {
            id: 'hail',
            element: 'water',
            type: 'arena',
            value1: -50,
            value2: 'hail'
        },
        rainDance: {
            id: 'rainDance',
            element: 'water',
            type: 'arena',
            value1: 50,
            value2: 'water'
        },
        rapidSpin: {
            id: 'rapidSpin',
            element: 'normal',
            type: 'clearance'
        },
        haze: {
            id: 'haze',
            element: 'water',
            type: 'clearance'
        },
        stealthRock: {
            id: 'stealthRock',
            element: 'fighting',
            type: 'hazard',
            value1: 200,
            value2: '1'
        },
        leechSeed: {
            id: 'leechSeed',
            element: 'grass',
            type: 'hazard',
            value1: 50,
            value2: '3'
        },
        stickyWeb: {
            id: 'stickyWeb',
            element: 'normal',
            type: 'hazard',
            value1: 50,
            value2: '2'
        },
        spikes: {
            id: 'spikes',
            element: 'normal',
            type: 'hazard',
            value1: 100,
            value2: '2'
        },
        ionDeluge: {
            id: 'ionDeluge',
            element: 'electric',
            type: 'priority'
        },
        machPunch: {
            id: 'machPunch',
            element: 'fighting',
            type: 'priority'
        },
        flameCharge: {
            id: 'flameCharge',
            element: 'fire',
            type: 'priority'
        },
        dragonAscent: {
            id: 'dragonAscent',
            element: 'normal',
            type: 'priority',
            type2: 'protect'
        },
        extremeSpeed: {
            id: 'extremeSpeed',
            element: 'normal',
            type: 'priority'
        },
        iceFang: {
            id: 'iceFang',
            element: 'normal',
            type: 'priority',
            type2: 'protect'
        },
        quickAttack: {
            id: 'quickAttack',
            element: 'normal',
            type: 'priority'
        },
        agility: {
            id: 'agility',
            element: 'psychic',
            type: 'priority'
        },
        phantomForce: {
            id: 'phantomForce',
            element: 'psychic',
            type: 'priority'
        },
        shadowSneak: {
            id: 'shadowSneak',
            element: 'psychic',
            type: 'priority'
        },
        aquaJet: {
            id: 'aquaJet',
            element: 'water',
            type: 'priority'
        },
        iceShard: {
            id: 'iceShard',
            element: 'water',
            type: 'priority'
        },
        discharge: {
            id: 'discharge',
            element: 'electric',
            type: 'protect',
            value2: '1'
        },
        shellTrap: {
            id: 'shellTrap',
            element: 'fire',
            type: 'protect'
        },
        harden: {
            id: 'harden',
            element: 'grass',
            type: 'protect'
        },
        sleepPowder: {
            id: 'sleepPowder',
            element: 'grass',
            type: 'protect',
            value2: '1'
        },
        spikyShield: {
            id: 'spikyShield',
            element: 'grass',
            type: 'protect'
        },
        spore: {
            id: 'spore',
            element: 'grass',
            type: 'protect',
            value2: '1'
        },
        glaciate: {
            id: 'glaciate',
            element: 'normal',
            type: 'protect'
        },
        lovelyKiss: {
            id: 'lovelyKiss',
            element: 'normal',
            type: 'protect'
        },
        protect: {
            id: 'protect',
            element: 'normal',
            type: 'protect'
        },
        yawn: {
            id: 'yawn',
            element: 'normal',
            type: 'protect',
            value2: '1'
        },
        acidArmor: {
            id: 'acidArmor',
            element: 'psychic',
            type: 'protect'
        },
        hypnosis: {
            id: 'hypnosis',
            element: 'psychic',
            type: 'protect'
        },
        sing: {
            id: 'sing',
            element: 'water',
            type: 'protect',
            value2: '1'
        },
        withdraw: {
            id: 'withdraw',
            element: 'water',
            type: 'protect'
        },
        lockOn: {
            id: 'lockOn',
            element: 'normal',
            type: 'reveal',
            value1: 1
        },
        luckyChant: {
            id: 'luckyChant',
            element: 'normal',
            type: 'reveal',
            value1: 1
        },
        mindReader: {
            id: 'mindReader',
            element: 'normal',
            type: 'reveal',
            value1: 1
        },
        odorSleuth: {
            id: 'odorSleuth',
            element: 'normal',
            type: 'reveal',
            value1: 1
        },
        foresight: {
            id: 'foresight',
            element: 'psychic',
            type: 'reveal',
            value1: 1
        },
        miracleEye: {
            id: 'miracleEye',
            element: 'psychic',
            type: 'reveal',
            value1: 1
        },
        futureSight: {
            id: 'futureSight',
            element: 'psychic',
            type: 'reveal',
            value1: 2
        },
        parabolicCharge: {
            id: 'parabolicCharge',
            element: 'electric',
            type: 'se',
            value1: 1.5,
            value2: 'water'
        },
        thunderShock: {
            id: 'thunderShock',
            element: 'electric',
            type: 'se',
            value1: 1.5,
            value2: 'normal'
        },
        voltTackle1: {
            id: 'voltTackle1',
            element: 'electric',
            type: 'se',
            value1: 1.5,
            value2: 'tier1'
        },
        voltTackle2: {
            id: 'voltTackle2',
            element: 'electric',
            type: 'se',
            value1: 1.5,
            value2: 'tier2'
        },
        wildCharge1: {
            id: 'wildCharge1',
            element: 'electric',
            type: 'se',
            value1: 1.5,
            value2: 'tier1'
        },
        spark: {
            id: 'spark',
            element: 'electric',
            type: 'se',
            value1: 2,
            value2: 'water'
        },
        thunderbolt: {
            id: 'thunderbolt',
            element: 'electric',
            type: 'se',
            value1: 2,
            value2: 'normal'
        },
        thunderFang: {
            id: 'thunderFang',
            element: 'electric',
            type: 'se',
            value1: 2,
            value2: 'water'
        },
        thunderPunch: {
            id: 'thunderPunch',
            element: 'electric',
            type: 'se',
            value1: 2,
            value2: 'water'
        },
        thunder: {
            id: 'thunder',
            element: 'electric',
            type: 'se',
            value1: 2.5,
            value2: 'normal'
        },
        zapCannon: {
            id: 'zapCannon',
            element: 'electric',
            type: 'se',
            value1: 2.5,
            value2: 'normal'
        },
        bonemerang: {
            id: 'bonemerang',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'electric'
        },
        bulldoze: {
            id: 'bulldoze',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'electric'
        },
        crossChop: {
            id: 'crossChop',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'normal'
        },
        doubleKick: {
            id: 'doubleKick',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'normal'
        },
        karateChop: {
            id: 'karateChop',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'normal'
        },
        lowSweep: {
            id: 'lowSweep',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'normal'
        },
        mudShot: {
            id: 'mudShot',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'electric'
        },
        mudSlap: {
            id: 'mudSlap',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'electric'
        },
        powerUpPunch: {
            id: 'powerUpPunch',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'normal'
        },
        rockThrow: {
            id: 'rockThrow',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'electric'
        },
        rockWrecker: {
            id: 'rockWrecker',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'tier3'
        },
        smackDown: {
            id: 'smackDown',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'normal'
        },
        submission3: {
            id: 'submission3',
            element: 'fighting',
            type: 'se',
            value1: 1.5,
            value2: 'tier3'
        },
        ancientPower: {
            id: 'ancientPower',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'legendary'
        },
        auraSphere: {
            id: 'auraSphere',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'normal'
        },
        brickBreak: {
            id: 'brickBreak',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'normal'
        },
        dig: {
            id: 'dig',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'electric',
            type2: 'protect'
        },
        dynamicPunch: {
            id: 'dynamicPunch',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'normal'
        },
        earthPower: {
            id: 'earthPower',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'electric'
        },
        forcePalm: {
            id: 'forcePalm',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'normal'
        },
        headSmash1: {
            id: 'headSmash1',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'tier1'
        },
        headSmash2: {
            id: 'headSmash2',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'tier2'
        },
        magnitude2: {
            id: 'magnitude2',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'tier1'
        },
        mudBomb: {
            id: 'mudBomb',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'electric'
        },
        rockSlide: {
            id: 'rockSlide',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'electric'
        },
        skyUppercut: {
            id: 'skyUppercut',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'normal'
        },
        superpower: {
            id: 'superpower',
            element: 'fighting',
            type: 'se',
            value1: 2,
            value2: 'normal'
        },
        closeCombat: {
            id: 'closeCombat',
            element: 'fighting',
            type: 'se',
            value1: 2.5,
            value2: 'normal'
        },
        counter: {
            id: 'counter',
            element: 'fighting',
            type: 'se',
            value1: 2.5,
            value2: 'fighting'
        },
        earthquake: {
            id: 'earthquake',
            element: 'fighting',
            type: 'se',
            value1: 2.5,
            value2: 'electric'
        },
        hammerArm: {
            id: 'hammerArm',
            element: 'fighting',
            type: 'se',
            value1: 2.5,
            value2: 'normal'
        },
        highJumpKick: {
            id: 'highJumpKick',
            element: 'fighting',
            type: 'se',
            value1: 2.5,
            value2: 'normal'
        },
        landsWrath: {
            id: 'landsWrath',
            element: 'fighting',
            type: 'se',
            value1: 2.5,
            value2: 'electric',
            type2: 'se',
            value3: 2.5,
            value4: 'fighting'
        },
        powerGem: {
            id: 'powerGem',
            element: 'fighting',
            type: 'se',
            value1: 2.5,
            value2: 'electric'
        },
        precipiceBlades: {
            id: 'precipiceBlades',
            element: 'fighting',
            type: 'se',
            value1: 2.5,
            value2: 'electric',
            type2: 'se',
            value3: 2.5,
            value4: 'grass'
        },
        ember: {
            id: 'ember',
            element: 'fire',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        fieryDance: {
            id: 'fieryDance',
            element: 'fire',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        fireSpin: {
            id: 'fireSpin',
            element: 'fire',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        flameWheel: {
            id: 'flameWheel',
            element: 'fire',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        flareBlitz1: {
            id: 'flareBlitz1',
            element: 'fire',
            type: 'se',
            value1: 1.5,
            value2: 'tier1'
        },
        flareBlitz2: {
            id: 'flareBlitz2',
            element: 'fire',
            type: 'se',
            value1: 1.5,
            value2: 'tier2'
        },
        flareBlitz3: {
            id: 'flareBlitz3',
            element: 'fire',
            type: 'se',
            value1: 1.5,
            value2: 'tier3'
        },
        blazeKick: {
            id: 'blazeKick',
            element: 'fire',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        fireFang: {
            id: 'fireFang',
            element: 'fire',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        fireLash: {
            id: 'fireLash',
            element: 'fire',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        flamethrower: {
            id: 'flamethrower',
            element: 'fire',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        heatCrash2: {
            id: 'heatCrash2',
            element: 'fire',
            type: 'se',
            value1: 2,
            value2: 'tier1'
        },
        heatCrash3: {
            id: 'heatCrash3',
            element: 'fire',
            type: 'se',
            value1: 2,
            value2: 'tier2'
        },
        lavaPlume: {
            id: 'lavaPlume',
            element: 'fire',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        mysticalFire: {
            id: 'mysticalFire',
            element: 'fire',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        sacredFire: {
            id: 'sacredFire',
            element: 'fire',
            type: 'se',
            value1: 2,
            value2: 'grass',
            type2: 'se',
            value3: 2,
            value4: 'water'
        },
        willOWisp: {
            id: 'willOWisp',
            element: 'fire',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        eruption: {
            id: 'eruption',
            element: 'fire',
            type: 'se',
            value1: 2.5,
            value2: 'grass'
        },
        fireBlast: {
            id: 'fireBlast',
            element: 'fire',
            type: 'se',
            value1: 2.5,
            value2: 'grass'
        },
        overheat: {
            id: 'overheat',
            element: 'fire',
            type: 'se',
            value1: 2.5,
            value2: 'grass'
        },
        absorb: {
            id: 'absorb',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'water'
        },
        bulletSeed: {
            id: 'bulletSeed',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'water'
        },
        furyCutter: {
            id: 'furyCutter',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'psychic'
        },
        guillotine1: {
            id: 'guillotine1',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'tier2'
        },
        magicalLeaf: {
            id: 'magicalLeaf',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'water'
        },
        petalDance2: {
            id: 'petalDance2',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'tier2'
        },
        petalDance3: {
            id: 'petalDance3',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'tier3'
        },
        razorLeaf: {
            id: 'razorLeaf',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'water'
        },
        silverWind: {
            id: 'silverWind',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'psychic'
        },
        vineWhip: {
            id: 'vineWhip',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'water'
        },
        woodHammer3: {
            id: 'woodHammer3',
            element: 'grass',
            type: 'se',
            value1: 1.5,
            value2: 'tier3'
        },
        energyBall: {
            id: 'energyBall',
            element: 'grass',
            type: 'se',
            value1: 2,
            value2: 'water'
        },
        grassKnot2: {
            id: 'grassKnot2',
            element: 'grass',
            type: 'se',
            value1: 2,
            value2: 'tier1'
        },
        grassKnot3: {
            id: 'grassKnot3',
            element: 'grass',
            type: 'se',
            value1: 2,
            value2: 'tier2'
        },
        leafBlade: {
            id: 'leafBlade',
            element: 'grass',
            type: 'se',
            value1: 2,
            value2: 'water'
        },
        leafTornado: {
            id: 'leafTornado',
            element: 'grass',
            type: 'se',
            value1: 2,
            value2: 'water'
        },
        petalBlizzard: {
            id: 'petalBlizzard',
            element: 'grass',
            type: 'se',
            value1: 2,
            value2: 'water'
        },
        powerWhip: {
            id: 'powerWhip',
            element: 'grass',
            type: 'se',
            value1: 2,
            value2: 'water'
        },
        seedBomb: {
            id: 'seedBomb',
            element: 'grass',
            type: 'se',
            value1: 2,
            value2: 'water'
        },
        twineedle: {
            id: 'twineedle',
            element: 'grass',
            type: 'se',
            value1: 2,
            value2: 'psychic'
        },
        xScissor: {
            id: 'xScissor',
            element: 'grass',
            type: 'se',
            value1: 2,
            value2: 'psychic'
        },
        leafStorm: {
            id: 'leafStorm',
            element: 'grass',
            type: 'se',
            value1: 2.5,
            value2: 'water'
        },
        megahorn: {
            id: 'megahorn',
            element: 'grass',
            type: 'se',
            value1: 2.5,
            value2: 'psychic'
        },
        solarBeam: {
            id: 'solarBeam',
            element: 'grass',
            type: 'se',
            value1: 2.5,
            value2: 'water'
        },
        ironDefense: {
            id: 'ironDefense',
            element: 'normal',
            type: 'se',
            value1: .5,
            value2: 'fire'
        },
        painSplit: {
            id: 'painSplit',
            element: 'normal',
            type: 'se',
            value1: .5,
            value2: 'tier1'
        },
        slackOff1: {
            id: 'slackOff1',
            element: 'normal',
            type: 'se',
            value1: .5,
            value2: 'tier1'
        },
        slackOff2: {
            id: 'slackOff2',
            element: 'normal',
            type: 'se',
            value1: .5,
            value2: 'tier2'
        },
        acrobatics: {
            id: 'acrobatics',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        aerialAce: {
            id: 'aerialAce',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'grass',
            type2: 'reveal',
            value3: 1
        },
        airCutter: {
            id: 'airCutter',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        beatUp1: {
            id: 'beatUp1',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier2'
        },
        braveBird1: {
            id: 'braveBird1',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier1'
        },
        bulletPunch2: {
            id: 'bulletPunch2',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier2',
            type2: 'priority'
        },
        conversion: {
            id: 'conversion',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'fighting',
            type2: 'se',
            value3: 1.5,
            value4: 'electric'
        },
        doubleEdge1: {
            id: 'doubleEdge1',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier1'
        },
        dragonRush3: {
            id: 'dragonRush3',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier3',
            type2: 'priority'
        },
        gust: {
            id: 'gust',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        peck: {
            id: 'peck',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        hyperBeam2: {
            id: 'hyperBeam2',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier2'
        },
        lastResort1: {
            id: 'lastResort1',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier1'
        },
        metalBurst2: {
            id: 'metalBurst2',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier2',
            type2: 'protect'
        },
        outrage2: {
            id: 'outrage2',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier2'
        },
        outrage3: {
            id: 'outrage3',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier3'
        },
        takeDown1: {
            id: 'takeDown1',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier1'
        },
        takeDown2: {
            id: 'takeDown2',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier2'
        },
        wringOut2: {
            id: 'wringOut2',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier1'
        },
        wringOut3: {
            id: 'wringOut3',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier2'
        },
        airSlash: {
            id: 'airSlash',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        bounce: {
            id: 'bounce',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        crunch: {
            id: 'crunch',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'psychic'
        },
        darkestLariat: {
            id: 'darkestLariat',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'psychic'
        },
        doubleHit1: {
            id: 'doubleHit1',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'tier1'
        },
        doubleHit2: {
            id: 'doubleHit2',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'tier2'
        },
        fly: {
            id: 'fly',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'grass',
            type2: 'protect'
        },
        metronome1: {
            id: 'metronome1',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'tier2'
        },
        metronome2: {
            id: 'metronome2',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'tier3'
        },
        nightSlash: {
            id: 'nightSlash',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'psychic'
        },
        nobleRoar2: {
            id: 'nobleRoar2',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'tier2'
        },
        payDay1: {
            id: 'payDay1',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'tier2'
        },
        payDay2: {
            id: 'payDay2',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'tier3'
        },
        selfDestruct: {
            id: 'selfDestruct',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'normal'
        },
        skyAttack1: {
            id: 'skyAttack1',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'tier1'
        },
        skyAttack3: {
            id: 'skyAttack3',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'tier3'
        },
        technoBlast: {
            id: 'technoBlast',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'water',
            type2: 'se',
            value3: 2,
            value4: 'fire'
        },
        thrash1: {
            id: 'thrash1',
            element: 'normal',
            type: 'se',
            value1: 2,
            value2: 'tier1'
        },
        uproar1: {
            id: 'uproar1',
            element: 'normal',
            type: 'se',
            value1: 2.5,
            value2: 'tier1'
        },
        darkPulse: {
            id: 'darkPulse',
            element: 'normal',
            type: 'se',
            value1: 2.5,
            value2: 'psychic'
        },
        dracoMeteor: {
            id: 'dracoMeteor',
            element: 'normal',
            type: 'se',
            value1: 2.5,
            value2: 'normal'
        },
        explosion: {
            id: 'explosion',
            element: 'normal',
            type: 'se',
            value1: 2.5,
            value2: 'normal'
        },
        heavySlam2: {
            id: 'heavySlam2',
            element: 'normal',
            type: 'se',
            value1: 2.5,
            value2: 'tier1'
        },
        oblivionWing: {
            id: 'oblivionWing',
            element: 'normal',
            type: 'se',
            value1: 2.5,
            value2: 'grass',
            type2: 'se',
            value3: 2.5,
            value4: 'psychic'
        },
        acid: {
            id: 'acid',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        bite: {
            id: 'bite',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'psychic'
        },
        confusion: {
            id: 'confusion',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'fighting'
        },
        hex: {
            id: 'hex',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'fighting'
        },
        lick: {
            id: 'lick',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'fighting'
        },
        poisonSting: {
            id: 'poisonSting',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        psybeam: {
            id: 'psybeam',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'fighting'
        },
        psyshock: {
            id: 'psyshock',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'fighting'
        },
        psystrike: {
            id: 'psystrike',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'tier3'
        },
        psywave: {
            id: 'psywave',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'fighting'
        },
        sludge: {
            id: 'sludge',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        topsyTurvy1: {
            id: 'topsyTurvy1',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'tier2'
        },
        topsyTurvy2: {
            id: 'topsyTurvy2',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'tier3'
        },
        dreamEater: {
            id: 'dreamEater',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'fighting'
        },
        extrasensory: {
            id: 'extrasensory',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'fighting',
            type2: 'reveal',
            value3: 1
        },
        playRough: {
            id: 'playRough',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'fighting'
        },
        poisonFang: {
            id: 'poisonFang',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        poisonJab: {
            id: 'poisonJab',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        psychic: {
            id: 'psychic',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'fighting'
        },
        psychoCut: {
            id: 'psychoCut',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'tier3'
        },
        shadowBall: {
            id: 'shadowBall',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'psychic'
        },
        shadowPunch: {
            id: 'shadowPunch',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'fighting'
        },
        sludgeBomb: {
            id: 'sludgeBomb',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        spiritShackle: {
            id: 'spiritShackle',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'fighting'
        },
        zenHeadbutt: {
            id: 'zenHeadbutt',
            element: 'psychic',
            type: 'se',
            value1: 2,
            value2: 'fighting'
        },
        crossPoison: {
            id: 'crossPoison',
            element: 'psychic',
            type: 'se',
            value1: 2.5,
            value2: 'grass'
        },
        mirrorCoat: {
            id: 'mirrorCoat',
            element: 'psychic',
            type: 'se',
            value1: 2.5,
            value2: 'psychic'
        },
        moonblast: {
            id: 'moonblast',
            element: 'psychic',
            type: 'se',
            value1: 2.5,
            value2: 'fighting'
        },
        psychoBoost: {
            id: 'psychoBoost',
            element: 'psychic',
            type: 'se',
            value1: 2.5,
            value2: 'fighting',
            type2: 'se',
            value3: 2.5,
            value4: 'psychic'
        },
        bubble: {
            id: 'bubble',
            element: 'water',
            type: 'se',
            value1: 1.5,
            value2: 'fire'
        },
        frostBreath: {
            id: 'frostBreath',
            element: 'water',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        icyWind: {
            id: 'icyWind',
            element: 'water',
            type: 'se',
            value1: 1.5,
            value2: 'grass'
        },
        waterGun: {
            id: 'waterGun',
            element: 'water',
            type: 'se',
            value1: 1.5,
            value2: 'fire'
        },
        waterPulse: {
            id: 'waterPulse',
            element: 'water',
            type: 'se',
            value1: 1.5,
            value2: 'fire'
        },
        aquaTail: {
            id: 'aquaTail',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'fire'
        },
        auroraBeam: {
            id: 'auroraBeam',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        brine: {
            id: 'brine',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'fire'
        },
        bubbleBeam: {
            id: 'bubbleBeam',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'fire'
        },
        dive: {
            id: 'dive',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'fire',
            type2: 'protect'
        },
        iceBeam: {
            id: 'iceBeam',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        icePunch: {
            id: 'icePunch',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'grass'
        },
        muddyWater: {
            id: 'muddyWater',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'fire'
        },
        originPulse: {
            id: 'originPulse',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'fire'
        },
        razorShell: {
            id: 'razorShell',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'fire'
        },
        steamEruption: {
            id: 'steamEruption',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'fire',
            type2: 'se',
            value3: 2,
            value4: 'grass'
        },
        waterfall: {
            id: 'waterfall',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'fire'
        },
        waterShuriken: {
            id: 'waterShuriken',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'fire'
        },
        blizzard: {
            id: 'blizzard',
            element: 'water',
            type: 'se',
            value1: 2.5,
            value2: 'grass'
        },
        hydroCannon: {
            id: 'hydroCannon',
            element: 'water',
            type: 'se',
            value1: 2.5,
            value2: 'fire'
        },
        hydroPump: {
            id: 'hydroPump',
            element: 'water',
            type: 'se',
            value1: 2.5,
            value2: 'fire'
        },
        sparklingAria: {
            id: 'sparklingAria',
            element: 'water',
            type: 'se',
            value1: 2.5,
            value2: 'fire'
        },
        spikeCannon: {
            id: 'spikeCannon',
            element: 'water',
            type: 'se',
            value1: 2.5,
            value2: 'fire'
        },
        aromatherapy: {
            id: 'aromatherapy',
            element: 'grass',
            type: 'wish',
            value1: 50,
            value2: '3'
        },
        synthesis: {
            id: 'synthesis',
            element: 'grass',
            type: 'wish',
            value1: 50,
            value2: '2'
        },
        healBell: {
            id: 'healBell',
            element: 'normal',
            type: 'wish',
            value1: 100,
            value2: '2'
        },
        softBoiled: {
            id: 'softBoiled',
            element: 'normal',
            type: 'wish',
            value1: 50,
            value2: '1'
        },
        batonPass: {
            id: 'batonPass',
            element: 'normal',
            type: 'wish',
            value1: 100,
            value2: '1'
        },
        present: {
            id: 'present',
            element: 'normal',
            type: 'wish',
            value1: 100,
            value2: '1'
        },
        wish: {
            id: 'wish',
            element: 'normal',
            type: 'wish',
            value1: 200,
            value2: '1'
        },
        geomancy: {
            id: 'geomancy',
            element: 'psychic',
            type: 'wish',
            value1: 100,
            value2: '2'
        },
        healPulse: {
            id: 'healPulse',
            element: 'psychic',
            type: 'wish',
            value1: 100,
            value2: '2'
        },
        aquaRing: {
            id: 'aquaRing',
            element: 'water',
            type: 'wish',
            value1: 50,
            value2: '3'
        },
        stoneEdge: {
            id: 'stoneEdge',
            element: 'fighting',
            type: 'se',
            value1: 2.5,
            value2: 'normal'
        },
        disarmingVoice: {
            id: 'disarmingVoice',
            element: 'psychic',
            type: 'se',
            value1: 1.5,
            value2: 'fighting',
            type2: 'reveal',
            value3: 1
        },
        freezeDry: {
            id: 'freezeDry',
            element: 'water',
            type: 'se',
            value1: 2,
            value2: 'grass',
            type2: 'se',
            value3: 2,
            value4: 'water'
        },
        pursuit: {
            id: 'pursuit',
            element: 'normal',
            type: 'se',
            value1: 1.5,
            value2: 'tier2',
            type2: 'priority'
        },
        zingZap: {
            id: 'zingZap',
            element: 'electric',
            type: 'se',
            value1: 2.5,
            value2: 'water'
        }
    },
    'src/conf/staticData/achievements.json': {
        0: {
            id: 0,
            task: 'win',
            value: 5,
            reward: 'gymPack',
            amount: 1
        },
        1: {
            id: 1,
            task: 'win',
            value: 10,
            reward: 'gymPack',
            amount: 1
        },
        2: {
            id: 2,
            task: 'win',
            value: 20,
            reward: 'gymPack',
            amount: 1
        },
        3: {
            id: 3,
            task: 'win',
            value: 50,
            reward: 'gymPack',
            amount: 1
        },
        4: {
            id: 4,
            task: 'win',
            value: 100,
            reward: 'silverPack',
            amount: 1
        },
        5: {
            id: 5,
            task: 'win',
            value: 200,
            reward: 'silverPack',
            amount: 1
        },
        6: {
            id: 6,
            task: 'win',
            value: 400,
            reward: 'silverPack',
            amount: 1
        },
        7: {
            id: 7,
            task: 'win',
            value: 600,
            reward: 'silverPack',
            amount: 1
        },
        8: {
            id: 8,
            task: 'win',
            value: 800,
            reward: 'silverPack',
            amount: 1
        },
        9: {
            id: 9,
            task: 'win',
            value: 1e3,
            reward: 'leagueSilverPack',
            amount: 1
        },
        10: {
            id: 10,
            task: 'play',
            value: 5,
            reward: 'coins',
            amount: 100
        },
        11: {
            id: 11,
            task: 'play',
            value: 10,
            reward: 'coins',
            amount: 100
        },
        12: {
            id: 12,
            task: 'play',
            value: 20,
            reward: 'coins',
            amount: 200
        },
        13: {
            id: 13,
            task: 'play',
            value: 50,
            reward: 'coins',
            amount: 200
        },
        14: {
            id: 14,
            task: 'play',
            value: 100,
            reward: 'coins',
            amount: 200
        },
        15: {
            id: 15,
            task: 'play',
            value: 200,
            reward: 'coins',
            amount: 200
        },
        16: {
            id: 16,
            task: 'play',
            value: 400,
            reward: 'coins',
            amount: 400
        },
        17: {
            id: 17,
            task: 'play',
            value: 600,
            reward: 'coins',
            amount: 400
        },
        18: {
            id: 18,
            task: 'play',
            value: 800,
            reward: 'coins',
            amount: 400
        },
        19: {
            id: 19,
            task: 'play',
            value: 1e3,
            reward: 'coins',
            amount: 400
        },
        20: {
            id: 20,
            task: 'sentToLab',
            value: 10,
            reward: 'candy',
            amount: 50
        },
        21: {
            id: 21,
            task: 'sentToLab',
            value: 20,
            reward: 'candy',
            amount: 50
        },
        22: {
            id: 22,
            task: 'sentToLab',
            value: 40,
            reward: 'candy',
            amount: 100
        },
        23: {
            id: 23,
            task: 'sentToLab',
            value: 100,
            reward: 'candy',
            amount: 100
        },
        24: {
            id: 24,
            task: 'sentToLab',
            value: 200,
            reward: 'candy',
            amount: 100
        },
        25: {
            id: 25,
            task: 'sentToLab',
            value: 400,
            reward: 'candy',
            amount: 100
        },
        26: {
            id: 26,
            task: 'sentToLab',
            value: 800,
            reward: 'candy',
            amount: 200
        },
        27: {
            id: 27,
            task: 'sentToLab',
            value: 1200,
            reward: 'candy',
            amount: 200
        },
        28: {
            id: 28,
            task: 'sentToLab',
            value: 1600,
            reward: 'candy',
            amount: 200
        },
        29: {
            id: 29,
            task: 'sentToLab',
            value: 2e3,
            reward: 'candy',
            amount: 200
        },
        30: {
            id: 30,
            task: 'evolved',
            value: 1,
            reward: 'coins',
            amount: 50
        },
        31: {
            id: 31,
            task: 'evolved',
            value: 2,
            reward: 'coins',
            amount: 100
        },
        32: {
            id: 32,
            task: 'evolved',
            value: 4,
            reward: 'coins',
            amount: 100
        },
        33: {
            id: 33,
            task: 'evolved',
            value: 8,
            reward: 'coins',
            amount: 200
        },
        34: {
            id: 34,
            task: 'evolved',
            value: 20,
            reward: 'coins',
            amount: 200
        },
        35: {
            id: 35,
            task: 'evolved',
            value: 40,
            reward: 'coins',
            amount: 200
        },
        36: {
            id: 36,
            task: 'evolved',
            value: 80,
            reward: 'coins',
            amount: 200
        },
        37: {
            id: 37,
            task: 'evolved',
            value: 160,
            reward: 'coins',
            amount: 200
        },
        38: {
            id: 38,
            task: 'evolved',
            value: 240,
            reward: 'coins',
            amount: 200
        },
        39: {
            id: 39,
            task: 'evolved',
            value: 320,
            reward: 'coins',
            amount: 200
        },
        40: {
            id: 40,
            task: 'evolved',
            value: 400,
            reward: 'coins',
            amount: 200
        },
        41: {
            id: 41,
            task: 'collected',
            value: 10,
            reward: 'candy',
            amount: 50
        },
        42: {
            id: 42,
            task: 'collected',
            value: 20,
            reward: 'candy',
            amount: 50
        },
        43: {
            id: 43,
            task: 'collected',
            value: 30,
            reward: 'candy',
            amount: 50
        },
        44: {
            id: 44,
            task: 'collected',
            value: 40,
            reward: 'candy',
            amount: 50
        },
        45: {
            id: 45,
            task: 'collected',
            value: 50,
            reward: 'candy',
            amount: 50
        },
        46: {
            id: 46,
            task: 'collected',
            value: 60,
            reward: 'candy',
            amount: 100
        },
        47: {
            id: 47,
            task: 'collected',
            value: 70,
            reward: 'candy',
            amount: 100
        },
        48: {
            id: 48,
            task: 'collected',
            value: 80,
            reward: 'candy',
            amount: 100
        },
        49: {
            id: 49,
            task: 'collected',
            value: 90,
            reward: 'candy',
            amount: 100
        },
        50: {
            id: 50,
            task: 'collected',
            value: 100,
            reward: 'candy',
            amount: 100
        },
        51: {
            id: 51,
            task: 'collected',
            value: 110,
            reward: 'candy',
            amount: 200
        },
        52: {
            id: 52,
            task: 'collected',
            value: 120,
            reward: 'candy',
            amount: 200
        },
        53: {
            id: 53,
            task: 'collected',
            value: 130,
            reward: 'candy',
            amount: 200
        },
        54: {
            id: 54,
            task: 'collected',
            value: 140,
            reward: 'candy',
            amount: 200
        },
        55: {
            id: 55,
            task: 'collected',
            value: 150,
            reward: 'candy',
            amount: 200
        },
        56: {
            id: 56,
            task: 'collected',
            value: 160,
            reward: 'candy',
            amount: 300
        },
        57: {
            id: 57,
            task: 'collected',
            value: 170,
            reward: 'candy',
            amount: 300
        },
        58: {
            id: 58,
            task: 'collected',
            value: 180,
            reward: 'candy',
            amount: 300
        },
        59: {
            id: 59,
            task: 'collected',
            value: 190,
            reward: 'candy',
            amount: 300
        },
        60: {
            id: 60,
            task: 'collected',
            value: 200,
            reward: 'candy',
            amount: 300
        },
        61: {
            id: 61,
            task: 'collected',
            value: 210,
            reward: 'candy',
            amount: 400
        },
        62: {
            id: 62,
            task: 'collected',
            value: 220,
            reward: 'candy',
            amount: 400
        },
        63: {
            id: 63,
            task: 'collected',
            value: 230,
            reward: 'candy',
            amount: 400
        },
        64: {
            id: 64,
            task: 'collected',
            value: 240,
            reward: 'candy',
            amount: 400
        },
        65: {
            id: 65,
            task: 'collected',
            value: 250,
            reward: 'candy',
            amount: 400
        },
        66: {
            id: 66,
            task: 'collected',
            value: 260,
            reward: 'candy',
            amount: 500
        },
        67: {
            id: 67,
            task: 'collected',
            value: 270,
            reward: 'candy',
            amount: 500
        },
        68: {
            id: 68,
            task: 'collected',
            value: 280,
            reward: 'candy',
            amount: 500
        },
        69: {
            id: 69,
            task: 'collected',
            value: 290,
            reward: 'candy',
            amount: 500
        },
        70: {
            id: 70,
            task: 'collected',
            value: 300,
            reward: 'candy',
            amount: 500
        },
        71: {
            id: 71,
            task: 'collected',
            value: 310,
            reward: 'candy',
            amount: 600
        },
        72: {
            id: 72,
            task: 'collected',
            value: 320,
            reward: 'candy',
            amount: 600
        },
        73: {
            id: 73,
            task: 'collected',
            value: 330,
            reward: 'candy',
            amount: 600
        },
        74: {
            id: 74,
            task: 'collected',
            value: 340,
            reward: 'candy',
            amount: 600
        },
        75: {
            id: 75,
            task: 'collected',
            value: 350,
            reward: 'candy',
            amount: 600
        },
        76: {
            id: 76,
            task: 'win',
            value: 300,
            reward: 'silverPack',
            amount: 1
        },
        77: {
            id: 77,
            task: 'win',
            value: 500,
            reward: 'leagueBronzePack',
            amount: 1
        },
        78: {
            id: 78,
            task: 'win',
            value: 700,
            reward: 'silverPack',
            amount: 1
        },
        79: {
            id: 79,
            task: 'win',
            value: 900,
            reward: 'silverPack',
            amount: 1
        },
        80: {
            id: 80,
            task: 'win',
            value: 2e3,
            reward: 'goldPack',
            amount: 1
        },
        81: {
            id: 81,
            task: 'win',
            value: 4e3,
            reward: 'goldPack',
            amount: 1
        },
        82: {
            id: 82,
            task: 'win',
            value: 6e3,
            reward: 'goldPack',
            amount: 1
        },
        83: {
            id: 83,
            task: 'win',
            value: 8e3,
            reward: 'goldPack',
            amount: 1
        },
        84: {
            id: 84,
            task: 'win',
            value: 1e4,
            reward: 'leagueGoldPack',
            amount: 1
        }
    },
    'src/conf/staticData/aiOverride.json': {
        1: {
            1: 6,
            2: 0,
            3: 0
        },
        2: {
            1: 5,
            2: 1,
            3: 0
        },
        3: {
            1: 4,
            2: 2,
            3: 0
        },
        4: {
            1: 3,
            2: 2,
            3: 1
        },
        5: {
            1: 2,
            2: 2,
            3: 2
        },
        6: {
            1: 2,
            2: 2,
            3: 2
        },
        7: {
            1: 2,
            2: 2,
            3: 2
        },
        8: {
            1: 2,
            2: 2,
            3: 2
        },
        9: {
            1: 2,
            2: 2,
            3: 2
        },
        10: {
            1: 2,
            2: 2,
            3: 2
        },
        11: {
            1: 2,
            2: 2,
            3: 2
        }
    },
    'src/conf/staticData/allowlist.json': {
        prod: {
            665037: {
                joinRaid: !0,
                lbReward: !1
            },
            665038: {
                joinRaid: !0,
                lbReward: !1
            },
            665039: {
                joinRaid: !0,
                lbReward: !1
            },
            665040: {
                joinRaid: !0,
                lbReward: !1
            },
            665043: {
                joinRaid: !0,
                lbReward: !1
            },
            695910: {
                joinRaid: !0,
                lbReward: !0
            },
            4732319: {
                joinRaid: !0,
                lbReward: !1
            }
        },
        dev: {
            16: {
                joinRaid: !1,
                lbReward: !0
            },
            47: {
                joinRaid: !0,
                lbReward: !0
            },
            6144177: {
                joinRaid: !1,
                lbReward: !0
            },
            6144190: {
                joinRaid: !1,
                lbReward: !0
            },
            6144191: {
                joinRaid: !0,
                lbReward: !0
            },
            6144346: {
                joinRaid: !0,
                lbReward: !0
            },
            6144376: {
                joinRaid: !0,
                lbReward: !0
            },
            6144444: {
                joinRaid: !1,
                lbReward: !0
            },
            6144604: {
                joinRaid: !1,
                lbReward: !1
            },
            6144848: {
                joinRaid: !0,
                lbReward: !0
            }
        }
    },
    'src/conf/staticData/arenaAffects.json': {
        electric: {
            type: 'electric'
        },
        fighting: {
            type: 'fighting'
        },
        fire: {
            type: 'fire'
        },
        grass: {
            type: 'grass'
        },
        normal: {
            type: 'normal'
        },
        psychic: {
            type: 'psychic'
        },
        water: {
            type: 'water'
        },
        tier1: {
            type: 'tier1'
        },
        tier2: {
            type: 'tier2'
        },
        tier3: {
            type: 'tier3'
        },
        fossil: {
            type: 'fossil'
        },
        hail: {
            isNot: !0,
            type: 'water'
        },
        sandstorm: {
            isNot: !0,
            type: ['fighting', 'normal']
        }
    },
    'src/conf/staticData/badgeGym.json': {
        1: [{
            pokemonId: 'pidgey',
            gymType: 'normal'
        }, {
            pokemonId: 'spearow',
            gymType: 'normal'
        }, {
            pokemonId: 'bunnelby',
            gymType: 'normal'
        }, {
            pokemonId: 'psyduck',
            gymType: 'normal'
        }, {
            pokemonId: 'magikarp',
            gymType: 'normal'
        }, {
            pokemonId: 'snorlax',
            gymType: 'normal'
        }],
        2: [{
            pokemonId: 'caterpie',
            gymType: 'grass'
        }, {
            pokemonId: 'weedle',
            gymType: 'grass'
        }, {
            pokemonId: 'hoppip',
            gymType: 'grass'
        }, {
            pokemonId: 'oddish',
            gymType: 'grass'
        }, {
            pokemonId: 'exeggcute',
            gymType: 'grass'
        }, {
            pokemonId: 'heracross',
            gymType: 'grass'
        }],
        3: [{
            pokemonId: 'fletchling',
            gymType: 'fire'
        }, {
            pokemonId: 'litleo',
            gymType: 'fire'
        }, {
            pokemonId: 'ponyta',
            gymType: 'fire'
        }, {
            pokemonId: 'slugma',
            gymType: 'fire'
        }, {
            pokemonId: 'vulpix',
            gymType: 'fire'
        }, {
            pokemonId: 'magmar',
            gymType: 'fire'
        }],
        4: [{
            pokemonId: 'horsea',
            gymType: 'water'
        }, {
            pokemonId: 'feebas',
            gymType: 'water'
        }, {
            pokemonId: 'wishiwashi',
            gymType: 'water'
        }, {
            pokemonId: 'shellder',
            gymType: 'water'
        }, {
            pokemonId: 'stunfisk',
            gymType: 'water'
        }, {
            pokemonId: 'lapras',
            gymType: 'water'
        }],
        5: [{
            pokemonId: 'magnemite',
            gymType: 'electric'
        }, {
            pokemonId: 'helioptile',
            gymType: 'electric'
        }, {
            pokemonId: 'dedenne',
            gymType: 'electric'
        }, {
            pokemonId: 'farfetchd',
            gymType: 'electric'
        }, {
            pokemonId: 'electrike',
            gymType: 'electric'
        }, {
            pokemonId: 'pichu',
            gymType: 'electric'
        }],
        6: [{
            pokemonId: 'machop',
            gymType: 'fighting'
        }, {
            pokemonId: 'cubone',
            gymType: 'fighting'
        }, {
            pokemonId: 'maractus',
            gymType: 'fighting'
        }, {
            pokemonId: 'onix',
            gymType: 'fighting'
        }, {
            pokemonId: 'croagunk',
            gymType: 'fighting'
        }, {
            pokemonId: 'riolu',
            gymType: 'fighting'
        }],
        7: [{
            pokemonId: 'gastly',
            gymType: 'psychic'
        }, {
            pokemonId: 'solosis',
            gymType: 'psychic'
        }, {
            pokemonId: 'paras',
            gymType: 'psychic'
        }, {
            pokemonId: 'slowpoke',
            gymType: 'psychic'
        }, {
            pokemonId: 'morelull',
            gymType: 'psychic'
        }, {
            pokemonId: 'mimikyu',
            gymType: 'psychic'
        }],
        8: [{
            pokemonId: 'rhyhorn',
            gymType: 'dragon'
        }, {
            pokemonId: 'natu',
            gymType: 'dragon'
        }, {
            pokemonId: 'kricketot',
            gymType: 'dragon'
        }, {
            pokemonId: 'heatmor',
            gymType: 'dragon'
        }, {
            pokemonId: 'shuckle',
            gymType: 'dragon'
        }, {
            pokemonId: 'dratini',
            gymType: 'dragon'
        }]
    },
    'src/conf/staticData/bagExpandCosts.json': {
        50: {
            slot: 55,
            cost: 200
        },
        55: {
            slot: 60,
            cost: 400
        },
        60: {
            slot: 65,
            cost: 600
        },
        65: {
            slot: 70,
            cost: 800
        },
        70: {
            slot: 75,
            cost: 1e3
        },
        75: {
            slot: 80,
            cost: 1200
        },
        80: {
            slot: 85,
            cost: 1400
        },
        85: {
            slot: 90,
            cost: 1600
        },
        90: {
            slot: 95,
            cost: 1800
        },
        95: {
            slot: 100,
            cost: 2e3
        },
        100: {
            slot: 105,
            cost: 2200
        },
        105: {
            slot: 110,
            cost: 2400
        },
        110: {
            slot: 115,
            cost: 2600
        },
        115: {
            slot: 120,
            cost: 2800
        },
        120: {
            slot: 125,
            cost: 3e3
        },
        125: {
            slot: 130,
            cost: 3200
        },
        130: {
            slot: 135,
            cost: 3400
        },
        135: {
            slot: 140,
            cost: 3600
        },
        140: {
            slot: 145,
            cost: 3800
        },
        145: {
            slot: 150,
            cost: 4e3
        },
        150: {
            slot: 155,
            cost: 4200
        },
        155: {
            slot: 160,
            cost: 4400
        },
        160: {
            slot: 165,
            cost: 4600
        },
        165: {
            slot: 170,
            cost: 4800
        },
        170: {
            slot: 175,
            cost: 5e3
        },
        175: {
            slot: 180,
            cost: 5200
        },
        180: {
            slot: 185,
            cost: 5400
        },
        185: {
            slot: 190,
            cost: 5600
        },
        190: {
            slot: 195,
            cost: 5800
        },
        195: {
            slot: 200,
            cost: 6e3
        }
    },
    'src/conf/staticData/challengeRewards.json': {
        0: {
            id: 0,
            points: 20,
            reward: 'starMedal',
            amount: 1
        },
        1: {
            id: 1,
            points: 50,
            reward: 'starMedal',
            amount: 1
        },
        2: {
            id: 2,
            points: 80,
            reward: 'starMedal',
            amount: 1
        },
        3: {
            id: 3,
            points: 120,
            reward: 'starPack',
            amount: 1
        }
    },
    'src/conf/staticData/creaturesQA.json': {
        globalLaunch: {
            1: ['meowth', 'chikorita', 'cyndaquil', 'totodile', 'treecko', 'torchic', 'mudkip', 'turtwig', 'chimchar', 'piplup', 'snivy', 'tepig', 'oshawott'],
            2: ['persian', 'bayleef', 'quilava', 'croconaw', 'grovyle', 'combusken', 'marshtomp', 'grotle', 'monferno', 'prinplup', 'servine', 'pignite', 'dewott'],
            3: ['meganium', 'typhlosion', 'feraligatr', 'sceptile', 'blaziken', 'swampert', 'torterra', 'infernape', 'empoleon', 'serperior', 'emboar', 'samurott']
        },
        safariZone: {
            1: ['pinsir', 'phanpy', 'blitzle', 'zebstrika', 'pineco', 'teddiursa', 'ursaring'],
            2: ['donphan', 'tropius', 'steelix', 'forretress']
        },
        mountains: {
            1: ['growlithe', 'poliwag', 'poliwhirl', 'wooper', 'quagsire', 'misdreavus', 'ducklett', 'swanna', 'salandit', 'salazzle'],
            2: ['arcanine', 'mismagius'],
            3: ['poliwrath', 'politoed']
        },
        fairy: {
            1: ['carbink', 'shroomish', 'breloom', 'azurill', 'marill', 'ralts', 'kirlia', 'cleffa', 'clefairy', 'happiny', 'chansey'],
            2: ['azumarill', 'clefable'],
            3: ['gardevoir', 'gallade']
        },
        moltres: {
            1: ['larvesta', 'numel', 'volcarona'],
            2: ['camerupt', 'turtonator'],
            3: ['lugia', 'moltres']
        },
        zapdos: {
            1: ['ariados', 'electabuzz', 'elekid', 'grimer', 'spinarak'],
            2: ['muk'],
            3: ['electivire', 'zapdos']
        },
        articuno: {
            1: ['delibird', 'sneasel', 'snorunt', 'weavile'],
            2: ['froslass', 'glalie'],
            3: ['articuno']
        },
        mewtwo: {
            1: ['inkay', 'zubat', 'golbat'],
            2: ['malamar', 'crobat', 'wobbuffet'],
            3: ['mew', 'mewtwo']
        },
        raikou: {
            1: ['wingull', 'pelipper', 'lotad', 'lombre', 'mareep', 'flaaffy'],
            2: ['ludicolo', 'raikou'],
            3: ['ho-oh', 'ampharos']
        },
        entei: {
            1: ['duskull', 'dusclops', 'houndour'],
            2: ['torkoal', 'houndoom', 'entei'],
            3: ['dusknoir']
        },
        suicune: {
            1: ['meditite', 'bronzor', 'beldum', 'metang'],
            2: ['suicune', 'medicham', 'bronzong'],
            3: ['metagross']
        },
        deoxys: {
            1: ['baltoy', 'sableye', 'aipom'],
            2: ['jirachi', 'claydol', 'ambipom'],
            3: ['deoxys']
        },
        groudon: {
            1: ['cranidos', 'shieldon', 'tyrunt'],
            2: ['rampardos', 'bastiodon', 'aerodactyl'],
            3: ['tyrantrum', 'groudon', 'rayquaza']
        },
        kyogre: {
            1: ['omanyte', 'tirtouga', 'carracosta', 'amaura'],
            2: ['omastar'],
            3: ['kyogre', 'aurorus']
        },
        celebi: {
            1: ['slakoth', 'vigoroth', 'carvanha', 'jynx'],
            2: ['slaking', 'sharpedo', 'celebi'],
            3: ['kyurem']
        },
        xerneas: {
            1: ['lileep', 'cradily', 'scyther'],
            2: ['scizor'],
            3: ['volcanion', 'xerneas']
        },
        regice: {
            1: ['wailmer', 'staryu', 'starmie'],
            2: ['alomomola', 'wailord', 'regice'],
            3: ['genesect']
        },
        yveltal: {
            1: ['bagon', 'shelgon', 'archen', 'archeops'],
            3: ['salamence', 'yveltal']
        },
        regirock: {
            1: ['geodude', 'graveler', 'gligar', 'larvitar', 'pupitar'],
            2: ['golem', 'gliscor', 'regirock'],
            3: ['tyranitar']
        },
        zygarde: {
            1: ['anorith', 'armaldo', 'kabuto', 'gible', 'gabite'],
            2: ['kabutops'],
            3: ['garchomp', 'zygarde']
        },
        registeel: {
            1: ['porygon', 'porygon2', 'aron', 'lairon'],
            2: ['aggron', 'skarmory', 'registeel'],
            3: ['porygonz']
        },
        pending: {
            1: ['swablu', 'togepi', 'togetic'],
            2: ['altaria', 'togekiss']
        },
        special: {
            1: ['lunatone', 'solrock', 'corsola', 'togedemaru']
        }
    },
    'src/conf/staticData/dailyTasks.json': {
        0: {
            id: 0,
            task: 'win',
            value: 1,
            reward: 'checks',
            amount: 20,
            start: 0
        },
        1: {
            id: 1,
            task: 'play',
            value: 1,
            reward: 'checks',
            amount: 5,
            start: 0
        },
        2: {
            id: 2,
            task: 'play',
            value: 3,
            reward: 'checks',
            amount: 10,
            start: 0
        },
        3: {
            id: 3,
            task: 'play',
            value: 5,
            reward: 'checks',
            amount: 10,
            start: 0
        },
        4: {
            id: 4,
            task: 'sentToLab',
            value: 1,
            reward: 'checks',
            amount: 5,
            start: 0
        },
        5: {
            id: 5,
            task: 'sentToLab',
            value: 5,
            reward: 'checks',
            amount: 10,
            start: 0
        },
        6: {
            id: 6,
            task: 'sentToLab',
            value: 10,
            reward: 'checks',
            amount: 10,
            start: 0
        },
        7: {
            id: 7,
            task: 'coinSpent',
            value: 200,
            reward: 'checks',
            amount: 5,
            start: 0
        },
        8: {
            id: 8,
            task: 'coinSpent',
            value: 400,
            reward: 'checks',
            amount: 10,
            start: 0
        },
        9: {
            id: 9,
            task: 'coinSpent',
            value: 600,
            reward: 'checks',
            amount: 10,
            start: 0
        },
        10: {
            id: 10,
            task: 'evolved',
            value: 1,
            reward: 'checks',
            amount: 5,
            start: 0
        },
        11: {
            id: 11,
            task: 'evolved',
            value: 2,
            reward: 'checks',
            amount: 10,
            start: 0
        },
        12: {
            id: 12,
            task: 'evolved',
            value: 4,
            reward: 'checks',
            amount: 10,
            start: 0
        },
        13: {
            id: 13,
            task: 'play',
            value: 10,
            reward: 'checks',
            amount: 10,
            start: 0
        }
    },
    'src/conf/staticData/evolutionCosts.json': {
        1: {
            1: 50,
            2: 100,
            3: 200
        },
        2: {
            1: 100,
            2: 200,
            3: 400
        },
        3: {
            1: 200,
            2: 400,
            3: 800
        }
    },
    'src/conf/staticData/ftueRivalTeams.json': {
        fire: [{
            pokemonId: 'jumpluff',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'weedle',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'fearow',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'magikarp',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'pikachu',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'bunnelby',
            abilityIdx: 0,
            iv: 0
        }],
        grass: [{
            pokemonId: 'kingdra',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'weedle',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'fearow',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'magikarp',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'pikachu',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'bunnelby',
            abilityIdx: 0,
            iv: 0
        }],
        water: [{
            pokemonId: 'talonflame',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'weedle',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'fearow',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'magikarp',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'pikachu',
            abilityIdx: 0,
            iv: 0
        }, {
            pokemonId: 'bunnelby',
            abilityIdx: 0,
            iv: 0
        }]
    },
    'src/conf/staticData/gachaContent.json': {
        gymMedal: [{
            1: 700,
            2: 250,
            3: 50,
            4: 0,
            5: 0,
            count: 1,
            gymPool: !0
        }],
        gymPack: [{
            1: 700,
            2: 250,
            3: 50,
            4: 0,
            5: 0,
            count: 4,
            gymPool: !0
        }, {
            1: 0,
            2: 200,
            3: 50,
            4: 0,
            5: 0,
            count: 1,
            gymPool: !0
        }],
        silverPack: [{
            1: 700,
            2: 250,
            3: 50,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !0,
            gachaPool: 'league',
            minIv: 16
        }, {
            1: 0,
            2: 200,
            3: 50,
            4: 0,
            5: 0,
            count: 3,
            gymPool: !0,
            gachaPool: 'league',
            minIv: 16
        }],
        goldPack: [{
            1: 700,
            2: 250,
            3: 50,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !0,
            gachaPool: 'league',
            minIv: 31
        }, {
            1: 0,
            2: 200,
            3: 50,
            4: 0,
            5: 0,
            count: 3,
            gymPool: !0,
            gachaPool: 'league',
            minIv: 31
        }],
        starterMedal: [{
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'starter'
        }],
        eeveeMedal: [{
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'eevee',
            minIv: 31
        }],
        gymPack1: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack1',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack1',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack1',
            minIv: 16
        }],
        gymPack2: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack2',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack2',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack2',
            minIv: 16
        }],
        gymPack3: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack3',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack3',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack3',
            minIv: 16
        }],
        gymPack4: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack4',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack4',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack4',
            minIv: 16
        }],
        gymPack5: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack5',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack5',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack5',
            minIv: 16
        }],
        gymPack6: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack6',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack6',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack6',
            minIv: 16
        }],
        gymPack7: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack7',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack7',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack7',
            minIv: 16
        }],
        gymPack8: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack8',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack8',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack8',
            minIv: 16
        }],
        gymPack9: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack9',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack9',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack9',
            minIv: 16
        }],
        gymPack10: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack10',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack10',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack10',
            minIv: 16
        }],
        gymPack11: [{
            1: 1,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack11',
            minIv: 16
        }, {
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gachaPool: 'gymPack11',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gachaPool: 'gymPack11',
            minIv: 16
        }],
        starPack: [{
            1: 700,
            2: 250,
            3: 50,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !0
        }, {
            1: 700,
            2: 250,
            3: 50,
            4: 0,
            5: 0,
            count: 1,
            gymPool: !0,
            gachaPool: 'starPack3'
        }, {
            1: 700,
            2: 250,
            3: 50,
            4: 0,
            5: 0,
            count: 1,
            gymPool: !0,
            gachaPool: 'starPack2'
        }, {
            1: 0,
            2: 225,
            3: 25,
            4: 0,
            5: 0,
            count: 1,
            gymPool: !0,
            gachaPool: 'starPack1'
        }],
        starMedal: [{
            1: 700,
            2: 250,
            3: 50,
            4: 0,
            5: 0,
            count: 1,
            gymPool: !0,
            gachaPool: 'starPack4'
        }],
        leagueBronzePack: [{
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !0,
            gachaPool: 'league'
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !0,
            gachaPool: 'league'
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gymPool: !1,
            gachaPool: 'starter'
        }],
        leagueSilverPack: [{
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !0,
            gachaPool: 'league',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !0,
            gachaPool: 'league',
            minIv: 16
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gymPool: !1,
            gachaPool: 'starter',
            minIv: 16
        }],
        leagueGoldPack: [{
            1: 0,
            2: 1,
            3: 0,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !0,
            gachaPool: 'league',
            minIv: 31
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !0,
            gachaPool: 'league',
            minIv: 31
        }, {
            1: 0,
            2: 0,
            3: 1,
            4: 0,
            5: 0,
            count: 1,
            gymPool: !1,
            gachaPool: 'starter',
            minIv: 31
        }],
        raidMedal4: [{
            1: 0,
            2: 950,
            3: 40,
            4: 10,
            5: 0,
            count: 1,
            gymPool: !1,
            raidPool: !0,
            maxIv: 25
        }],
        raidMedal5: [{
            1: 0,
            2: 950,
            3: 40,
            4: 10,
            5: 0,
            count: 1,
            gymPool: !1,
            raidPool: !0,
            maxIv: 27
        }],
        raidMedal6: [{
            1: 0,
            2: 950,
            3: 40,
            4: 10,
            5: 0,
            count: 1,
            gymPool: !1,
            raidPool: !0,
            maxIv: 29
        }],
        raidMedal7: [{
            1: 0,
            2: 890,
            3: 80,
            4: 20,
            5: 10,
            count: 1,
            gymPool: !1,
            raidPool: !0
        }],
        raidMedal11: [{
            1: 0,
            2: 780,
            3: 160,
            4: 40,
            5: 20,
            count: 1,
            gymPool: !1,
            raidPool: !0
        }],
        raidMedal15: [{
            1: 0,
            2: 650,
            3: 240,
            4: 80,
            5: 30,
            count: 1,
            gymPool: !1,
            raidPool: !0
        }],
        raidPack1: [{
            1: 400,
            2: 600,
            3: 0,
            4: 0,
            5: 0,
            count: 5,
            gymPool: !0,
            raidPool: !0,
            maxIv: 25
        }],
        raidPack2: [{
            1: 200,
            2: 750,
            3: 50,
            4: 0,
            5: 0,
            count: 5,
            gymPool: !0,
            raidPool: !0,
            maxIv: 25
        }],
        raidPack3: [{
            1: 0,
            2: 900,
            3: 100,
            4: 0,
            5: 0,
            count: 5,
            gymPool: !0,
            raidPool: !0,
            maxIv: 25
        }],
        raidPack4: [{
            1: 0,
            2: 975,
            3: 25,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            raidPool: !0
        }, {
            1: 0,
            2: 975,
            3: 25,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            gachaPool: 'raid'
        }, {
            1: 0,
            2: 850,
            3: 100,
            4: 50,
            5: 0,
            count: 1,
            gymPool: !1,
            raidPool: !0,
            maxIv: 25
        }],
        raidPack5: [{
            1: 0,
            2: 975,
            3: 25,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            raidPool: !0
        }, {
            1: 0,
            2: 975,
            3: 25,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            gachaPool: 'raid'
        }, {
            1: 0,
            2: 850,
            3: 100,
            4: 50,
            5: 0,
            count: 1,
            gymPool: !1,
            raidPool: !0,
            maxIv: 27
        }],
        raidPack6: [{
            1: 0,
            2: 975,
            3: 25,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            raidPool: !0
        }, {
            1: 0,
            2: 975,
            3: 25,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            gachaPool: 'raid'
        }, {
            1: 0,
            2: 850,
            3: 100,
            4: 50,
            5: 0,
            count: 1,
            gymPool: !1,
            raidPool: !0,
            maxIv: 29
        }],
        raidPack7: [{
            1: 0,
            2: 950,
            3: 50,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            raidPool: !0
        }, {
            1: 0,
            2: 950,
            3: 50,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            gachaPool: 'raid'
        }, {
            1: 0,
            2: 695,
            3: 175,
            4: 100,
            5: 30,
            count: 1,
            gymPool: !1,
            raidPool: !0
        }],
        raidPack11: [{
            1: 0,
            2: 925,
            3: 75,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            raidPool: !0,
            minIv: 8
        }, {
            1: 0,
            2: 925,
            3: 75,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            gachaPool: 'raid'
        }, {
            1: 0,
            2: 350,
            3: 350,
            4: 200,
            5: 100,
            count: 1,
            gymPool: !1,
            raidPool: !0
        }],
        raidPack15: [{
            1: 0,
            2: 900,
            3: 100,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            raidPool: !0,
            minIv: 16
        }, {
            1: 0,
            2: 900,
            3: 100,
            4: 0,
            5: 0,
            count: 2,
            gymPool: !1,
            gachaPool: 'raid'
        }, {
            1: 0,
            2: 150,
            3: 400,
            4: 300,
            5: 150,
            count: 1,
            gymPool: !1,
            raidPool: !0
        }]
    },
    'src/conf/staticData/gachaPools.json': {
        starPack1: {
            3: ['bulbasaur', 'charmander', 'squirtle', 'rowlet', 'litten', 'cyndaquil', 'totodile', 'treecko', 'torchic', 'mudkip', 'turtwig', 'piplup', 'snivy', 'tepig', 'oshawott']
        },
        starPack2: {
            3: ['eevee', 'eevee', 'eevee', 'eevee', 'lunatone', 'solrock', 'corsola', 'pichu', 'pichu', 'meowth', 'chimchar', 'chespin']
        },
        starPack3: {
            3: ['eevee', 'eevee', 'eevee', 'eevee', 'lunatone', 'solrock', 'corsola', 'pichu', 'pichu', 'meowth', 'popplio', 'chikorita']
        },
        starPack4: {
            3: ['eevee', 'eevee', 'eevee', 'eevee', 'lunatone', 'solrock', 'corsola', 'pichu', 'pichu', 'meowth', 'fennekin', 'froakie']
        },
        raid: {
            2: ['larvesta', 'numel', 'spinarak', 'grimer', 'delibird', 'snorunt', 'wobbuffet', 'zubat', 'wingull', 'lotad', 'torkoal', 'houndour', 'bronzor', 'meditite', 'aipom', 'sableye', 'cranidos', 'shieldon', 'tyrunt', 'omanyte', 'tirtouga', 'amaura'],
            3: ['turtonator', 'elekid', 'sneasel', 'inkay', 'mareep', 'duskull', 'beldum', 'baltoy', 'aerodactyl', 'aerodactyl']
        },
        moltres: {
            2: ['larvesta', 'numel'],
            3: ['turtonator', 'turtonator', 'turtonator', 'cyndaquil'],
            4: ['moltres'],
            5: ['lugia']
        },
        zapdos: {
            2: ['spinarak', 'grimer'],
            3: ['elekid', 'elekid', 'elekid', 'turtwig'],
            4: ['zapdos'],
            5: ['lugia']
        },
        articuno: {
            2: ['delibird', 'snorunt'],
            3: ['sneasel', 'sneasel', 'sneasel', 'piplup'],
            4: ['articuno'],
            5: ['lugia']
        },
        mewtwo: {
            2: ['wobbuffet', 'zubat'],
            3: ['inkay', 'inkay', 'inkay', 'froakie'],
            4: ['mewtwo'],
            5: ['mew']
        },
        raikou: {
            2: ['wingull', 'lotad'],
            3: ['mareep', 'mareep', 'mareep', 'rowlet'],
            4: ['raikou'],
            5: ['ho-oh']
        },
        entei: {
            2: ['torkoal', 'houndour'],
            3: ['duskull', 'duskull', 'duskull', 'fennekin'],
            4: ['entei'],
            5: ['ho-oh']
        },
        suicune: {
            2: ['meditite', 'bronzor'],
            3: ['beldum', 'beldum', 'beldum', 'mudkip'],
            4: ['suicune'],
            5: ['ho-oh']
        },
        deoxys: {
            2: ['aipom', 'sableye'],
            3: ['baltoy', 'baltoy', 'baltoy', 'treecko'],
            4: ['deoxys'],
            5: ['jirachi']
        },
        regice: {
            2: ['staryu', 'wailmer'],
            3: ['alomomola', 'alomomola', 'alomomola', 'oshawott'],
            4: ['regice'],
            5: ['genesect']
        },
        regirock: {
            2: ['geodude', 'gligar'],
            3: ['larvitar', 'larvitar', 'larvitar', 'litten'],
            4: ['regirock'],
            5: ['genesect']
        },
        registeel: {
            2: ['aron', 'skarmory'],
            3: ['porygon', 'porygon', 'porygon', 'torchic'],
            4: ['registeel'],
            5: ['genesect']
        },
        groudon: {
            2: ['cranidos', 'shieldon', 'tyrunt'],
            3: ['aerodactyl', 'aerodactyl', 'aerodactyl', 'charmander'],
            4: ['groudon'],
            5: ['rayquaza']
        },
        kyogre: {
            2: ['omanyte', 'tirtouga', 'amaura'],
            3: ['aerodactyl', 'aerodactyl', 'aerodactyl', 'totodile'],
            4: ['kyogre'],
            5: ['rayquaza']
        },
        celebi: {
            2: ['slakoth', 'jynx'],
            3: ['carvanha', 'carvanha', 'carvanha', 'snivy'],
            4: ['celebi'],
            5: ['kyurem']
        },
        starter: {
            3: ['bulbasaur', 'charmander', 'squirtle', 'rowlet', 'litten', 'cyndaquil', 'totodile', 'treecko', 'torchic', 'mudkip', 'turtwig', 'piplup', 'snivy', 'tepig', 'oshawott', 'chimchar', 'chespin', 'popplio', 'chikorita', 'fennekin', 'froakie']
        },
        eevee: {
            3: ['eevee']
        },
        league: {
            3: ['eevee', 'eevee', 'meowth', 'lunatone', 'solrock', 'corsola']
        },
        gymPack1: {
            1: ['pidgey', 'spearow', 'bunnelby'],
            2: ['magikarp', 'psyduck'],
            3: ['snorlax']
        },
        gymPack2: {
            1: ['hoppip', 'caterpie', 'weedle'],
            2: ['oddish', 'exeggcute'],
            3: ['heracross']
        },
        gymPack3: {
            1: ['fletchling', 'litleo', 'ponyta'],
            2: ['slugma', 'vulpix'],
            3: ['magmar']
        },
        gymPack4: {
            1: ['horsea', 'stunfisk', 'wishiwashi'],
            2: ['shellder', 'feebas'],
            3: ['lapras']
        },
        gymPack5: {
            1: ['magnemite', 'helioptile', 'dedenne'],
            2: ['farfetchd', 'electrike'],
            3: ['pichu']
        },
        gymPack6: {
            1: ['machop', 'cubone', 'maractus'],
            2: ['onix', 'croagunk'],
            3: ['riolu']
        },
        gymPack7: {
            1: ['gastly', 'solosis', 'paras'],
            2: ['slowpoke', 'morelull'],
            3: ['mimikyu']
        },
        gymPack8: {
            1: ['kricketot'],
            2: ['rhyhorn', 'natu', 'heatmor', 'shuckle'],
            3: ['dratini']
        },
        gymPack9: {
            1: ['teddiursa'],
            2: ['pineco', 'blitzle', 'phanpy', 'pinsir'],
            3: ['tropius']
        },
        gymPack10: {
            1: ['wooper'],
            2: ['salandit', 'poliwag', 'ducklett', 'misdreavus'],
            3: ['growlithe']
        },
        gymPack11: {
            1: ['carbink'],
            2: ['shroomish', 'happiny', 'azurill', 'cleffa'],
            3: ['ralts']
        }
    },
    'src/conf/staticData/gameConstants.json': {
        DURATION_TIMER: 1e4,
        DURATION_ROPE: 1e4,
        ABILITY_COUNT: 5,
        MIN_IV: 0,
        MAX_IV: 31,
        MAX_COIN: 9999999,
        MAX_CANDY: 9999999,
        INITIAL_RATING: 1150,
        INITIAL_COINS: 200,
        INITIAL_CANDIES: 100,
        COINS_PER_STAR: 10,
        MAX_T2_IN_TEAM: 2,
        MAX_T3_IN_TEAM: 2,
        CHALLENGE_POINTS_PER_STAR: 5,
        CHALLENGE_LIVE_BONUS: 20,
        CHALLENGE_QUICK_MATCH_BONUS: 5,
        TUTORIAL_FIRST_MEDAL: 'eevee',
        DAILY_EVENTS_EPOCH: '2019-09-29T21:00:00Z',
        CHALLENGE_EPOCH: '2019-09-29T21:00:00Z',
        MAX_RATING: 6e3,
        FREE_PACK_DURATION: 8,
        STAR_PACK_REQUIREMENT: 20,
        DAILY_BATTLE_COIN: 500,
        SOCIAL_GIFT_COUNT: 5,
        AD_MEDAL: {
            refill: 120,
            max: 5
        },
        AD_HOUSE_DURATION: 5,
        REFERRAL_BONUS_TTL: 24,
        REFERRAL_BONUS: {
            reward: 'coins',
            amount: 10
        },
        RECRUITING_REWARD_TTL: 24,
        RECRUITING_REWARD: {
            reward: 'silverPack',
            amount: 1
        },
        SOCIAL_GIFT_MESSAGE_TTL: 24,
        MEDAL_PER_GYM_PACK: 5,
        INCENTIVISED_CHATBOT_REWARD: {
            reward: 'candy',
            amount: 200
        },
        WEEKLY_EVENTS_EPOCH: '2020-04-01T21:00:00Z',
        WEEKLY_EVENTS_EPOCH_DEV: '2020-03-25T21:00:00Z',
        RAID_MAX_MEMBERS: 6,
        RAID_MAX_STAGE: 15,
        RAID_SOLO_STAGE: 3,
        RAID_PASS: {
            refill: 90,
            max: 6
        },
        RAID_BOSS_REVIVE: 1,
        RAID_REWARD_TTL: 168,
        RAID_DURATION: 162,
        RAID_COINS_PER_STAR: 5,
        RAID_MIN_DISPLAYED_SCORE: .125,
        RAID_JOIN_COOLDOWN: 24,
        SHINY_EXCHANGE_REFRESH_TIME: 240
    },
    'src/conf/staticData/gyms.json': {
        1: {
            type: 'normal',
            minRating: 1100,
            teamSlots: 1,
            tier: {
                2: 1,
                3: 0
            },
            legendary: 0,
            maxEvolution: 3
        },
        2: {
            type: 'grass',
            minRating: 1200,
            teamSlots: 2,
            tier: {
                2: 2,
                3: 0
            },
            legendary: 0,
            maxEvolution: 3
        },
        3: {
            type: 'fire',
            minRating: 1400,
            teamSlots: 3,
            tier: {
                2: 2,
                3: 1
            },
            legendary: 0,
            maxEvolution: 3
        },
        4: {
            type: 'water',
            minRating: 1600,
            teamSlots: 4,
            tier: {
                2: 2,
                3: 2
            },
            legendary: 0,
            maxEvolution: 3
        },
        5: {
            type: 'electric',
            minRating: 1800,
            teamSlots: 5,
            tier: {
                2: 2,
                3: 2
            },
            legendary: 1,
            maxEvolution: 3
        },
        6: {
            type: 'fighting',
            minRating: 2200,
            teamSlots: 5,
            tier: {
                2: 2,
                3: 2
            },
            legendary: 2,
            maxEvolution: 3
        },
        7: {
            type: 'psychic',
            minRating: 2600,
            teamSlots: 5,
            tier: {
                2: 2,
                3: 2
            },
            legendary: 2,
            maxEvolution: 3
        },
        8: {
            type: 'dragon',
            minRating: 3e3,
            teamSlots: 5,
            tier: {
                2: 2,
                3: 2
            },
            legendary: 2,
            maxEvolution: 3
        },
        9: {
            type: 'jungle',
            minRating: 3600,
            teamSlots: 5,
            tier: {
                2: 2,
                3: 2
            },
            legendary: 2,
            maxEvolution: 3
        },
        10: {
            type: 'mountain',
            minRating: 4200,
            teamSlots: 5,
            tier: {
                2: 2,
                3: 2
            },
            legendary: 2,
            maxEvolution: 3
        },
        11: {
            type: 'fairy',
            minRating: 5e3,
            teamSlots: 5,
            tier: {
                2: 2,
                3: 2
            },
            legendary: 2,
            maxEvolution: 3
        }
    },
    'src/conf/staticData/initialTeams.json': {
        fire: [{
            pokemonId: 'hoppip',
            abilityIdx: 0
        }, {
            pokemonId: 'psyduck',
            abilityIdx: 0
        }, {
            pokemonId: 'metapod',
            abilityIdx: 0
        }, {
            pokemonId: 'pidgey',
            abilityIdx: 0
        }, {
            pokemonId: 'spearow',
            abilityIdx: 0
        }],
        grass: [{
            pokemonId: 'horsea',
            abilityIdx: 0
        }, {
            pokemonId: 'psyduck',
            abilityIdx: 0
        }, {
            pokemonId: 'metapod',
            abilityIdx: 0
        }, {
            pokemonId: 'pidgey',
            abilityIdx: 0
        }, {
            pokemonId: 'spearow',
            abilityIdx: 0
        }],
        water: [{
            pokemonId: 'fletchling',
            abilityIdx: 0
        }, {
            pokemonId: 'psyduck',
            abilityIdx: 0
        }, {
            pokemonId: 'metapod',
            abilityIdx: 0
        }, {
            pokemonId: 'pidgey',
            abilityIdx: 0
        }, {
            pokemonId: 'spearow',
            abilityIdx: 0
        }]
    },
    'src/conf/staticData/leaderboardRewards.json': {
        global: [{
            from: 0,
            reward: 'leagueGoldPack',
            amount: 1
        }, {
            from: 10,
            reward: 'leagueSilverPack',
            amount: 1
        }, {
            from: 50,
            reward: 'leagueBronzePack',
            amount: 1
        }],
        region: [{
            from: 0,
            reward: 'leagueSilverPack',
            amount: 1
        }, {
            from: 50,
            reward: 'leagueBronzePack',
            amount: 1
        }]
    },
    'src/conf/staticData/medalPacks.json': {
        freePack: {
            price: 0,
            gacha: 'starMedal'
        },
        adMedal: {
            price: 0,
            gacha: 'gymMedal'
        },
        gymPack: {
            price: 200,
            currency: 'coin'
        },
        silverPack: {
            price: 600,
            currency: 'candy'
        }
    },
    'src/conf/staticData/medalPrices.json': {
        1: {
            1: 10,
            2: 20,
            3: 40
        },
        2: {
            1: 20,
            2: 40,
            3: 80
        },
        3: {
            1: 40,
            2: 80,
            3: 160
        },
        4: {
            1: 80,
            2: 160,
            3: 320
        },
        5: {
            1: 160,
            2: 320,
            3: 640
        }
    },
    'src/conf/staticData/pokemon.json': {
        bulbasaur: {
            id: 'bulbasaur',
            index: 0,
            number: 1,
            sortNumber: 1,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'bulbasaur',
            ability1: 'vineWhip',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        ivysaur: {
            id: 'ivysaur',
            index: 1,
            number: 2,
            sortNumber: 2,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'bulbasaur',
            family: 'bulbasaur',
            ability1: 'powerWhip',
            ability2: 'powerWhip',
            ability3: 'leechSeed',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        venusaur: {
            id: 'venusaur',
            index: 2,
            number: 3,
            sortNumber: 3,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 1150,
            evoStage: 3,
            evolvesFrom: 'ivysaur',
            family: 'bulbasaur',
            ability1: 'solarBeam',
            ability2: 'solarBeam',
            ability3: 'leechSeed',
            ability4: 'solarBeam',
            ability5: 'leechSeed',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        charmander: {
            id: 'charmander',
            index: 3,
            number: 4,
            sortNumber: 4,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'charmander',
            ability1: 'ember',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        charmeleon: {
            id: 'charmeleon',
            index: 4,
            number: 5,
            sortNumber: 5,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 750,
            evoStage: 2,
            evolvesFrom: 'charmander',
            family: 'charmander',
            ability1: 'fireSpin',
            ability2: 'fireSpin',
            ability3: 'fireSpin',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        charizard: {
            id: 'charizard',
            index: 5,
            number: 6,
            sortNumber: 6,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 1250,
            evoStage: 3,
            evolvesFrom: 'charmeleon',
            family: 'charmander',
            ability1: 'fireSpin',
            ability2: 'fireSpin',
            ability3: 'fireSpin',
            ability4: 'fireSpin',
            ability5: 'fireSpin',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        squirtle: {
            id: 'squirtle',
            index: 6,
            number: 7,
            sortNumber: 7,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'squirtle',
            ability1: 'bubble',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        wartortle: {
            id: 'wartortle',
            index: 7,
            number: 8,
            sortNumber: 8,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'squirtle',
            family: 'squirtle',
            ability1: 'bubbleBeam',
            ability2: 'bubbleBeam',
            ability3: 'rapidSpin',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        blastoise: {
            id: 'blastoise',
            index: 8,
            number: 9,
            sortNumber: 9,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 1150,
            evoStage: 3,
            evolvesFrom: 'wartortle',
            family: 'squirtle',
            ability1: 'hydroPump',
            ability2: 'hydroPump',
            ability3: 'rapidSpin',
            ability4: 'hydroPump',
            ability5: 'rapidSpin',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        caterpie: {
            id: 'caterpie',
            index: 9,
            number: 10,
            sortNumber: 10,
            tier: 1,
            rarity: 1,
            gym: 2,
            type: 'grass',
            cp: 150,
            evoStage: 1,
            evolvesFrom: '',
            family: 'caterpie',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        metapod: {
            id: 'metapod',
            index: 10,
            number: 11,
            sortNumber: 11,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'grass',
            cp: 250,
            evoStage: 2,
            evolvesFrom: 'caterpie',
            family: 'caterpie',
            ability1: 'harden',
            ability2: 'harden',
            ability3: 'harden',
            ability4: 'harden',
            ability5: 'harden',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        butterfree: {
            id: 'butterfree',
            index: 11,
            number: 12,
            sortNumber: 12,
            tier: 2,
            rarity: 1,
            gym: 0,
            type: 'grass',
            cp: 550,
            evoStage: 3,
            evolvesFrom: 'metapod',
            family: 'caterpie',
            ability1: 'sleepPowder',
            ability2: 'sleepPowder',
            ability3: 'sleepPowder',
            ability4: 'sleepPowder',
            ability5: 'sleepPowder',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        weedle: {
            id: 'weedle',
            index: 12,
            number: 13,
            sortNumber: 13,
            tier: 1,
            rarity: 1,
            gym: 2,
            type: 'grass',
            cp: 150,
            evoStage: 1,
            evolvesFrom: '',
            family: 'weedle',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        kakuna: {
            id: 'kakuna',
            index: 13,
            number: 14,
            sortNumber: 14,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'grass',
            cp: 250,
            evoStage: 2,
            evolvesFrom: 'weedle',
            family: 'weedle',
            ability1: 'harden',
            ability2: 'harden',
            ability3: 'harden',
            ability4: 'harden',
            ability5: 'harden',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        beedrill: {
            id: 'beedrill',
            index: 14,
            number: 15,
            sortNumber: 15,
            tier: 2,
            rarity: 1,
            gym: 0,
            type: 'grass',
            cp: 550,
            evoStage: 3,
            evolvesFrom: 'kakuna',
            family: 'weedle',
            ability1: 'agility',
            ability2: 'agility',
            ability3: 'agility',
            ability4: 'agility',
            ability5: 'agility',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pidgey: {
            id: 'pidgey',
            index: 15,
            number: 16,
            sortNumber: 16,
            tier: 1,
            rarity: 1,
            gym: 1,
            type: 'normal',
            cp: 150,
            evoStage: 1,
            evolvesFrom: '',
            family: 'pidgey',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pidgeotto: {
            id: 'pidgeotto',
            index: 16,
            number: 17,
            sortNumber: 17,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'normal',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'pidgey',
            family: 'pidgey',
            ability1: 'gust',
            ability2: 'gust',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pidgeot: {
            id: 'pidgeot',
            index: 17,
            number: 18,
            sortNumber: 18,
            tier: 2,
            rarity: 1,
            gym: 0,
            type: 'normal',
            cp: 650,
            evoStage: 3,
            evolvesFrom: 'pidgeotto',
            family: 'pidgey',
            ability1: 'gust',
            ability2: 'gust',
            ability3: 'gust',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        spearow: {
            id: 'spearow',
            index: 18,
            number: 21,
            sortNumber: 19,
            tier: 1,
            rarity: 1,
            gym: 1,
            type: 'normal',
            cp: 150,
            evoStage: 1,
            evolvesFrom: '',
            family: 'spearow',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        fearow: {
            id: 'fearow',
            index: 19,
            number: 22,
            sortNumber: 20,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'normal',
            cp: 200,
            evoStage: 2,
            evolvesFrom: 'spearow',
            family: 'spearow',
            ability1: 'skyAttack1',
            ability2: 'skyAttack1',
            ability3: 'skyAttack1',
            ability4: 'skyAttack1',
            ability5: 'skyAttack1',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pikachu: {
            id: 'pikachu',
            index: 20,
            number: 25,
            sortNumber: 22,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'electric',
            cp: 300,
            evoStage: 1,
            evolvesFrom: 'pichu',
            family: 'pikachu',
            ability1: 'voltTackle1',
            ability2: 'voltTackle1',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        raichu: {
            id: 'raichu',
            index: 21,
            number: 26,
            sortNumber: 23,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'electric',
            cp: 550,
            evoStage: 2,
            evolvesFrom: 'pikachu',
            family: 'pikachu',
            ability1: 'voltTackle2',
            ability2: 'voltTackle2',
            ability3: 'voltTackle2',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        vulpix: {
            id: 'vulpix',
            index: 22,
            number: 37,
            sortNumber: 27,
            tier: 1,
            rarity: 2,
            gym: 3,
            type: 'fire',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'vulpix',
            ability1: 'ember',
            ability2: 'ember',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        ninetales: {
            id: 'ninetales',
            index: 23,
            number: 38,
            sortNumber: 28,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'fire',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'vulpix',
            family: 'vulpix',
            ability1: 'willOWisp',
            ability2: 'willOWisp',
            ability3: 'willOWisp',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        oddish: {
            id: 'oddish',
            index: 24,
            number: 43,
            sortNumber: 32,
            tier: 1,
            rarity: 2,
            gym: 2,
            type: 'grass',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'oddish',
            ability1: 'razorLeaf',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        gloom: {
            id: 'gloom',
            index: 25,
            number: 44,
            sortNumber: 33,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'grass',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'oddish',
            family: 'oddish',
            ability1: 'razorLeaf',
            ability2: 'acid',
            ability3: 'razorLeaf',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        vileplume: {
            id: 'vileplume',
            index: 26,
            number: 45,
            sortNumber: 34,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'grass',
            cp: 500,
            evoStage: 3,
            evolvesFrom: 'gloom',
            family: 'oddish',
            ability1: 'petalDance2',
            ability2: 'petalDance2',
            ability3: 'petalDance2',
            ability4: 'petalDance2',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        paras: {
            id: 'paras',
            index: 27,
            number: 46,
            sortNumber: 36,
            tier: 1,
            rarity: 1,
            gym: 7,
            type: 'grass',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'paras',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        parasect: {
            id: 'parasect',
            index: 28,
            number: 47,
            sortNumber: 37,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'grass',
            cp: 350,
            evoStage: 2,
            evolvesFrom: 'paras',
            family: 'paras',
            ability1: 'spore',
            ability2: 'spore',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        meowth: {
            id: 'meowth',
            index: 29,
            number: 52,
            sortNumber: 38,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'meowth',
            ability1: 'payDay1',
            ability2: 'payDay1',
            ability3: 'payDay1',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        psyduck: {
            id: 'psyduck',
            index: 30,
            number: 54,
            sortNumber: 40,
            tier: 1,
            rarity: 2,
            gym: 1,
            type: 'water',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'psyduck',
            ability1: 'foresight',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        golduck: {
            id: 'golduck',
            index: 31,
            number: 55,
            sortNumber: 41,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'psyduck',
            family: 'psyduck',
            ability1: 'foresight',
            ability2: 'confusion',
            ability3: 'foresight',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        machop: {
            id: 'machop',
            index: 32,
            number: 66,
            sortNumber: 48,
            tier: 1,
            rarity: 1,
            gym: 6,
            type: 'fighting',
            cp: 150,
            evoStage: 1,
            evolvesFrom: '',
            family: 'machop',
            ability1: 'lowSweep',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        machoke: {
            id: 'machoke',
            index: 33,
            number: 67,
            sortNumber: 49,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'fighting',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'machop',
            family: 'machop',
            ability1: 'crossChop',
            ability2: 'crossChop',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        machamp: {
            id: 'machamp',
            index: 34,
            number: 68,
            sortNumber: 50,
            tier: 3,
            rarity: 1,
            gym: 0,
            type: 'fighting',
            cp: 1100,
            evoStage: 3,
            evolvesFrom: 'machoke',
            family: 'machop',
            ability1: 'crossChop',
            ability2: 'crossChop',
            ability3: 'crossChop',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        ponyta: {
            id: 'ponyta',
            index: 35,
            number: 77,
            sortNumber: 54,
            tier: 1,
            rarity: 1,
            gym: 3,
            type: 'fire',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'ponyta',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        rapidash: {
            id: 'rapidash',
            index: 36,
            number: 78,
            sortNumber: 55,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'fire',
            cp: 350,
            evoStage: 2,
            evolvesFrom: 'ponyta',
            family: 'ponyta',
            ability1: 'quickAttack',
            ability2: 'quickAttack',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        slowpoke: {
            id: 'slowpoke',
            index: 37,
            number: 79,
            sortNumber: 56,
            tier: 1,
            rarity: 2,
            gym: 7,
            type: 'psychic',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'slowpoke',
            ability1: 'confusion',
            ability2: 'confusion',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        slowbro: {
            id: 'slowbro',
            index: 38,
            number: 80,
            sortNumber: 57,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'slowpoke',
            family: 'slowpoke',
            ability1: 'psychic',
            ability2: 'psychic',
            ability3: 'psychic',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        magnemite: {
            id: 'magnemite',
            index: 39,
            number: 81,
            sortNumber: 59,
            tier: 1,
            rarity: 1,
            gym: 5,
            type: 'electric',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'magnemite',
            ability1: 'thunderShock',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        magneton: {
            id: 'magneton',
            index: 40,
            number: 82,
            sortNumber: 60,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'electric',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'magnemite',
            family: 'magnemite',
            ability1: 'thunderbolt',
            ability2: 'thunderbolt',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        farfetchd: {
            id: 'farfetchd',
            index: 41,
            number: 83,
            sortNumber: 62,
            tier: 1,
            rarity: 2,
            gym: 5,
            type: 'normal',
            cp: 400,
            evoStage: 1,
            evolvesFrom: '',
            family: 'farfetchd',
            ability1: 'batonPass',
            ability2: 'batonPass',
            ability3: 'batonPass',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        shellder: {
            id: 'shellder',
            index: 42,
            number: 90,
            sortNumber: 65,
            tier: 1,
            rarity: 2,
            gym: 4,
            type: 'water',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'shellder',
            ability1: 'razorShell',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        cloyster: {
            id: 'cloyster',
            index: 43,
            number: 91,
            sortNumber: 66,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 600,
            evoStage: 2,
            evolvesFrom: 'shellder',
            family: 'shellder',
            ability1: 'spikeCannon',
            ability2: 'spikes',
            ability3: 'spikeCannon',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        gastly: {
            id: 'gastly',
            index: 44,
            number: 92,
            sortNumber: 67,
            tier: 1,
            rarity: 1,
            gym: 7,
            type: 'psychic',
            cp: 150,
            evoStage: 1,
            evolvesFrom: '',
            family: 'gastly',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        haunter: {
            id: 'haunter',
            index: 45,
            number: 93,
            sortNumber: 68,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'psychic',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'gastly',
            family: 'gastly',
            ability1: 'dreamEater',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        gengar: {
            id: 'gengar',
            index: 46,
            number: 94,
            sortNumber: 69,
            tier: 3,
            rarity: 1,
            gym: 0,
            type: 'psychic',
            cp: 1100,
            evoStage: 3,
            evolvesFrom: 'haunter',
            family: 'gastly',
            ability1: 'dreamEater',
            ability2: 'dreamEater',
            ability3: 'haze',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        onix: {
            id: 'onix',
            index: 47,
            number: 95,
            sortNumber: 70,
            tier: 2,
            rarity: 2,
            gym: 6,
            type: 'fighting',
            cp: 550,
            evoStage: 1,
            evolvesFrom: '',
            family: 'onix',
            ability1: 'stealthRock',
            ability2: 'earthquake',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        exeggcute: {
            id: 'exeggcute',
            index: 48,
            number: 102,
            sortNumber: 72,
            tier: 1,
            rarity: 2,
            gym: 2,
            type: 'grass',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'exeggcute',
            ability1: 'bulletSeed',
            ability2: 'bulletSeed',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        exeggutor: {
            id: 'exeggutor',
            index: 49,
            number: 103,
            sortNumber: 73,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'grass',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'exeggcute',
            family: 'exeggcute',
            ability1: 'seedBomb',
            ability2: 'seedBomb',
            ability3: 'seedBomb',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        cubone: {
            id: 'cubone',
            index: 50,
            number: 104,
            sortNumber: 74,
            tier: 1,
            rarity: 1,
            gym: 6,
            type: 'fighting',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'cubone',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        marowak: {
            id: 'marowak',
            index: 51,
            number: 105,
            sortNumber: 75,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'fighting',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'cubone',
            family: 'cubone',
            ability1: 'bonemerang',
            ability2: 'bonemerang',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        rhyhorn: {
            id: 'rhyhorn',
            index: 52,
            number: 111,
            sortNumber: 76,
            tier: 1,
            rarity: 2,
            gym: 8,
            type: 'fighting',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'rhyhorn',
            ability1: 'takeDown1',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        rhydon: {
            id: 'rhydon',
            index: 53,
            number: 112,
            sortNumber: 77,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'fighting',
            cp: 350,
            evoStage: 2,
            evolvesFrom: 'rhyhorn',
            family: 'rhyhorn',
            ability1: 'takeDown1',
            ability2: 'takeDown1',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        horsea: {
            id: 'horsea',
            index: 54,
            number: 116,
            sortNumber: 81,
            tier: 1,
            rarity: 1,
            gym: 4,
            type: 'water',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'horsea',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        seadra: {
            id: 'seadra',
            index: 55,
            number: 117,
            sortNumber: 82,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'water',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'horsea',
            family: 'horsea',
            ability1: 'bubble',
            ability2: 'bubble',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        jynx: {
            id: 'jynx',
            index: 56,
            number: 124,
            sortNumber: 88,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 400,
            evoStage: 1,
            evolvesFrom: '',
            family: 'jynx',
            ability1: 'icePunch',
            ability2: 'lovelyKiss',
            ability3: 'icePunch',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        magmar: {
            id: 'magmar',
            index: 57,
            number: 126,
            sortNumber: 92,
            tier: 1,
            rarity: 3,
            gym: 3,
            type: 'fire',
            cp: 400,
            evoStage: 1,
            evolvesFrom: '',
            family: 'magmar',
            ability1: 'drought',
            ability2: 'drought',
            ability3: 'drought',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pinsir: {
            id: 'pinsir',
            index: 58,
            number: 127,
            sortNumber: 93,
            tier: 1,
            rarity: 2,
            gym: 9,
            type: 'grass',
            cp: 350,
            evoStage: 1,
            evolvesFrom: '',
            family: 'pinsir',
            ability1: 'guillotine1',
            ability2: 'guillotine1',
            ability3: 'guillotine1',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        magikarp: {
            id: 'magikarp',
            index: 59,
            number: 129,
            sortNumber: 94,
            tier: 1,
            rarity: 2,
            gym: 1,
            type: 'water',
            cp: 50,
            evoStage: 1,
            evolvesFrom: '',
            family: 'magikarp',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        gyarados: {
            id: 'gyarados',
            index: 60,
            number: 130,
            sortNumber: 95,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 500,
            evoStage: 2,
            evolvesFrom: 'magikarp',
            family: 'magikarp',
            ability1: 'outrage2',
            ability2: 'outrage2',
            ability3: 'outrage2',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        lapras: {
            id: 'lapras',
            index: 61,
            number: 131,
            sortNumber: 96,
            tier: 2,
            rarity: 3,
            gym: 4,
            type: 'water',
            cp: 650,
            evoStage: 1,
            evolvesFrom: '',
            family: 'lapras',
            ability1: 'rainDance',
            ability2: 'iceBeam',
            ability3: 'iceBeam',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        eevee: {
            id: 'eevee',
            index: 62,
            number: 133,
            sortNumber: 97,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'eevee',
            ability1: 'lastResort1',
            ability2: 'lastResort1',
            ability3: 'lastResort1',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        vaporeon: {
            id: 'vaporeon',
            index: 63,
            number: 134,
            sortNumber: 98,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'eevee',
            family: 'eevee',
            ability1: 'acidArmor',
            ability2: 'acidArmor',
            ability3: 'acidArmor',
            ability4: 'acidArmor',
            ability5: 'acidArmor',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        jolteon: {
            id: 'jolteon',
            index: 64,
            number: 135,
            sortNumber: 99,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'electric',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'eevee',
            family: 'eevee',
            ability1: 'quickAttack',
            ability2: 'quickAttack',
            ability3: 'quickAttack',
            ability4: 'quickAttack',
            ability5: 'quickAttack',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        flareon: {
            id: 'flareon',
            index: 65,
            number: 136,
            sortNumber: 100,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'eevee',
            family: 'eevee',
            ability1: 'fireBlast',
            ability2: 'fireBlast',
            ability3: 'fireBlast',
            ability4: 'fireBlast',
            ability5: 'fireBlast',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        snorlax: {
            id: 'snorlax',
            index: 66,
            number: 143,
            sortNumber: 114,
            tier: 2,
            rarity: 3,
            gym: 1,
            type: 'normal',
            cp: 700,
            evoStage: 1,
            evolvesFrom: '',
            family: 'snorlax',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        articuno: {
            id: 'articuno',
            index: 67,
            number: 144,
            sortNumber: 115,
            tier: 3,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'water',
            cp: 1250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'articuno',
            ability1: 'iceBeam',
            ability2: 'iceBeam',
            ability3: 'iceBeam',
            ability4: 'iceBeam',
            ability5: 'iceBeam',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        zapdos: {
            id: 'zapdos',
            index: 68,
            number: 145,
            sortNumber: 116,
            tier: 3,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'electric',
            cp: 1200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'zapdos',
            ability1: 'thunderbolt',
            ability2: 'thunderbolt',
            ability3: 'thunderbolt',
            ability4: 'thunderbolt',
            ability5: 'thunderbolt',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        moltres: {
            id: 'moltres',
            index: 69,
            number: 146,
            sortNumber: 117,
            tier: 3,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'fire',
            cp: 650,
            evoStage: 1,
            evolvesFrom: '',
            family: 'moltres',
            ability1: 'skyAttack3',
            ability2: 'skyAttack3',
            ability3: 'skyAttack3',
            ability4: 'skyAttack3',
            ability5: 'skyAttack3',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        mewtwo: {
            id: 'mewtwo',
            index: 70,
            number: 150,
            sortNumber: 121,
            tier: 3,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'psychic',
            cp: 900,
            evoStage: 1,
            evolvesFrom: '',
            family: 'mewtwo',
            ability1: 'psystrike',
            ability2: 'psystrike',
            ability3: 'psystrike',
            ability4: 'psystrike',
            ability5: 'psystrike',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        mew: {
            id: 'mew',
            index: 71,
            number: 151,
            sortNumber: 122,
            tier: 3,
            rarity: 5,
            gym: 0,
            legendary: !0,
            type: 'psychic',
            cp: 1100,
            evoStage: 1,
            evolvesFrom: '',
            family: 'mew',
            ability1: 'ancientPower',
            ability2: 'ancientPower',
            ability3: 'ancientPower',
            ability4: 'ancientPower',
            ability5: 'ancientPower',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pichu: {
            id: 'pichu',
            index: 72,
            number: 172,
            sortNumber: 21,
            tier: 1,
            rarity: 3,
            gym: 5,
            type: 'electric',
            cp: 150,
            evoStage: 0,
            evolvesFrom: '',
            family: 'pikachu',
            ability1: 'thunderShock',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        natu: {
            id: 'natu',
            index: 73,
            number: 177,
            sortNumber: 137,
            tier: 1,
            rarity: 2,
            gym: 8,
            type: 'psychic',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'natu',
            ability1: 'miracleEye',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        xatu: {
            id: 'xatu',
            index: 74,
            number: 178,
            sortNumber: 138,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'natu',
            family: 'natu',
            ability1: 'miracleEye',
            ability2: 'psyshock',
            ability3: 'miracleEye',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        bellossom: {
            id: 'bellossom',
            index: 75,
            number: 182,
            sortNumber: 35,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'grass',
            cp: 500,
            evoStage: 3,
            evolvesFrom: 'gloom',
            family: 'oddish',
            ability1: 'sunnyDay',
            ability2: 'sunnyDay',
            ability3: 'sunnyDay',
            ability4: 'sunnyDay',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        hoppip: {
            id: 'hoppip',
            index: 76,
            number: 187,
            sortNumber: 145,
            tier: 1,
            rarity: 1,
            gym: 2,
            type: 'grass',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'hoppip',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        skiploom: {
            id: 'skiploom',
            index: 77,
            number: 188,
            sortNumber: 146,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'grass',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'hoppip',
            family: 'hoppip',
            ability1: 'bulletSeed',
            ability2: 'bulletSeed',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        jumpluff: {
            id: 'jumpluff',
            index: 78,
            number: 189,
            sortNumber: 147,
            tier: 2,
            rarity: 1,
            gym: 0,
            type: 'grass',
            cp: 650,
            evoStage: 3,
            evolvesFrom: 'skiploom',
            family: 'hoppip',
            ability1: 'bulletSeed',
            ability2: 'bulletSeed',
            ability3: 'bulletSeed',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        wobbuffet: {
            id: 'wobbuffet',
            index: 79,
            number: 202,
            sortNumber: 154,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 600,
            evoStage: 1,
            evolvesFrom: '',
            family: 'wobbuffet',
            ability1: 'mirrorCoat',
            ability2: 'counter',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        shuckle: {
            id: 'shuckle',
            index: 80,
            number: 213,
            sortNumber: 159,
            tier: 1,
            rarity: 2,
            gym: 8,
            type: 'grass',
            cp: 350,
            evoStage: 1,
            evolvesFrom: '',
            family: 'shuckle',
            ability1: 'stickyWeb',
            ability2: 'stickyWeb',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        heracross: {
            id: 'heracross',
            index: 81,
            number: 214,
            sortNumber: 160,
            tier: 2,
            rarity: 3,
            gym: 2,
            type: 'grass',
            cp: 650,
            evoStage: 1,
            evolvesFrom: '',
            family: 'heracross',
            ability1: 'megahorn',
            ability2: 'closeCombat',
            ability3: 'closeCombat',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        slugma: {
            id: 'slugma',
            index: 82,
            number: 218,
            sortNumber: 165,
            tier: 1,
            rarity: 2,
            gym: 3,
            type: 'fire',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'slugma',
            ability1: 'yawn',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        magcargo: {
            id: 'magcargo',
            index: 83,
            number: 219,
            sortNumber: 166,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'fire',
            cp: 600,
            evoStage: 2,
            evolvesFrom: 'slugma',
            family: 'slugma',
            ability1: 'yawn',
            ability2: 'lavaPlume',
            ability3: 'yawn',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        corsola: {
            id: 'corsola',
            index: 84,
            number: 222,
            sortNumber: 167,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 350,
            evoStage: 1,
            evolvesFrom: '',
            family: 'corsola',
            ability1: 'ancientPower',
            ability2: 'ancientPower',
            ability3: 'ancientPower',
            ability4: 'ancientPower',
            ability5: 'ancientPower',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        kingdra: {
            id: 'kingdra',
            index: 85,
            number: 230,
            sortNumber: 83,
            tier: 2,
            rarity: 1,
            gym: 0,
            type: 'water',
            cp: 650,
            evoStage: 3,
            evolvesFrom: 'seadra',
            family: 'horsea',
            ability1: 'bubble',
            ability2: 'bubble',
            ability3: 'bubble',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        phanpy: {
            id: 'phanpy',
            index: 86,
            number: 231,
            sortNumber: 172,
            tier: 1,
            rarity: 2,
            gym: 9,
            type: 'fighting',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'phanpy',
            ability1: 'bulldoze',
            ability2: 'bulldoze',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        donphan: {
            id: 'donphan',
            index: 87,
            number: 232,
            sortNumber: 173,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'fighting',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'phanpy',
            family: 'phanpy',
            ability1: 'bulldoze',
            ability2: 'bulldoze',
            ability3: 'bulldoze',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        lugia: {
            id: 'lugia',
            index: 88,
            number: 249,
            sortNumber: 180,
            tier: 3,
            rarity: 5,
            gym: 0,
            legendary: !0,
            type: 'normal',
            cp: 1250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'lugia',
            ability1: 'pressure',
            ability2: 'pressure',
            ability3: 'pressure',
            ability4: 'pressure',
            ability5: 'pressure',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        'ho-oh': {
            id: 'ho-oh',
            index: 89,
            number: 250,
            sortNumber: 181,
            tier: 3,
            rarity: 5,
            gym: 0,
            legendary: !0,
            type: 'fire',
            cp: 1200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'ho-oh',
            ability1: 'sacredFire',
            ability2: 'sacredFire',
            ability3: 'sacredFire',
            ability4: 'sacredFire',
            ability5: 'sacredFire',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        celebi: {
            id: 'celebi',
            index: 90,
            number: 251,
            sortNumber: 182,
            tier: 2,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'grass',
            cp: 650,
            evoStage: 1,
            evolvesFrom: '',
            family: 'celebi',
            ability1: 'healBell',
            ability2: 'healBell',
            ability3: 'healBell',
            ability4: 'healBell',
            ability5: 'healBell',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        electrike: {
            id: 'electrike',
            index: 91,
            number: 309,
            sortNumber: 212,
            tier: 1,
            rarity: 2,
            gym: 5,
            type: 'electric',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'electrike',
            ability1: 'thunderShock',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        manectric: {
            id: 'manectric',
            index: 92,
            number: 310,
            sortNumber: 213,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'electric',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'electrike',
            family: 'electrike',
            ability1: 'thunderShock',
            ability2: 'odorSleuth',
            ability3: 'thunderShock',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        wailmer: {
            id: 'wailmer',
            index: 93,
            number: 320,
            sortNumber: 216,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'wailmer',
            ability1: 'waterGun',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        wailord: {
            id: 'wailord',
            index: 94,
            number: 321,
            sortNumber: 217,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 600,
            evoStage: 2,
            evolvesFrom: 'wailmer',
            family: 'wailmer',
            ability1: 'dive',
            ability2: 'dive',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        numel: {
            id: 'numel',
            index: 95,
            number: 322,
            sortNumber: 218,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'fire',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'numel',
            ability1: 'bulldoze',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        camerupt: {
            id: 'camerupt',
            index: 96,
            number: 323,
            sortNumber: 219,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'fire',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'numel',
            family: 'numel',
            ability1: 'earthPower',
            ability2: 'earthPower',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        lunatone: {
            id: 'lunatone',
            index: 97,
            number: 337,
            sortNumber: 223,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'psychic',
            cp: 400,
            evoStage: 1,
            evolvesFrom: '',
            family: 'lunatone',
            ability1: 'moonblast',
            ability2: 'moonblast',
            ability3: 'moonblast',
            ability4: 'moonblast',
            ability5: 'moonblast',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        solrock: {
            id: 'solrock',
            index: 98,
            number: 338,
            sortNumber: 224,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fighting',
            cp: 400,
            evoStage: 1,
            evolvesFrom: '',
            family: 'solrock',
            ability1: 'solarBeam',
            ability2: 'solarBeam',
            ability3: 'solarBeam',
            ability4: 'solarBeam',
            ability5: 'solarBeam',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        feebas: {
            id: 'feebas',
            index: 99,
            number: 349,
            sortNumber: 231,
            tier: 1,
            rarity: 2,
            gym: 4,
            type: 'water',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'feebas',
            ability1: 'waterPulse',
            ability2: 'waterPulse',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        milotic: {
            id: 'milotic',
            index: 100,
            number: 350,
            sortNumber: 232,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'feebas',
            family: 'feebas',
            ability1: 'waterfall',
            ability2: 'waterfall',
            ability3: 'waterfall',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        tropius: {
            id: 'tropius',
            index: 101,
            number: 357,
            sortNumber: 236,
            tier: 2,
            rarity: 3,
            gym: 9,
            type: 'grass',
            cp: 700,
            evoStage: 1,
            evolvesFrom: '',
            family: 'tropius',
            ability1: 'synthesis',
            ability2: 'leafTornado',
            ability3: 'leafTornado',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        snorunt: {
            id: 'snorunt',
            index: 102,
            number: 361,
            sortNumber: 237,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'snorunt',
            ability1: 'icyWind',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        glalie: {
            id: 'glalie',
            index: 103,
            number: 362,
            sortNumber: 238,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'snorunt',
            family: 'snorunt',
            ability1: 'frostBreath',
            ability2: 'frostBreath',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        deoxys: {
            id: 'deoxys',
            index: 104,
            number: 386,
            sortNumber: 253,
            tier: 3,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'psychic',
            cp: 1150,
            evoStage: 1,
            evolvesFrom: '',
            family: 'deoxys',
            ability1: 'psychoBoost',
            ability2: 'psychoBoost',
            ability3: 'psychoBoost',
            ability4: 'psychoBoost',
            ability5: 'psychoBoost',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        kricketot: {
            id: 'kricketot',
            index: 105,
            number: 401,
            sortNumber: 263,
            tier: 1,
            rarity: 1,
            gym: 8,
            type: 'grass',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'kricketot',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        kricketune: {
            id: 'kricketune',
            index: 106,
            number: 402,
            sortNumber: 264,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'grass',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'kricketot',
            family: 'kricketot',
            ability1: 'xScissor',
            ability2: 'xScissor',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        riolu: {
            id: 'riolu',
            index: 107,
            number: 447,
            sortNumber: 274,
            tier: 1,
            rarity: 3,
            gym: 6,
            type: 'fighting',
            cp: 400,
            evoStage: 0,
            evolvesFrom: '',
            family: 'lucario',
            ability1: 'forcePalm',
            ability2: 'forcePalm',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        lucario: {
            id: 'lucario',
            index: 108,
            number: 448,
            sortNumber: 275,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fighting',
            cp: 700,
            evoStage: 1,
            evolvesFrom: 'riolu',
            family: 'lucario',
            ability1: 'auraSphere',
            ability2: 'auraSphere',
            ability3: 'auraSphere',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        croagunk: {
            id: 'croagunk',
            index: 109,
            number: 453,
            sortNumber: 276,
            tier: 1,
            rarity: 2,
            gym: 6,
            type: 'psychic',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'croagunk',
            ability1: 'poisonSting',
            ability2: 'poisonSting',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        toxicroak: {
            id: 'toxicroak',
            index: 110,
            number: 454,
            sortNumber: 277,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'croagunk',
            family: 'croagunk',
            ability1: 'poisonJab',
            ability2: 'poisonJab',
            ability3: 'poisonJab',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        froslass: {
            id: 'froslass',
            index: 111,
            number: 478,
            sortNumber: 239,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'snorunt',
            family: 'snorunt',
            ability1: 'hex',
            ability2: 'hex',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        blitzle: {
            id: 'blitzle',
            index: 112,
            number: 522,
            sortNumber: 287,
            tier: 1,
            rarity: 2,
            gym: 9,
            type: 'electric',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'blitzle',
            ability1: 'spark',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        zebstrika: {
            id: 'zebstrika',
            index: 113,
            number: 523,
            sortNumber: 288,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'electric',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'blitzle',
            family: 'blitzle',
            ability1: 'spark',
            ability2: 'quickAttack',
            ability3: 'spark',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        maractus: {
            id: 'maractus',
            index: 114,
            number: 556,
            sortNumber: 289,
            tier: 1,
            rarity: 1,
            gym: 6,
            type: 'grass',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'maractus',
            ability1: 'spikyShield',
            ability2: 'spikyShield',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        solosis: {
            id: 'solosis',
            index: 115,
            number: 577,
            sortNumber: 294,
            tier: 1,
            rarity: 1,
            gym: 7,
            type: 'psychic',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'solosis',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        duosion: {
            id: 'duosion',
            index: 116,
            number: 578,
            sortNumber: 295,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'psychic',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'solosis',
            family: 'solosis',
            ability1: 'psywave',
            ability2: 'psywave',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        reuniclus: {
            id: 'reuniclus',
            index: 117,
            number: 579,
            sortNumber: 296,
            tier: 2,
            rarity: 1,
            gym: 0,
            type: 'psychic',
            cp: 650,
            evoStage: 3,
            evolvesFrom: 'duosion',
            family: 'solosis',
            ability1: 'psywave',
            ability2: 'psywave',
            ability3: 'psywave',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        ducklett: {
            id: 'ducklett',
            index: 118,
            number: 580,
            sortNumber: 297,
            tier: 1,
            rarity: 2,
            gym: 10,
            type: 'water',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'ducklett',
            ability1: 'braveBird1',
            ability2: 'braveBird1',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        swanna: {
            id: 'swanna',
            index: 119,
            number: 581,
            sortNumber: 298,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 350,
            evoStage: 2,
            evolvesFrom: 'ducklett',
            family: 'ducklett',
            ability1: 'braveBird1',
            ability2: 'braveBird1',
            ability3: 'braveBird1',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        alomomola: {
            id: 'alomomola',
            index: 120,
            number: 594,
            sortNumber: 299,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 650,
            evoStage: 1,
            evolvesFrom: '',
            family: 'alomomola',
            ability1: 'aquaRing',
            ability2: 'aquaRing',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        stunfisk: {
            id: 'stunfisk',
            index: 121,
            number: 618,
            sortNumber: 300,
            tier: 1,
            rarity: 1,
            gym: 4,
            type: 'fighting',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'stunfisk',
            ability1: 'discharge',
            ability2: 'discharge',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        heatmor: {
            id: 'heatmor',
            index: 122,
            number: 631,
            sortNumber: 301,
            tier: 2,
            rarity: 2,
            gym: 8,
            type: 'fire',
            cp: 700,
            evoStage: 1,
            evolvesFrom: '',
            family: 'heatmor',
            ability1: 'lick',
            ability2: 'lick',
            ability3: 'lick',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        larvesta: {
            id: 'larvesta',
            index: 123,
            number: 636,
            sortNumber: 302,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'fire',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'larvesta',
            ability1: 'flameWheel',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        volcarona: {
            id: 'volcarona',
            index: 124,
            number: 637,
            sortNumber: 303,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'fire',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'larvesta',
            family: 'larvesta',
            ability1: 'fieryDance',
            ability2: 'absorb',
            ability3: 'fieryDance',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        kyurem: {
            id: 'kyurem',
            index: 125,
            number: 646,
            sortNumber: 304,
            tier: 3,
            rarity: 5,
            gym: 0,
            legendary: !0,
            type: 'water',
            cp: 1200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'kyurem',
            ability1: 'glaciate',
            ability2: 'glaciate',
            ability3: 'glaciate',
            ability4: 'glaciate',
            ability5: 'glaciate',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        genesect: {
            id: 'genesect',
            index: 126,
            number: 649,
            sortNumber: 305,
            tier: 3,
            rarity: 5,
            gym: 0,
            legendary: !0,
            type: 'grass',
            cp: 1200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'genesect',
            ability1: 'technoBlast',
            ability2: 'technoBlast',
            ability3: 'technoBlast',
            ability4: 'technoBlast',
            ability5: 'technoBlast',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        chespin: {
            id: 'chespin',
            index: 127,
            number: 650,
            sortNumber: 306,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'chespin',
            ability1: 'vineWhip',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        quilladin: {
            id: 'quilladin',
            index: 128,
            number: 651,
            sortNumber: 307,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 550,
            evoStage: 2,
            evolvesFrom: 'chespin',
            family: 'chespin',
            ability1: 'takeDown2',
            ability2: 'takeDown2',
            ability3: '',
            ability4: 'takeDown2',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        chesnaught: {
            id: 'chesnaught',
            index: 129,
            number: 652,
            sortNumber: 308,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 850,
            evoStage: 3,
            evolvesFrom: 'quilladin',
            family: 'chespin',
            ability1: 'woodHammer3',
            ability2: 'woodHammer3',
            ability3: 'woodHammer3',
            ability4: 'woodHammer3',
            ability5: 'woodHammer3',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        fennekin: {
            id: 'fennekin',
            index: 130,
            number: 653,
            sortNumber: 309,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'fennekin',
            ability1: 'ember',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        braixen: {
            id: 'braixen',
            index: 131,
            number: 654,
            sortNumber: 310,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'fennekin',
            family: 'fennekin',
            ability1: 'flamethrower',
            ability2: 'flamethrower',
            ability3: 'luckyChant',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        delphox: {
            id: 'delphox',
            index: 132,
            number: 655,
            sortNumber: 311,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 1200,
            evoStage: 3,
            evolvesFrom: 'braixen',
            family: 'fennekin',
            ability1: 'mysticalFire',
            ability2: 'mysticalFire',
            ability3: 'luckyChant',
            ability4: 'mysticalFire',
            ability5: 'luckyChant',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        froakie: {
            id: 'froakie',
            index: 133,
            number: 656,
            sortNumber: 312,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'froakie',
            ability1: 'bubble',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        frogadier: {
            id: 'frogadier',
            index: 134,
            number: 657,
            sortNumber: 313,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'froakie',
            family: 'froakie',
            ability1: 'bubbleBeam',
            ability2: 'bubbleBeam',
            ability3: 'mindReader',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        greninja: {
            id: 'greninja',
            index: 135,
            number: 658,
            sortNumber: 314,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 1200,
            evoStage: 3,
            evolvesFrom: 'frogadier',
            family: 'froakie',
            ability1: 'waterShuriken',
            ability2: 'waterShuriken',
            ability3: 'mindReader',
            ability4: 'waterShuriken',
            ability5: 'mindReader',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        bunnelby: {
            id: 'bunnelby',
            index: 136,
            number: 659,
            sortNumber: 315,
            tier: 1,
            rarity: 1,
            gym: 1,
            type: 'normal',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'bunnelby',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        diggersby: {
            id: 'diggersby',
            index: 137,
            number: 660,
            sortNumber: 316,
            tier: 2,
            rarity: 1,
            gym: 0,
            type: 'normal',
            cp: 600,
            evoStage: 2,
            evolvesFrom: 'bunnelby',
            family: 'bunnelby',
            ability1: 'earthPower',
            ability2: 'earthPower',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        fletchling: {
            id: 'fletchling',
            index: 138,
            number: 661,
            sortNumber: 317,
            tier: 1,
            rarity: 1,
            gym: 3,
            type: 'normal',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'fletchling',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        fletchinder: {
            id: 'fletchinder',
            index: 139,
            number: 662,
            sortNumber: 318,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'fire',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'fletchling',
            family: 'fletchling',
            ability1: 'ember',
            ability2: 'ember',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        talonflame: {
            id: 'talonflame',
            index: 140,
            number: 663,
            sortNumber: 319,
            tier: 2,
            rarity: 1,
            gym: 0,
            type: 'fire',
            cp: 650,
            evoStage: 3,
            evolvesFrom: 'fletchinder',
            family: 'fletchling',
            ability1: 'ember',
            ability2: 'ember',
            ability3: 'ember',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        litleo: {
            id: 'litleo',
            index: 141,
            number: 667,
            sortNumber: 320,
            tier: 1,
            rarity: 1,
            gym: 3,
            type: 'fire',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'litleo',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pyroar: {
            id: 'pyroar',
            index: 142,
            number: 668,
            sortNumber: 321,
            tier: 2,
            rarity: 1,
            gym: 0,
            type: 'fire',
            cp: 350,
            evoStage: 2,
            evolvesFrom: 'litleo',
            family: 'litleo',
            ability1: 'nobleRoar2',
            ability2: 'nobleRoar2',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        inkay: {
            id: 'inkay',
            index: 143,
            number: 686,
            sortNumber: 322,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 350,
            evoStage: 1,
            evolvesFrom: '',
            family: 'inkay',
            ability1: 'topsyTurvy1',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        malamar: {
            id: 'malamar',
            index: 144,
            number: 687,
            sortNumber: 323,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'inkay',
            family: 'inkay',
            ability1: 'topsyTurvy2',
            ability2: 'psybeam',
            ability3: 'topsyTurvy2',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        helioptile: {
            id: 'helioptile',
            index: 145,
            number: 694,
            sortNumber: 324,
            tier: 1,
            rarity: 1,
            gym: 5,
            type: 'electric',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'helioptile',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        heliolisk: {
            id: 'heliolisk',
            index: 146,
            number: 695,
            sortNumber: 325,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'electric',
            cp: 300,
            evoStage: 2,
            evolvesFrom: 'helioptile',
            family: 'helioptile',
            ability1: 'wildCharge1',
            ability2: 'wildCharge1',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        dedenne: {
            id: 'dedenne',
            index: 147,
            number: 702,
            sortNumber: 330,
            tier: 1,
            rarity: 1,
            gym: 5,
            type: 'electric',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'dedenne',
            ability1: 'thunder',
            ability2: 'thunder',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        carbink: {
            id: 'carbink',
            index: 148,
            number: 703,
            sortNumber: 331,
            tier: 1,
            rarity: 1,
            gym: 11,
            type: 'fighting',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'carbink',
            ability1: 'powerGem',
            ability2: 'powerGem',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        rowlet: {
            id: 'rowlet',
            index: 150,
            number: 722,
            sortNumber: 336,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'rowlet',
            ability1: 'razorLeaf',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        litten: {
            id: 'litten',
            index: 151,
            number: 725,
            sortNumber: 339,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'litten',
            ability1: 'ember',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        popplio: {
            id: 'popplio',
            index: 152,
            number: 728,
            sortNumber: 342,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'popplio',
            ability1: 'waterGun',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        wishiwashi: {
            id: 'wishiwashi',
            index: 153,
            number: 746,
            sortNumber: 345,
            tier: 1,
            rarity: 1,
            gym: 4,
            type: 'water',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'wishiwashi',
            ability1: 'hydroPump',
            ability2: 'hydroPump',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        morelull: {
            id: 'morelull',
            index: 154,
            number: 755,
            sortNumber: 346,
            tier: 1,
            rarity: 2,
            gym: 7,
            type: 'grass',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'morelull',
            ability1: 'synthesis',
            ability2: 'synthesis',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        shiinotic: {
            id: 'shiinotic',
            index: 155,
            number: 756,
            sortNumber: 347,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'grass',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'morelull',
            family: 'morelull',
            ability1: 'synthesis',
            ability2: 'synthesis',
            ability3: 'synthesis',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        salandit: {
            id: 'salandit',
            index: 156,
            number: 757,
            sortNumber: 348,
            tier: 1,
            rarity: 2,
            gym: 10,
            type: 'fire',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'salandit',
            ability1: 'ember',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        salazzle: {
            id: 'salazzle',
            index: 157,
            number: 758,
            sortNumber: 349,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'fire',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'salandit',
            family: 'salandit',
            ability1: 'fireLash',
            ability2: 'odorSleuth',
            ability3: 'fireLash',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        turtonator: {
            id: 'turtonator',
            index: 158,
            number: 776,
            sortNumber: 350,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 650,
            evoStage: 1,
            evolvesFrom: '',
            family: 'turtonator',
            ability1: 'shellTrap',
            ability2: 'shellTrap',
            ability3: 'shellTrap',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        mimikyu: {
            id: 'mimikyu',
            index: 159,
            number: 778,
            sortNumber: 352,
            tier: 1,
            rarity: 3,
            gym: 7,
            type: 'psychic',
            cp: 400,
            evoStage: 1,
            evolvesFrom: '',
            family: 'mimikyu',
            ability1: 'shadowSneak',
            ability2: 'shadowSneak',
            ability3: 'shadowSneak',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        persian: {
            id: 'persian',
            index: 160,
            number: 53,
            sortNumber: 39,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 550,
            evoStage: 2,
            evolvesFrom: 'meowth',
            family: 'meowth',
            ability1: 'payDay2',
            ability2: 'payDay2',
            ability3: 'payDay2',
            ability4: 'payDay2',
            ability5: 'payDay2',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        dratini: {
            id: 'dratini',
            index: 161,
            number: 147,
            sortNumber: 118,
            tier: 1,
            rarity: 3,
            gym: 8,
            type: 'normal',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'dratini',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        dragonair: {
            id: 'dragonair',
            index: 162,
            number: 148,
            sortNumber: 119,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 500,
            evoStage: 2,
            evolvesFrom: 'dratini',
            family: 'dratini',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        dragonite: {
            id: 'dragonite',
            index: 163,
            number: 149,
            sortNumber: 120,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 1300,
            evoStage: 3,
            evolvesFrom: 'dragonair',
            family: 'dratini',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        chikorita: {
            id: 'chikorita',
            index: 164,
            number: 152,
            sortNumber: 123,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'chikorita',
            ability1: 'razorLeaf',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        bayleef: {
            id: 'bayleef',
            index: 165,
            number: 153,
            sortNumber: 124,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'chikorita',
            family: 'chikorita',
            ability1: 'solarBeam',
            ability2: 'solarBeam',
            ability3: 'aromatherapy',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        meganium: {
            id: 'meganium',
            index: 166,
            number: 154,
            sortNumber: 125,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 1150,
            evoStage: 3,
            evolvesFrom: 'bayleef',
            family: 'chikorita',
            ability1: 'solarBeam',
            ability2: 'solarBeam',
            ability3: 'aromatherapy',
            ability4: 'solarBeam',
            ability5: 'aromatherapy',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        cyndaquil: {
            id: 'cyndaquil',
            index: 167,
            number: 155,
            sortNumber: 126,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'cyndaquil',
            ability1: 'ember',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        quilava: {
            id: 'quilava',
            index: 168,
            number: 156,
            sortNumber: 127,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'cyndaquil',
            family: 'cyndaquil',
            ability1: 'eruption',
            ability2: 'eruption',
            ability3: 'drought',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        typhlosion: {
            id: 'typhlosion',
            index: 169,
            number: 157,
            sortNumber: 128,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 1150,
            evoStage: 3,
            evolvesFrom: 'quilava',
            family: 'cyndaquil',
            ability1: 'eruption',
            ability2: 'eruption',
            ability3: 'drought',
            ability4: 'eruption',
            ability5: 'drought',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        totodile: {
            id: 'totodile',
            index: 170,
            number: 158,
            sortNumber: 129,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'totodile',
            ability1: 'waterGun',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        croconaw: {
            id: 'croconaw',
            index: 171,
            number: 159,
            sortNumber: 130,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'totodile',
            family: 'totodile',
            ability1: 'aquaTail',
            ability2: 'crunch',
            ability3: '',
            ability4: 'aquaTail',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        feraligatr: {
            id: 'feraligatr',
            index: 172,
            number: 160,
            sortNumber: 131,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 1200,
            evoStage: 3,
            evolvesFrom: 'croconaw',
            family: 'totodile',
            ability1: 'aquaTail',
            ability2: 'crunch',
            ability3: 'crunch',
            ability4: 'aquaTail',
            ability5: 'aquaTail',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        slowking: {
            id: 'slowking',
            index: 173,
            number: 199,
            sortNumber: 58,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 600,
            evoStage: 2,
            evolvesFrom: 'slowpoke',
            family: 'slowpoke',
            ability1: 'healPulse',
            ability2: 'healPulse',
            ability3: 'healPulse',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        treecko: {
            id: 'treecko',
            index: 174,
            number: 252,
            sortNumber: 183,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'treecko',
            ability1: 'razorLeaf',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        grovyle: {
            id: 'grovyle',
            index: 175,
            number: 253,
            sortNumber: 184,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'treecko',
            family: 'treecko',
            ability1: 'quickAttack',
            ability2: 'quickAttack',
            ability3: 'grassKnot2',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        sceptile: {
            id: 'sceptile',
            index: 176,
            number: 254,
            sortNumber: 185,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 1100,
            evoStage: 3,
            evolvesFrom: 'grovyle',
            family: 'treecko',
            ability1: 'quickAttack',
            ability2: 'quickAttack',
            ability3: 'grassKnot3',
            ability4: 'quickAttack',
            ability5: 'grassKnot3',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        torchic: {
            id: 'torchic',
            index: 177,
            number: 255,
            sortNumber: 186,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'torchic',
            ability1: 'ember',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        combusken: {
            id: 'combusken',
            index: 178,
            number: 256,
            sortNumber: 187,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 750,
            evoStage: 2,
            evolvesFrom: 'torchic',
            family: 'torchic',
            ability1: 'ember',
            ability2: 'doubleKick',
            ability3: '',
            ability4: 'ember',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        blaziken: {
            id: 'blaziken',
            index: 179,
            number: 257,
            sortNumber: 188,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 1200,
            evoStage: 3,
            evolvesFrom: 'combusken',
            family: 'torchic',
            ability1: 'blazeKick',
            ability2: 'skyUppercut',
            ability3: 'skyUppercut',
            ability4: 'blazeKick',
            ability5: 'blazeKick',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        mudkip: {
            id: 'mudkip',
            index: 180,
            number: 258,
            sortNumber: 189,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'mudkip',
            ability1: 'waterGun',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        marshtomp: {
            id: 'marshtomp',
            index: 181,
            number: 259,
            sortNumber: 190,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'mudkip',
            family: 'mudkip',
            ability1: 'muddyWater',
            ability2: 'muddyWater',
            ability3: 'mudBomb',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        swampert: {
            id: 'swampert',
            index: 182,
            number: 260,
            sortNumber: 191,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 1200,
            evoStage: 3,
            evolvesFrom: 'marshtomp',
            family: 'mudkip',
            ability1: 'muddyWater',
            ability2: 'muddyWater',
            ability3: 'mudBomb',
            ability4: 'muddyWater',
            ability5: 'mudBomb',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        delibird: {
            id: 'delibird',
            index: 183,
            number: 225,
            sortNumber: 168,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 400,
            evoStage: 1,
            evolvesFrom: '',
            family: 'delibird',
            ability1: 'present',
            ability2: 'present',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        turtwig: {
            id: 'turtwig',
            index: 184,
            number: 387,
            sortNumber: 254,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'turtwig',
            ability1: 'razorLeaf',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        grotle: {
            id: 'grotle',
            index: 185,
            number: 388,
            sortNumber: 255,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'turtwig',
            family: 'turtwig',
            ability1: 'leafTornado',
            ability2: 'earthPower',
            ability3: '',
            ability4: 'leafTornado',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        torterra: {
            id: 'torterra',
            index: 186,
            number: 389,
            sortNumber: 256,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 1150,
            evoStage: 3,
            evolvesFrom: 'grotle',
            family: 'turtwig',
            ability1: 'leafStorm',
            ability2: 'earthquake',
            ability3: 'earthquake',
            ability4: 'leafStorm',
            ability5: 'leafStorm',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        chimchar: {
            id: 'chimchar',
            index: 187,
            number: 390,
            sortNumber: 257,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'chimchar',
            ability1: 'ember',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        monferno: {
            id: 'monferno',
            index: 188,
            number: 391,
            sortNumber: 258,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 550,
            evoStage: 2,
            evolvesFrom: 'chimchar',
            family: 'chimchar',
            ability1: 'flareBlitz2',
            ability2: 'flareBlitz2',
            ability3: '',
            ability4: 'flareBlitz2',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        infernape: {
            id: 'infernape',
            index: 189,
            number: 392,
            sortNumber: 259,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 850,
            evoStage: 3,
            evolvesFrom: 'monferno',
            family: 'chimchar',
            ability1: 'flareBlitz3',
            ability2: 'flareBlitz3',
            ability3: 'flareBlitz3',
            ability4: 'flareBlitz3',
            ability5: 'flareBlitz3',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        piplup: {
            id: 'piplup',
            index: 190,
            number: 393,
            sortNumber: 260,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'piplup',
            ability1: 'bubble',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        prinplup: {
            id: 'prinplup',
            index: 191,
            number: 394,
            sortNumber: 261,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'piplup',
            family: 'piplup',
            ability1: 'aquaJet',
            ability2: 'blizzard',
            ability3: '',
            ability4: 'aquaJet',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        empoleon: {
            id: 'empoleon',
            index: 192,
            number: 395,
            sortNumber: 262,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 1100,
            evoStage: 3,
            evolvesFrom: 'prinplup',
            family: 'piplup',
            ability1: 'aquaJet',
            ability2: 'blizzard',
            ability3: 'blizzard',
            ability4: 'aquaJet',
            ability5: 'aquaJet',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        magnezone: {
            id: 'magnezone',
            index: 193,
            number: 462,
            sortNumber: 61,
            tier: 3,
            rarity: 1,
            gym: 0,
            type: 'electric',
            cp: 1050,
            evoStage: 3,
            evolvesFrom: 'magneton',
            family: 'magnemite',
            ability1: 'zapCannon',
            ability2: 'zapCannon',
            ability3: 'zapCannon',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        rhyperior: {
            id: 'rhyperior',
            index: 194,
            number: 464,
            sortNumber: 78,
            tier: 3,
            rarity: 2,
            gym: 0,
            type: 'fighting',
            cp: 800,
            evoStage: 3,
            evolvesFrom: 'rhydon',
            family: 'rhyhorn',
            ability1: 'rockWrecker',
            ability2: 'rockWrecker',
            ability3: 'rockWrecker',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        snivy: {
            id: 'snivy',
            index: 195,
            number: 495,
            sortNumber: 278,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'snivy',
            ability1: 'vineWhip',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        servine: {
            id: 'servine',
            index: 196,
            number: 496,
            sortNumber: 279,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'snivy',
            family: 'snivy',
            ability1: 'leafStorm',
            ability2: 'leafStorm',
            ability3: 'wringOut2',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        serperior: {
            id: 'serperior',
            index: 197,
            number: 497,
            sortNumber: 280,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 1150,
            evoStage: 3,
            evolvesFrom: 'servine',
            family: 'snivy',
            ability1: 'leafStorm',
            ability2: 'leafStorm',
            ability3: 'wringOut3',
            ability4: 'leafStorm',
            ability5: 'wringOut3',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        tepig: {
            id: 'tepig',
            index: 198,
            number: 498,
            sortNumber: 281,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'tepig',
            ability1: 'ember',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pignite: {
            id: 'pignite',
            index: 199,
            number: 499,
            sortNumber: 282,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'tepig',
            family: 'tepig',
            ability1: 'flameCharge',
            ability2: 'flameCharge',
            ability3: 'heatCrash2',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        emboar: {
            id: 'emboar',
            index: 200,
            number: 500,
            sortNumber: 283,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 1100,
            evoStage: 3,
            evolvesFrom: 'pignite',
            family: 'tepig',
            ability1: 'flameCharge',
            ability2: 'flameCharge',
            ability3: 'heatCrash3',
            ability4: 'flameCharge',
            ability5: 'heatCrash3',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        oshawott: {
            id: 'oshawott',
            index: 201,
            number: 501,
            sortNumber: 284,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'oshawott',
            ability1: 'waterGun',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        dewott: {
            id: 'dewott',
            index: 202,
            number: 502,
            sortNumber: 285,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'oshawott',
            family: 'oshawott',
            ability1: 'razorShell',
            ability2: 'xScissor',
            ability3: '',
            ability4: 'razorShell',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        samurott: {
            id: 'samurott',
            index: 203,
            number: 503,
            sortNumber: 286,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 1150,
            evoStage: 3,
            evolvesFrom: 'dewott',
            family: 'oshawott',
            ability1: 'hydroPump',
            ability2: 'megahorn',
            ability3: 'megahorn',
            ability4: 'hydroPump',
            ability5: 'hydroPump',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        dartrix: {
            id: 'dartrix',
            index: 204,
            number: 723,
            sortNumber: 337,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'rowlet',
            family: 'rowlet',
            ability1: 'leafBlade',
            ability2: 'leafBlade',
            ability3: 'spiritShackle',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        decidueye: {
            id: 'decidueye',
            index: 205,
            number: 724,
            sortNumber: 338,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'grass',
            cp: 1200,
            evoStage: 3,
            evolvesFrom: 'dartrix',
            family: 'rowlet',
            ability1: 'leafBlade',
            ability2: 'leafBlade',
            ability3: 'spiritShackle',
            ability4: 'leafBlade',
            ability5: 'spiritShackle',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        torracat: {
            id: 'torracat',
            index: 206,
            number: 726,
            sortNumber: 340,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 750,
            evoStage: 2,
            evolvesFrom: 'litten',
            family: 'litten',
            ability1: 'ember',
            ability2: 'bite',
            ability3: '',
            ability4: 'ember',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        incineroar: {
            id: 'incineroar',
            index: 207,
            number: 727,
            sortNumber: 341,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 1200,
            evoStage: 3,
            evolvesFrom: 'torracat',
            family: 'litten',
            ability1: 'fireFang',
            ability2: 'darkestLariat',
            ability3: 'darkestLariat',
            ability4: 'fireFang',
            ability5: 'fireFang',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        brionne: {
            id: 'brionne',
            index: 208,
            number: 729,
            sortNumber: 343,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'popplio',
            family: 'popplio',
            ability1: 'hydroPump',
            ability2: 'hydroPump',
            ability3: 'aquaRing',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        primarina: {
            id: 'primarina',
            index: 209,
            number: 730,
            sortNumber: 344,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 1150,
            evoStage: 3,
            evolvesFrom: 'brionne',
            family: 'popplio',
            ability1: 'sparklingAria',
            ability2: 'sparklingAria',
            ability3: 'aquaRing',
            ability4: 'sparklingAria',
            ability5: 'aquaRing',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        zubat: {
            id: 'zubat',
            index: 210,
            number: 41,
            sortNumber: 29,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'zubat',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        golbat: {
            id: 'golbat',
            index: 211,
            number: 42,
            sortNumber: 30,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'zubat',
            family: 'zubat',
            ability1: 'poisonFang',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        crobat: {
            id: 'crobat',
            index: 212,
            number: 169,
            sortNumber: 31,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 600,
            evoStage: 3,
            evolvesFrom: 'golbat',
            family: 'zubat',
            ability1: 'crossPoison',
            ability2: 'quickAttack',
            ability3: 'crossPoison',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        poliwag: {
            id: 'poliwag',
            index: 213,
            number: 60,
            sortNumber: 44,
            tier: 1,
            rarity: 2,
            gym: 10,
            type: 'water',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'poliwag',
            ability1: 'bubble',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        poliwhirl: {
            id: 'poliwhirl',
            index: 214,
            number: 61,
            sortNumber: 45,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'poliwag',
            family: 'poliwag',
            ability1: 'bubbleBeam',
            ability2: 'bubbleBeam',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        poliwrath: {
            id: 'poliwrath',
            index: 215,
            number: 62,
            sortNumber: 46,
            tier: 3,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 1100,
            evoStage: 3,
            evolvesFrom: 'poliwhirl',
            family: 'poliwag',
            ability1: 'dynamicPunch',
            ability2: 'dynamicPunch',
            ability3: 'dynamicPunch',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        politoed: {
            id: 'politoed',
            index: 216,
            number: 186,
            sortNumber: 47,
            tier: 3,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 1100,
            evoStage: 3,
            evolvesFrom: 'poliwhirl',
            family: 'poliwag',
            ability1: 'rainDance',
            ability2: 'rainDance',
            ability3: 'rainDance',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        grimer: {
            id: 'grimer',
            index: 217,
            number: 88,
            sortNumber: 63,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'grimer',
            ability1: 'harden',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        muk: {
            id: 'muk',
            index: 218,
            number: 89,
            sortNumber: 64,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 600,
            evoStage: 2,
            evolvesFrom: 'grimer',
            family: 'grimer',
            ability1: 'harden',
            ability2: 'haze',
            ability3: 'harden',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        elekid: {
            id: 'elekid',
            index: 219,
            number: 239,
            sortNumber: 89,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'electric',
            cp: 150,
            evoStage: 0,
            evolvesFrom: '',
            family: 'electabuzz',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        electabuzz: {
            id: 'electabuzz',
            index: 220,
            number: 125,
            sortNumber: 90,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'electric',
            cp: 400,
            evoStage: 1,
            evolvesFrom: 'elekid',
            family: 'electabuzz',
            ability1: 'thunderPunch',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        electivire: {
            id: 'electivire',
            index: 221,
            number: 466,
            sortNumber: 91,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'electric',
            cp: 1150,
            evoStage: 2,
            evolvesFrom: 'electabuzz',
            family: 'electabuzz',
            ability1: 'thunderPunch',
            ability2: 'electricTerrain',
            ability3: 'thunderPunch',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        spinarak: {
            id: 'spinarak',
            index: 222,
            number: 167,
            sortNumber: 132,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'grass',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'spinarak',
            ability1: 'stickyWeb',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        ariados: {
            id: 'ariados',
            index: 223,
            number: 168,
            sortNumber: 133,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'grass',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'spinarak',
            family: 'spinarak',
            ability1: 'stickyWeb',
            ability2: 'poisonJab',
            ability3: 'stickyWeb',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        wooper: {
            id: 'wooper',
            index: 224,
            number: 194,
            sortNumber: 150,
            tier: 1,
            rarity: 1,
            gym: 10,
            type: 'water',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'wooper',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        quagsire: {
            id: 'quagsire',
            index: 225,
            number: 195,
            sortNumber: 151,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'water',
            cp: 350,
            evoStage: 2,
            evolvesFrom: 'wooper',
            family: 'wooper',
            ability1: 'earthPower',
            ability2: 'yawn',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        steelix: {
            id: 'steelix',
            index: 226,
            number: 208,
            sortNumber: 71,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 600,
            evoStage: 2,
            evolvesFrom: 'onix',
            family: 'onix',
            ability1: 'stealthRock',
            ability2: 'earthquake',
            ability3: 'stealthRock',
            ability4: 'earthquake',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pineco: {
            id: 'pineco',
            index: 227,
            number: 204,
            sortNumber: 155,
            tier: 1,
            rarity: 2,
            gym: 9,
            type: 'grass',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'pineco',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        forretress: {
            id: 'forretress',
            index: 228,
            number: 205,
            sortNumber: 156,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'grass',
            cp: 600,
            evoStage: 2,
            evolvesFrom: 'pineco',
            family: 'pineco',
            ability1: 'rapidSpin',
            ability2: 'spikes',
            ability3: 'rapidSpin',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        teddiursa: {
            id: 'teddiursa',
            index: 229,
            number: 216,
            sortNumber: 163,
            tier: 1,
            rarity: 1,
            gym: 9,
            type: 'normal',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'teddiursa',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        ursaring: {
            id: 'ursaring',
            index: 230,
            number: 217,
            sortNumber: 164,
            tier: 1,
            rarity: 1,
            gym: 0,
            type: 'normal',
            cp: 250,
            evoStage: 2,
            evolvesFrom: 'teddiursa',
            family: 'teddiursa',
            ability1: 'thrash1',
            ability2: 'thrash1',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        growlithe: {
            id: 'growlithe',
            index: 231,
            number: 58,
            sortNumber: 42,
            tier: 1,
            rarity: 3,
            gym: 10,
            type: 'fire',
            cp: 400,
            evoStage: 1,
            evolvesFrom: '',
            family: 'growlithe',
            ability1: 'batonPass',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        arcanine: {
            id: 'arcanine',
            index: 232,
            number: 59,
            sortNumber: 43,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fire',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'growlithe',
            family: 'growlithe',
            ability1: 'batonPass',
            ability2: 'extremeSpeed',
            ability3: 'batonPass',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        misdreavus: {
            id: 'misdreavus',
            index: 233,
            number: 200,
            sortNumber: 152,
            tier: 1,
            rarity: 2,
            gym: 10,
            type: 'psychic',
            cp: 600,
            evoStage: 1,
            evolvesFrom: '',
            family: 'misdreavus',
            ability1: 'painSplit',
            ability2: 'painSplit',
            ability3: 'painSplit',
            ability4: 'painSplit',
            ability5: 'painSplit',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        mismagius: {
            id: 'mismagius',
            index: 234,
            number: 429,
            sortNumber: 153,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 750,
            evoStage: 2,
            evolvesFrom: 'misdreavus',
            family: 'misdreavus',
            ability1: 'painSplit',
            ability2: 'painSplit',
            ability3: 'painSplit',
            ability4: 'painSplit',
            ability5: 'painSplit',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        shroomish: {
            id: 'shroomish',
            index: 235,
            number: 285,
            sortNumber: 201,
            tier: 1,
            rarity: 2,
            gym: 11,
            type: 'grass',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'shroomish',
            ability1: 'absorb',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        breloom: {
            id: 'breloom',
            index: 236,
            number: 286,
            sortNumber: 202,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'grass',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'shroomish',
            family: 'shroomish',
            ability1: 'seedBomb',
            ability2: 'machPunch',
            ability3: 'seedBomb',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        azurill: {
            id: 'azurill',
            index: 237,
            number: 298,
            sortNumber: 142,
            tier: 1,
            rarity: 2,
            gym: 11,
            type: 'water',
            cp: 100,
            evoStage: 0,
            evolvesFrom: '',
            family: 'marill',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        marill: {
            id: 'marill',
            index: 238,
            number: 183,
            sortNumber: 143,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 250,
            evoStage: 1,
            evolvesFrom: 'azurill',
            family: 'marill',
            ability1: 'powerUpPunch',
            ability2: 'powerUpPunch',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        azumarill: {
            id: 'azumarill',
            index: 239,
            number: 184,
            sortNumber: 144,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'marill',
            family: 'marill',
            ability1: 'superpower',
            ability2: 'superpower',
            ability3: 'superpower',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        ralts: {
            id: 'ralts',
            index: 240,
            number: 280,
            sortNumber: 197,
            tier: 1,
            rarity: 3,
            gym: 11,
            type: 'psychic',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'ralts',
            ability1: 'psybeam',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        kirlia: {
            id: 'kirlia',
            index: 241,
            number: 281,
            sortNumber: 198,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'psychic',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'ralts',
            family: 'ralts',
            ability1: 'psychic',
            ability2: 'psychic',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        gardevoir: {
            id: 'gardevoir',
            index: 242,
            number: 282,
            sortNumber: 199,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'psychic',
            cp: 1050,
            evoStage: 3,
            evolvesFrom: 'kirlia',
            family: 'ralts',
            ability1: 'futureSight',
            ability2: 'futureSight',
            ability3: 'futureSight',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        gallade: {
            id: 'gallade',
            index: 243,
            number: 475,
            sortNumber: 200,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'fighting',
            cp: 600,
            evoStage: 3,
            evolvesFrom: 'kirlia',
            family: 'ralts',
            ability1: 'psychoCut',
            ability2: 'psychoCut',
            ability3: 'psychoCut',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        cleffa: {
            id: 'cleffa',
            index: 244,
            number: 173,
            sortNumber: 24,
            tier: 1,
            rarity: 2,
            gym: 11,
            type: 'psychic',
            cp: 100,
            evoStage: 0,
            evolvesFrom: '',
            family: 'clefairy',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        clefairy: {
            id: 'clefairy',
            index: 245,
            number: 35,
            sortNumber: 25,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 250,
            evoStage: 1,
            evolvesFrom: 'cleffa',
            family: 'clefairy',
            ability1: 'metronome1',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        clefable: {
            id: 'clefable',
            index: 246,
            number: 36,
            sortNumber: 26,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 500,
            evoStage: 2,
            evolvesFrom: 'clefairy',
            family: 'clefairy',
            ability1: 'metronome2',
            ability2: 'moonlight',
            ability3: 'metronome2',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        happiny: {
            id: 'happiny',
            index: 247,
            number: 440,
            sortNumber: 79,
            tier: 1,
            rarity: 2,
            gym: 11,
            type: 'normal',
            cp: 100,
            evoStage: 0,
            evolvesFrom: '',
            family: 'chansey',
            ability1: 'softBoiled',
            ability2: 'softBoiled',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        chansey: {
            id: 'chansey',
            index: 248,
            number: 113,
            sortNumber: 80,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 450,
            evoStage: 1,
            evolvesFrom: 'happiny',
            family: 'chansey',
            ability1: 'softBoiled',
            ability2: 'softBoiled',
            ability3: 'softBoiled',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        porygon: {
            id: 'porygon',
            index: 249,
            number: 137,
            sortNumber: 106,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'porygon',
            ability1: 'psybeam',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        porygon2: {
            id: 'porygon2',
            index: 250,
            number: 233,
            sortNumber: 107,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'porygon',
            family: 'porygon',
            ability1: 'psybeam',
            ability2: 'psybeam',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        porygonz: {
            id: 'porygonz',
            index: 251,
            number: 474,
            sortNumber: 108,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 1200,
            evoStage: 3,
            evolvesFrom: 'porygon2',
            family: 'porygon',
            ability1: 'conversion',
            ability2: 'conversion',
            ability3: 'conversion',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        sneasel: {
            id: 'sneasel',
            index: 252,
            number: 215,
            sortNumber: 161,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'sneasel',
            ability1: 'iceShard',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        weavile: {
            id: 'weavile',
            index: 253,
            number: 461,
            sortNumber: 162,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'sneasel',
            family: 'sneasel',
            ability1: 'iceShard',
            ability2: 'beatUp1',
            ability3: 'iceShard',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        wingull: {
            id: 'wingull',
            index: 254,
            number: 278,
            sortNumber: 195,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'wingull',
            ability1: 'airCutter',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pelipper: {
            id: 'pelipper',
            index: 255,
            number: 279,
            sortNumber: 196,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'wingull',
            family: 'wingull',
            ability1: 'airSlash',
            ability2: 'airSlash',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        lotad: {
            id: 'lotad',
            index: 256,
            number: 270,
            sortNumber: 192,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'lotad',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        lombre: {
            id: 'lombre',
            index: 257,
            number: 271,
            sortNumber: 193,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'lotad',
            family: 'lotad',
            ability1: 'zenHeadbutt',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        ludicolo: {
            id: 'ludicolo',
            index: 258,
            number: 272,
            sortNumber: 194,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 650,
            evoStage: 3,
            evolvesFrom: 'lombre',
            family: 'lotad',
            ability1: 'zenHeadbutt',
            ability2: 'grassKnot2',
            ability3: 'zenHeadbutt',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        mareep: {
            id: 'mareep',
            index: 259,
            number: 179,
            sortNumber: 139,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'electric',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'mareep',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        flaaffy: {
            id: 'flaaffy',
            index: 260,
            number: 180,
            sortNumber: 140,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'electric',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'mareep',
            family: 'mareep',
            ability1: 'discharge',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        ampharos: {
            id: 'ampharos',
            index: 261,
            number: 181,
            sortNumber: 141,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'electric',
            cp: 1100,
            evoStage: 3,
            evolvesFrom: 'flaaffy',
            family: 'mareep',
            ability1: 'discharge',
            ability2: 'ionDeluge',
            ability3: 'discharge',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        raikou: {
            id: 'raikou',
            index: 262,
            number: 243,
            sortNumber: 174,
            tier: 2,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'electric',
            cp: 750,
            evoStage: 1,
            evolvesFrom: '',
            family: 'raikou',
            ability1: 'rainDance',
            ability2: 'rainDance',
            ability3: 'rainDance',
            ability4: 'rainDance',
            ability5: 'rainDance',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        aipom: {
            id: 'aipom',
            index: 263,
            number: 190,
            sortNumber: 148,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'aipom',
            ability1: 'doubleHit1',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        ambipom: {
            id: 'ambipom',
            index: 264,
            number: 424,
            sortNumber: 149,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'aipom',
            family: 'aipom',
            ability1: 'doubleHit2',
            ability2: 'doubleHit2',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        slakoth: {
            id: 'slakoth',
            index: 265,
            number: 287,
            sortNumber: 203,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 550,
            evoStage: 1,
            evolvesFrom: '',
            family: 'slakoth',
            ability1: 'slackOff1',
            ability2: 'slackOff1',
            ability3: 'slackOff1',
            ability4: 'slackOff1',
            ability5: 'slackOff1',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        vigoroth: {
            id: 'vigoroth',
            index: 266,
            number: 288,
            sortNumber: 204,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 200,
            evoStage: 2,
            evolvesFrom: 'slakoth',
            family: 'slakoth',
            ability1: 'uproar1',
            ability2: 'uproar1',
            ability3: 'uproar1',
            ability4: 'uproar1',
            ability5: 'uproar1',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        slaking: {
            id: 'slaking',
            index: 267,
            number: 289,
            sortNumber: 205,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 1100,
            evoStage: 3,
            evolvesFrom: 'vigoroth',
            family: 'slakoth',
            ability1: 'slackOff2',
            ability2: 'slackOff2',
            ability3: 'slackOff2',
            ability4: 'slackOff2',
            ability5: 'slackOff2',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        houndour: {
            id: 'houndour',
            index: 268,
            number: 228,
            sortNumber: 170,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'fire',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'houndour',
            ability1: 'fireFang',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        houndoom: {
            id: 'houndoom',
            index: 269,
            number: 229,
            sortNumber: 171,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'fire',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'houndour',
            family: 'houndour',
            ability1: 'fireFang',
            ability2: 'crunch',
            ability3: 'fireFang',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        entei: {
            id: 'entei',
            index: 270,
            number: 244,
            sortNumber: 175,
            tier: 2,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'fire',
            cp: 600,
            evoStage: 1,
            evolvesFrom: '',
            family: 'entei',
            ability1: 'flareBlitz2',
            ability2: 'flareBlitz2',
            ability3: 'flareBlitz2',
            ability4: 'flareBlitz2',
            ability5: 'flareBlitz2',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        meditite: {
            id: 'meditite',
            index: 271,
            number: 307,
            sortNumber: 210,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'meditite',
            ability1: 'thunderPunch',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        medicham: {
            id: 'medicham',
            index: 272,
            number: 308,
            sortNumber: 211,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'meditite',
            family: 'meditite',
            ability1: 'thunderPunch',
            ability2: 'icePunch',
            ability3: 'thunderPunch',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        bronzor: {
            id: 'bronzor',
            index: 273,
            number: 436,
            sortNumber: 269,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'bronzor',
            ability1: 'confusion',
            ability2: 'confusion',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        bronzong: {
            id: 'bronzong',
            index: 274,
            number: 437,
            sortNumber: 270,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'psychic',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'bronzor',
            family: 'bronzor',
            ability1: 'extrasensory',
            ability2: 'extrasensory',
            ability3: 'extrasensory',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        beldum: {
            id: 'beldum',
            index: 275,
            number: 374,
            sortNumber: 243,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'beldum',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        metang: {
            id: 'metang',
            index: 276,
            number: 375,
            sortNumber: 244,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 550,
            evoStage: 2,
            evolvesFrom: 'beldum',
            family: 'beldum',
            ability1: 'ironDefense',
            ability2: 'ironDefense',
            ability3: 'ironDefense',
            ability4: 'ironDefense',
            ability5: 'ironDefense',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        metagross: {
            id: 'metagross',
            index: 277,
            number: 376,
            sortNumber: 245,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'normal',
            cp: 1400,
            evoStage: 3,
            evolvesFrom: 'metang',
            family: 'beldum',
            ability1: 'ironDefense',
            ability2: 'ironDefense',
            ability3: 'ironDefense',
            ability4: 'ironDefense',
            ability5: 'ironDefense',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        suicune: {
            id: 'suicune',
            index: 278,
            number: 245,
            sortNumber: 176,
            tier: 2,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'water',
            cp: 700,
            evoStage: 1,
            evolvesFrom: '',
            family: 'suicune',
            ability1: 'haze',
            ability2: 'haze',
            ability3: 'haze',
            ability4: 'haze',
            ability5: 'haze',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        baltoy: {
            id: 'baltoy',
            index: 279,
            number: 343,
            sortNumber: 225,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fighting',
            cp: 400,
            evoStage: 1,
            evolvesFrom: '',
            family: 'baltoy',
            ability1: 'earthPower',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        claydol: {
            id: 'claydol',
            index: 280,
            number: 344,
            sortNumber: 226,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'fighting',
            cp: 650,
            evoStage: 2,
            evolvesFrom: 'baltoy',
            family: 'baltoy',
            ability1: 'earthquake',
            ability2: 'rapidSpin',
            ability3: 'earthquake',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        sableye: {
            id: 'sableye',
            index: 281,
            number: 302,
            sortNumber: 206,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 350,
            evoStage: 1,
            evolvesFrom: '',
            family: 'sableye',
            ability1: 'darkPulse',
            ability2: 'protect',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        duskull: {
            id: 'duskull',
            index: 282,
            number: 355,
            sortNumber: 233,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'psychic',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'duskull',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        dusclops: {
            id: 'dusclops',
            index: 283,
            number: 356,
            sortNumber: 234,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'psychic',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'duskull',
            family: 'duskull',
            ability1: 'shadowPunch',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        dusknoir: {
            id: 'dusknoir',
            index: 284,
            number: 477,
            sortNumber: 235,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'psychic',
            cp: 1200,
            evoStage: 3,
            evolvesFrom: 'dusclops',
            family: 'duskull',
            ability1: 'shadowPunch',
            ability2: 'thunderPunch',
            ability3: 'shadowPunch',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        jirachi: {
            id: 'jirachi',
            index: 285,
            number: 385,
            sortNumber: 252,
            tier: 2,
            rarity: 5,
            gym: 0,
            legendary: !0,
            type: 'normal',
            cp: 650,
            evoStage: 1,
            evolvesFrom: '',
            family: 'jirachi',
            ability1: 'wish',
            ability2: 'wish',
            ability3: 'wish',
            ability4: 'wish',
            ability5: 'wish',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        torkoal: {
            id: 'torkoal',
            index: 286,
            number: 324,
            sortNumber: 220,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'fire',
            cp: 600,
            evoStage: 1,
            evolvesFrom: '',
            family: 'torkoal',
            ability1: 'eruption',
            ability2: 'rapidSpin',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        staryu: {
            id: 'staryu',
            index: 287,
            number: 120,
            sortNumber: 84,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'staryu',
            ability1: 'waterGun',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        starmie: {
            id: 'starmie',
            index: 288,
            number: 121,
            sortNumber: 85,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'water',
            cp: 350,
            evoStage: 2,
            evolvesFrom: 'staryu',
            family: 'staryu',
            ability1: 'hydroPump',
            ability2: 'rapidSpin',
            ability3: 'hydroPump',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        regice: {
            id: 'regice',
            index: 289,
            number: 378,
            sortNumber: 246,
            tier: 2,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'water',
            cp: 700,
            evoStage: 1,
            evolvesFrom: '',
            family: 'regice',
            ability1: 'zapCannon',
            ability2: 'zapCannon',
            ability3: 'zapCannon',
            ability4: 'zapCannon',
            ability5: 'zapCannon',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        geodude: {
            id: 'geodude',
            index: 290,
            number: 74,
            sortNumber: 51,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'fighting',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'geodude',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        graveler: {
            id: 'graveler',
            index: 291,
            number: 75,
            sortNumber: 52,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'fighting',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'geodude',
            family: 'geodude',
            ability1: 'rockThrow',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        golem: {
            id: 'golem',
            index: 292,
            number: 76,
            sortNumber: 53,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'fighting',
            cp: 650,
            evoStage: 3,
            evolvesFrom: 'graveler',
            family: 'geodude',
            ability1: 'rockSlide',
            ability2: 'magnitude2',
            ability3: 'rockSlide',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        gligar: {
            id: 'gligar',
            index: 293,
            number: 207,
            sortNumber: 157,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'fighting',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'gligar',
            ability1: 'furyCutter',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        gliscor: {
            id: 'gliscor',
            index: 294,
            number: 472,
            sortNumber: 158,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'fighting',
            cp: 700,
            evoStage: 2,
            evolvesFrom: 'gligar',
            family: 'gligar',
            ability1: 'furyCutter',
            ability2: 'acrobatics',
            ability3: 'furyCutter',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        larvitar: {
            id: 'larvitar',
            index: 295,
            number: 246,
            sortNumber: 177,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fighting',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'larvitar',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        pupitar: {
            id: 'pupitar',
            index: 296,
            number: 247,
            sortNumber: 178,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'fighting',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'larvitar',
            family: 'larvitar',
            ability1: 'crunch',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        tyranitar: {
            id: 'tyranitar',
            index: 297,
            number: 248,
            sortNumber: 179,
            tier: 3,
            rarity: 3,
            gym: 0,
            type: 'fighting',
            cp: 1150,
            evoStage: 3,
            evolvesFrom: 'pupitar',
            family: 'larvitar',
            ability1: 'darkPulse',
            ability2: 'sandstorm',
            ability3: 'darkPulse',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        regirock: {
            id: 'regirock',
            index: 298,
            number: 377,
            sortNumber: 247,
            tier: 2,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'fighting',
            cp: 700,
            evoStage: 1,
            evolvesFrom: '',
            family: 'regirock',
            ability1: 'hammerArm',
            ability2: 'hammerArm',
            ability3: 'hammerArm',
            ability4: 'hammerArm',
            ability5: 'hammerArm',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        aron: {
            id: 'aron',
            index: 299,
            number: 304,
            sortNumber: 207,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 200,
            evoStage: 1,
            evolvesFrom: '',
            family: 'aron',
            ability1: '',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        lairon: {
            id: 'lairon',
            index: 300,
            number: 305,
            sortNumber: 208,
            tier: 1,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 350,
            evoStage: 2,
            evolvesFrom: 'aron',
            family: 'aron',
            ability1: 'takeDown1',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        aggron: {
            id: 'aggron',
            index: 301,
            number: 306,
            sortNumber: 209,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 550,
            evoStage: 3,
            evolvesFrom: 'lairon',
            family: 'aron',
            ability1: 'takeDown2',
            ability2: 'heavySlam2',
            ability3: 'takeDown2',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        skarmory: {
            id: 'skarmory',
            index: 302,
            number: 227,
            sortNumber: 169,
            tier: 2,
            rarity: 2,
            gym: 0,
            type: 'normal',
            cp: 600,
            evoStage: 1,
            evolvesFrom: '',
            family: 'skarmory',
            ability1: 'spikes',
            ability2: 'spikes',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        registeel: {
            id: 'registeel',
            index: 304,
            number: 379,
            sortNumber: 248,
            tier: 2,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'normal',
            cp: 800,
            evoStage: 1,
            evolvesFrom: '',
            family: 'registeel',
            ability1: 'ironDefense',
            ability2: 'ironDefense',
            ability3: 'ironDefense',
            ability4: 'ironDefense',
            ability5: 'ironDefense',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        cranidos: {
            id: 'cranidos',
            index: 305,
            number: 408,
            sortNumber: 265,
            tier: 1,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'fighting',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'cranidos',
            ability1: 'headSmash1',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        rampardos: {
            id: 'rampardos',
            index: 306,
            number: 409,
            sortNumber: 266,
            tier: 2,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'fighting',
            cp: 400,
            evoStage: 2,
            evolvesFrom: 'cranidos',
            family: 'cranidos',
            ability1: 'headSmash2',
            ability2: 'headSmash2',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        shieldon: {
            id: 'shieldon',
            index: 307,
            number: 410,
            sortNumber: 267,
            tier: 1,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'normal',
            cp: 350,
            evoStage: 1,
            evolvesFrom: '',
            family: 'shieldon',
            ability1: 'protect',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        bastiodon: {
            id: 'bastiodon',
            index: 308,
            number: 411,
            sortNumber: 268,
            tier: 2,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'normal',
            cp: 500,
            evoStage: 2,
            evolvesFrom: 'shieldon',
            family: 'shieldon',
            ability1: 'metalBurst2',
            ability2: 'metalBurst2',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        tyrunt: {
            id: 'tyrunt',
            index: 309,
            number: 696,
            sortNumber: 326,
            tier: 1,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'fighting',
            cp: 350,
            evoStage: 1,
            evolvesFrom: '',
            family: 'tyrunt',
            ability1: 'stoneEdge',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        tyrantrum: {
            id: 'tyrantrum',
            index: 310,
            number: 697,
            sortNumber: 327,
            tier: 3,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'fighting',
            cp: 1100,
            evoStage: 2,
            evolvesFrom: 'tyrunt',
            family: 'tyrunt',
            ability1: 'stoneEdge',
            ability2: 'stealthRock',
            ability3: 'stoneEdge',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        aerodactyl: {
            id: 'aerodactyl',
            index: 311,
            number: 142,
            sortNumber: 113,
            tier: 2,
            rarity: 3,
            gym: 0,
            fossil: !0,
            type: 'fighting',
            cp: 550,
            evoStage: 1,
            evolvesFrom: '',
            family: 'aerodactyl',
            ability1: 'takeDown2',
            ability2: 'prehistoricCall',
            ability3: 'takeDown2',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        groudon: {
            id: 'groudon',
            index: 312,
            number: 383,
            sortNumber: 250,
            tier: 3,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'fighting',
            cp: 1150,
            evoStage: 1,
            evolvesFrom: '',
            family: 'groudon',
            ability1: 'precipiceBlades',
            ability2: 'precipiceBlades',
            ability3: 'precipiceBlades',
            ability4: 'precipiceBlades',
            ability5: 'precipiceBlades',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        rayquaza: {
            id: 'rayquaza',
            index: 313,
            number: 384,
            sortNumber: 251,
            tier: 3,
            rarity: 5,
            gym: 0,
            legendary: !0,
            type: 'normal',
            cp: 1100,
            evoStage: 1,
            evolvesFrom: '',
            family: 'rayquaza',
            ability1: 'dragonAscent',
            ability2: 'dragonAscent',
            ability3: 'dragonAscent',
            ability4: 'dragonAscent',
            ability5: 'dragonAscent',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        omanyte: {
            id: 'omanyte',
            index: 314,
            number: 138,
            sortNumber: 109,
            tier: 1,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'water',
            cp: 350,
            evoStage: 1,
            evolvesFrom: '',
            family: 'omanyte',
            ability1: 'withdraw',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        omastar: {
            id: 'omastar',
            index: 315,
            number: 139,
            sortNumber: 110,
            tier: 2,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'water',
            cp: 600,
            evoStage: 2,
            evolvesFrom: 'omanyte',
            family: 'omanyte',
            ability1: 'withdraw',
            ability2: 'haze',
            ability3: 'withdraw',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        tirtouga: {
            id: 'tirtouga',
            index: 316,
            number: 564,
            sortNumber: 290,
            tier: 1,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'water',
            cp: 250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'tirtouga',
            ability1: 'bite',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        carracosta: {
            id: 'carracosta',
            index: 317,
            number: 565,
            sortNumber: 291,
            tier: 1,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'water',
            cp: 450,
            evoStage: 2,
            evolvesFrom: 'tirtouga',
            family: 'tirtouga',
            ability1: 'bite',
            ability2: 'smackDown',
            ability3: 'bite',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        carvanha: {
            id: 'carvanha',
            index: 318,
            number: 318,
            sortNumber: 214,
            tier: 1,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 300,
            evoStage: 1,
            evolvesFrom: '',
            family: 'carvanha',
            ability1: 'iceFang',
            ability2: 'iceFang',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        sharpedo: {
            id: 'sharpedo',
            index: 319,
            number: 319,
            sortNumber: 215,
            tier: 2,
            rarity: 3,
            gym: 0,
            type: 'water',
            cp: 600,
            evoStage: 2,
            evolvesFrom: 'carvanha',
            family: 'carvanha',
            ability1: 'iceFang',
            ability2: 'iceFang',
            ability3: 'iceFang',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        kyogre: {
            id: 'kyogre',
            index: 320,
            number: 382,
            sortNumber: 249,
            tier: 3,
            rarity: 4,
            gym: 0,
            legendary: !0,
            type: 'water',
            cp: 1250,
            evoStage: 1,
            evolvesFrom: '',
            family: 'kyogre',
            ability1: 'originPulse',
            ability2: 'originPulse',
            ability3: 'originPulse',
            ability4: 'originPulse',
            ability5: 'originPulse',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        amaura: {
            id: 'amaura',
            index: 345,
            number: 698,
            sortNumber: 328,
            tier: 1,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'water',
            cp: 450,
            evoStage: 1,
            evolvesFrom: '',
            family: 'amaura',
            ability1: 'icyWind',
            ability2: '',
            ability3: '',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        },
        aurorus: {
            id: 'aurorus',
            index: 346,
            number: 699,
            sortNumber: 329,
            tier: 3,
            rarity: 2,
            gym: 0,
            fossil: !0,
            type: 'water',
            cp: 1150,
            evoStage: 2,
            evolvesFrom: 'amaura',
            family: 'amaura',
            ability1: 'auroraBeam',
            ability2: 'hail',
            ability3: 'auroraBeam',
            ability4: '',
            ability5: '',
            live: !0,
            liveStaging: !0,
            liveDev: !0
        }
    },
    'src/conf/staticData/pokemonAi.json': [{
        id: 'caterpie',
        start: 1,
        end: 1
    }, {
        id: 'magikarp',
        start: 1,
        end: 1
    }, {
        id: 'pidgey',
        start: 1,
        end: 1
    }, {
        id: 'psyduck',
        start: 1,
        end: 1,
        ability: 1
    }, {
        id: 'spearow',
        start: 1,
        end: 1
    }, {
        id: 'weedle',
        start: 1,
        end: 1
    }, {
        id: 'fletchling',
        start: 2,
        end: 2,
        ability: 0
    }, {
        id: 'hoppip',
        start: 2,
        end: 2,
        ability: 0
    }, {
        id: 'horsea',
        start: 2,
        end: 2,
        ability: 0
    }, {
        id: 'kakuna',
        start: 2,
        end: 2,
        ability: 0
    }, {
        id: 'oddish',
        start: 2,
        end: 2,
        ability: 1
    }, {
        id: 'skiploom',
        start: 2,
        end: 2,
        ability: 0
    }, {
        id: 'fearow',
        start: 2,
        end: 3,
        ability: 0
    }, {
        id: 'jumpluff',
        start: 2,
        end: 3,
        ability: 0
    }, {
        id: 'metapod',
        start: 2,
        end: 3,
        ability: 0
    }, {
        id: 'pidgeot',
        start: 2,
        end: 3,
        ability: 0
    }, {
        id: 'pidgeotto',
        start: 2,
        end: 3,
        ability: 0
    }, {
        id: 'vileplume',
        start: 2,
        end: 3,
        ability: 0
    }, {
        id: 'exeggutor',
        start: 3,
        end: 3,
        ability: 0
    }, {
        id: 'fletchinder',
        start: 3,
        end: 3,
        ability: 0
    }, {
        id: 'magcargo',
        start: 3,
        end: 3,
        ability: 0
    }, {
        id: 'ninetales',
        start: 3,
        end: 3,
        ability: 0
    }, {
        id: 'pyroar',
        start: 3,
        end: 3,
        ability: 0
    }, {
        id: 'rapidash',
        start: 3,
        end: 3,
        ability: 0
    }, {
        id: 'talonflame',
        start: 3,
        end: 3,
        ability: 0
    }, {
        id: 'beedrill',
        start: 2,
        end: 4,
        ability: 0
    }, {
        id: 'butterfree',
        start: 2,
        end: 4,
        ability: 0
    }, {
        id: 'pikachu',
        start: 3,
        end: 4,
        ability: 0
    }, {
        id: 'seadra',
        start: 4,
        end: 4,
        ability: 0
    }, {
        id: 'snorlax',
        start: 2,
        end: 5,
        ability: 0
    }, {
        id: 'gyarados',
        start: 3,
        end: 5,
        ability: 0
    }, {
        id: 'blastoise',
        start: 4,
        end: 5,
        ability: 0
    }, {
        id: 'fennekin',
        start: 4,
        end: 5,
        ability: 0
    }, {
        id: 'venusaur',
        start: 4,
        end: 5,
        ability: 0
    }, {
        id: 'magnezone',
        start: 5,
        end: 5,
        ability: 0
    }, {
        id: 'gloom',
        start: 3,
        end: 7,
        ability: 0
    }, {
        id: 'milotic',
        start: 4,
        end: 7,
        ability: 0
    }, {
        id: 'diggersby',
        start: 5,
        end: 7,
        ability: 0
    }, {
        id: 'flareon',
        start: 5,
        end: 7,
        ability: 0
    }, {
        id: 'heliolisk',
        start: 5,
        end: 7,
        ability: 0
    }, {
        id: 'vaporeon',
        start: 5,
        end: 7,
        ability: 0
    }, {
        id: 'eevee',
        start: 2,
        end: 8,
        ability: 0
    }, {
        id: 'gengar',
        start: 7,
        end: 8,
        ability: 0
    }, {
        id: 'dragonite',
        start: 8,
        end: 10
    }, {
        id: 'dragonite',
        start: 9,
        end: 10
    }, {
        id: 'farfetchd',
        start: 4,
        end: 11,
        ability: 0
    }, {
        id: 'greninja',
        start: 5,
        end: 11,
        ability: 0
    }, {
        id: 'jolteon',
        start: 5,
        end: 11,
        ability: 0
    }, {
        id: 'venusaur',
        start: 5,
        end: 11,
        ability: 2
    }, {
        id: 'machamp',
        start: 6,
        end: 11,
        ability: 0
    }, {
        id: 'steelix',
        start: 6,
        end: 11,
        ability: 0
    }, {
        id: 'stunfisk',
        start: 6,
        end: 11,
        ability: 0
    }, {
        id: 'shiinotic',
        start: 7,
        end: 11,
        ability: 0
    }, {
        id: 'slowking',
        start: 7,
        end: 11,
        ability: 0
    }, {
        id: 'emboar',
        start: 8,
        end: 11,
        ability: 0
    }, {
        id: 'empoleon',
        start: 8,
        end: 11,
        ability: 0
    }, {
        id: 'heatmor',
        start: 8,
        end: 11,
        ability: 0
    }, {
        id: 'lucario',
        start: 8,
        end: 11,
        ability: 0
    }, {
        id: 'marshtomp',
        start: 8,
        end: 11,
        ability: 2
    }, {
        id: 'rhyperior',
        start: 8,
        end: 11,
        ability: 0
    }, {
        id: 'sceptile',
        start: 8,
        end: 11,
        ability: 0
    }, {
        id: 'donphan',
        start: 9,
        end: 11,
        ability: 0
    }, {
        id: 'forretress',
        start: 9,
        end: 11,
        ability: 1
    }, {
        id: 'tropius',
        start: 9,
        end: 11,
        ability: 0
    }, {
        id: 'zebstrika',
        start: 9,
        end: 11,
        ability: 1
    }, {
        id: 'dragonite',
        start: 10,
        end: 11
    }, {
        id: 'poliwrath',
        start: 10,
        end: 11,
        ability: 0
    }, {
        id: 'breloom',
        start: 11,
        end: 11
    }, {
        id: 'mismagius',
        start: 11,
        end: 11
    }, {
        id: 'stunfisk',
        start: 11,
        end: 11,
        ability: 0
    }, {
        id: 'cloyster',
        start: 4,
        end: 12,
        ability: 1
    }, {
        id: 'charizard',
        start: 5,
        end: 12,
        ability: 0
    }, {
        id: 'farfetchd',
        start: 5,
        end: 12,
        ability: 0
    }, {
        id: 'manectric',
        start: 5,
        end: 12,
        ability: 0
    }, {
        id: 'raichu',
        start: 5,
        end: 12,
        ability: 0
    }, {
        id: 'blaziken',
        start: 8,
        end: 12,
        ability: 2
    }, {
        id: 'rhydon',
        start: 8,
        end: 12,
        ability: 0
    }, {
        id: 'shiinotic',
        start: 8,
        end: 12,
        ability: 0
    }, {
        id: 'slowking',
        start: 8,
        end: 12,
        ability: 0
    }, {
        id: 'arcanine',
        start: 10,
        end: 12,
        ability: 1
    }, {
        id: 'forretress',
        start: 10,
        end: 12,
        ability: 1
    }, {
        id: 'growlithe',
        start: 10,
        end: 12,
        ability: 0
    }, {
        id: 'salazzle',
        start: 10,
        end: 12,
        ability: 0
    }, {
        id: 'swanna',
        start: 10,
        end: 12,
        ability: 0
    }, {
        id: 'tropius',
        start: 10,
        end: 12,
        ability: 0
    }, {
        id: 'chansey',
        start: 11,
        end: 12,
        ability: 0
    }, {
        id: 'chesnaught',
        start: 11,
        end: 12,
        ability: 0
    }, {
        id: 'dragonite',
        start: 11,
        end: 12
    }, {
        id: 'gallade',
        start: 11,
        end: 12,
        ability: 0
    }, {
        id: 'infernape',
        start: 11,
        end: 12,
        ability: 0
    }, {
        id: 'ariados',
        start: 12,
        end: 12,
        ability: 0
    }, {
        id: 'articuno',
        start: 12,
        end: 12
    }, {
        id: 'ho-oh',
        start: 12,
        end: 12
    }, {
        id: 'metagross',
        start: 12,
        end: 12
    }, {
        id: 'metagross',
        start: 12,
        end: 12
    }, {
        id: 'metang',
        start: 12,
        end: 12
    }, {
        id: 'metang',
        start: 12,
        end: 12
    }, {
        id: 'mewtwo',
        start: 12,
        end: 12
    }, {
        id: 'raichu',
        start: 12,
        end: 12
    }, {
        id: 'rayquaza',
        start: 12,
        end: 12
    }, {
        id: 'torracat',
        start: 12,
        end: 12,
        ability: 1
    }, {
        id: 'torracat',
        start: 12,
        end: 12,
        ability: 1
    }],
    'src/conf/staticData/pokemonInfos.json': {
        meowth: {
            height: .4,
            weight: 4.2,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        persian: {
            height: 1,
            weight: 32,
            illustrator: 'Yukiko Baba',
            adjustLargeArtX: 10,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        chikorita: {
            height: .9,
            weight: 6.4,
            illustrator: 'Motofumi Fujiwara',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        bayleef: {
            height: 1.2,
            weight: 15.8,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        meganium: {
            height: 1.8,
            weight: 100.5,
            illustrator: 'nagimiso',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        cyndaquil: {
            height: .5,
            weight: 7.9,
            illustrator: 'Mina Nakai',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        quilava: {
            height: .9,
            weight: 19,
            illustrator: 'Miki Tanaka',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        typhlosion: {
            height: 1.7,
            weight: 79.5,
            illustrator: 'Hajime Kusajima',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        totodile: {
            height: .6,
            weight: 9.5,
            illustrator: 'Hironobu Yoshida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        croconaw: {
            height: 1.1,
            weight: 25,
            illustrator: 'Yuka Morii',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        feraligatr: {
            height: 2.3,
            weight: 88.8,
            illustrator: 'kawayoo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        treecko: {
            height: .5,
            weight: 5,
            illustrator: 'Akira Komayama',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        grovyle: {
            height: .9,
            weight: 21.6,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        sceptile: {
            height: 1.7,
            weight: 52.2,
            illustrator: 'Suwama Chiaki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        torchic: {
            height: .4,
            weight: 2.5,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        combusken: {
            height: .9,
            weight: 19.5,
            illustrator: 'Sumiyoshi Kizuki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        blaziken: {
            height: 1.9,
            weight: 52,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        mudkip: {
            height: .4,
            weight: 7.6,
            illustrator: 'Misa Tsutsui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        marshtomp: {
            height: .7,
            weight: 28,
            illustrator: 'sui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        swampert: {
            height: 1.5,
            weight: 81.9,
            illustrator: 'Shin Nagasawa',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        turtwig: {
            height: .4,
            weight: 10.2,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        grotle: {
            height: 1.1,
            weight: 97,
            illustrator: 'Shigenori Negishi',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        torterra: {
            height: 2.2,
            weight: 310,
            illustrator: 'kawayoo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        chimchar: {
            height: .5,
            weight: 6.2,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        monferno: {
            height: .9,
            weight: 22,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        infernape: {
            height: 1.2,
            weight: 55,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        piplup: {
            height: .4,
            weight: 5.2,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        prinplup: {
            height: .8,
            weight: 23,
            illustrator: 'Suwama Chiaki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        empoleon: {
            height: 1.7,
            weight: 84.5,
            illustrator: 'Kent Kanetsuna',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        snivy: {
            height: .6,
            weight: 8.1,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        servine: {
            height: .8,
            weight: 16,
            illustrator: 'Shigenori Negishi',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        serperior: {
            height: 3.3,
            weight: 63,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        tepig: {
            height: .5,
            weight: 9.9,
            illustrator: 'Shin Nagasawa',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        pignite: {
            height: 1,
            weight: 55.5,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        emboar: {
            height: 1.6,
            weight: 150,
            illustrator: 'Shin Nagasawa',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        oshawott: {
            height: .5,
            weight: 5.9,
            illustrator: 'sui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        dewott: {
            height: .8,
            weight: 24.5,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        samurott: {
            height: 1.5,
            weight: 94.6,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        bulbasaur: {
            height: .7,
            weight: 6.9,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        ivysaur: {
            height: 1,
            weight: 13,
            illustrator: 'Kanako Eo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        venusaur: {
            height: 2,
            weight: 100,
            illustrator: 'Hajime Kusajima',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        charmander: {
            height: .6,
            weight: 8.5,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 14,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        charmeleon: {
            height: 1.1,
            weight: 19,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        charizard: {
            height: 1.7,
            weight: 90.5,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        squirtle: {
            height: .5,
            weight: 9,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        wartortle: {
            height: 1,
            weight: 22.5,
            illustrator: 'Mizue',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        blastoise: {
            height: 1.6,
            weight: 85.5,
            illustrator: 'Satoshi Shirai',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        caterpie: {
            height: .3,
            weight: 2.9,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 26,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        metapod: {
            height: .7,
            weight: 9.9,
            illustrator: 'kawayoo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        butterfree: {
            height: 1.1,
            weight: 32,
            illustrator: 'chibi',
            adjustLargeArtX: 7,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        weedle: {
            height: .3,
            weight: 3.2,
            illustrator: 'Yukiko Baba',
            adjustLargeArtX: 16,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        kakuna: {
            height: .6,
            weight: 10,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        beedrill: {
            height: 1,
            weight: 29.5,
            illustrator: 'Aya Kusube',
            adjustLargeArtX: 9,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        pidgey: {
            height: .3,
            weight: 1.8,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 7,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        pidgeotto: {
            height: 1.1,
            weight: 30,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        pidgeot: {
            height: 1.5,
            weight: 39.5,
            illustrator: 'kawayoo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        spearow: {
            height: .3,
            weight: 2,
            illustrator: 'Yukiko Baba',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        fearow: {
            height: 1.2,
            weight: 38,
            illustrator: 'Satoshi Shirai',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        pichu: {
            height: .3,
            weight: 2,
            illustrator: 'Kanako Eo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        pikachu: {
            height: .4,
            weight: 6,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        raichu: {
            height: .8,
            weight: 30,
            illustrator: 'Takao Unno',
            adjustLargeArtX: 6,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        vulpix: {
            height: .6,
            weight: 9.9,
            illustrator: 'kirisAki',
            adjustLargeArtX: 20,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        ninetales: {
            height: 1.1,
            weight: 19.9,
            illustrator: 'Kanako Eo',
            adjustLargeArtX: 9,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        oddish: {
            height: .5,
            weight: 5.4,
            illustrator: 'Sumiyoshi Kizuki',
            adjustLargeArtX: 19,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        gloom: {
            height: .8,
            weight: 8.6,
            illustrator: 'Shibuzoh.',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        vileplume: {
            height: 1.2,
            weight: 18.6,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        bellossom: {
            height: .4,
            weight: 5.8,
            illustrator: 'Mizue',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        paras: {
            height: .3,
            weight: 5.4,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        parasect: {
            height: 1,
            weight: 29.5,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        psyduck: {
            height: .8,
            weight: 19.6,
            illustrator: 'Shibuzoh.',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        golduck: {
            height: 1.7,
            weight: 76.6,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        machop: {
            height: .8,
            weight: 19.5,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        machoke: {
            height: 1.5,
            weight: 70.5,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 8,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        machamp: {
            height: 1.6,
            weight: 130,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        ponyta: {
            height: 1,
            weight: 30,
            illustrator: 'Tomokazu Komiya',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        rapidash: {
            height: 1.7,
            weight: 95,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        slowpoke: {
            height: 1.2,
            weight: 36,
            illustrator: 'Sumiyoshi Kizuki',
            adjustLargeArtX: 24,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        slowbro: {
            height: 1.6,
            weight: 78.5,
            illustrator: 'Tomokazu Komiya',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        slowking: {
            height: 2,
            weight: 79.5,
            illustrator: 'Shin Nagasawa',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        magnemite: {
            height: .3,
            weight: 6,
            illustrator: 'Tomokazu Komiya',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        magneton: {
            height: 1,
            weight: 60,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        magnezone: {
            height: 1.2,
            weight: 180,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        farfetchd: {
            height: .8,
            weight: 15,
            illustrator: 'Sumiyoshi Kizuki',
            adjustLargeArtX: 9,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        shellder: {
            height: .3,
            weight: 4,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        cloyster: {
            height: 1.5,
            weight: 132.5,
            illustrator: 'Yoshinobu Saito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        gastly: {
            height: 1.3,
            weight: .1,
            illustrator: 'kodama',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        haunter: {
            height: 1.6,
            weight: .1,
            illustrator: 'Aya Kusube',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        gengar: {
            height: 1.5,
            weight: 40.5,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        onix: {
            height: 8.8,
            weight: 210,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 22,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        exeggcute: {
            height: .4,
            weight: 2.5,
            illustrator: 'Miki Tanaka',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        exeggutor: {
            height: 2,
            weight: 120,
            illustrator: 'Miki Tanaka',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        cubone: {
            height: .4,
            weight: 6.5,
            illustrator: 'sowsow',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        marowak: {
            height: 1,
            weight: 45,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        rhyhorn: {
            height: 1,
            weight: 115,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        rhydon: {
            height: 1.9,
            weight: 120,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 9,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        rhyperior: {
            height: 2.4,
            weight: 282.8,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        horsea: {
            height: .4,
            weight: 8,
            illustrator: 'kirisAki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        seadra: {
            height: 1.2,
            weight: 25,
            illustrator: 'Hajime Kusajima',
            adjustLargeArtX: 5,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        kingdra: {
            height: 1.8,
            weight: 152,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        magmar: {
            height: 1.3,
            weight: 44.5,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        magikarp: {
            height: .9,
            weight: 10,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        gyarados: {
            height: 6.5,
            weight: 235,
            illustrator: 'so-taro',
            adjustLargeArtX: 4,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        lapras: {
            height: 2.5,
            weight: 220,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        eevee: {
            height: .3,
            weight: 6.5,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 5,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        vaporeon: {
            height: 1,
            weight: 29,
            illustrator: 'kirisAki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        jolteon: {
            height: .8,
            weight: 24.5,
            illustrator: 'Sanosuke Sakuma',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        flareon: {
            height: .9,
            weight: 25,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 5,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        snorlax: {
            height: 2.1,
            weight: 460,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        dratini: {
            height: 1.8,
            weight: 3.3,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        dragonair: {
            height: 4,
            weight: 16.5,
            illustrator: 'Mizue',
            adjustLargeArtX: 10,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        dragonite: {
            height: 2.2,
            weight: 210,
            illustrator: 'Hiroyuki Yamamoto',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        natu: {
            height: .2,
            weight: 2,
            illustrator: 'Miki Tanaka',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        xatu: {
            height: 1.5,
            weight: 15,
            illustrator: 'Hajime Kusajima',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        hoppip: {
            height: .4,
            weight: .5,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 6,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        skiploom: {
            height: .6,
            weight: 1,
            illustrator: 'Eri Yamaki',
            adjustLargeArtX: 11,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        jumpluff: {
            height: .8,
            weight: 3,
            illustrator: 'Kyoko Umemoto',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        shuckle: {
            height: .6,
            weight: 20.5,
            illustrator: 'Sumiyoshi Kizuki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        heracross: {
            height: 1.5,
            weight: 54,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 9,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        slugma: {
            height: .7,
            weight: 35,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        magcargo: {
            height: .8,
            weight: 55,
            illustrator: 'kawayoo',
            adjustLargeArtX: 20,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        electrike: {
            height: .6,
            weight: 15.2,
            illustrator: 'Miki Tanaka',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        manectric: {
            height: 1.5,
            weight: 40.2,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 15,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        feebas: {
            height: .6,
            weight: 7.4,
            illustrator: 'Hitoshi Ariga',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        milotic: {
            height: 6.2,
            weight: 162,
            illustrator: 'kawayoo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        kricketot: {
            height: .3,
            weight: 2.2,
            illustrator: 'Tomokazu Komiya',
            adjustLargeArtX: 6,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        kricketune: {
            height: 1,
            weight: 25.5,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        riolu: {
            height: .7,
            weight: 20.2,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        lucario: {
            height: 1.2,
            weight: 54,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        croagunk: {
            height: .7,
            weight: 23,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        toxicroak: {
            height: 1.3,
            weight: 44.4,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        maractus: {
            height: 1,
            weight: 28,
            illustrator: 'Shigenori Negishi',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        solosis: {
            height: .3,
            weight: 1,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        duosion: {
            height: .6,
            weight: 8,
            illustrator: 'Sumiyoshi Kizuki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        reuniclus: {
            height: 1,
            weight: 20.1,
            illustrator: 'Mizue',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        stunfisk: {
            height: .7,
            weight: 11,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 6,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        heatmor: {
            height: 1.4,
            weight: 58,
            illustrator: 'Akira Komayama',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        chespin: {
            height: .4,
            weight: 9,
            illustrator: 'Megumi Mizutani',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        quilladin: {
            height: .7,
            weight: 29,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        chesnaught: {
            height: 1.6,
            weight: 90,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        fennekin: {
            height: .4,
            weight: 9.4,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        braixen: {
            height: 1,
            weight: 14.5,
            illustrator: 'kirisAki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        delphox: {
            height: 1.5,
            weight: 39,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        froakie: {
            height: .3,
            weight: 7,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        frogadier: {
            height: .6,
            weight: 10.9,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        greninja: {
            height: 1.5,
            weight: 40,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        bunnelby: {
            height: .4,
            weight: 5,
            illustrator: 'Hitoshi Ariga',
            adjustLargeArtX: 15,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        diggersby: {
            height: 1,
            weight: 42.4,
            illustrator: 'Kyoko Umemoto',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        fletchling: {
            height: .3,
            weight: 1.7,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        fletchinder: {
            height: .7,
            weight: 16,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 20,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        talonflame: {
            height: 1.2,
            weight: 24.5,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        litleo: {
            height: .6,
            weight: 13.5,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 6,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        pyroar: {
            height: 1.5,
            weight: 81.5,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 8,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        helioptile: {
            height: .5,
            weight: 6,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 5,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        heliolisk: {
            height: 1,
            weight: 21,
            illustrator: 'Shin Nagasawa',
            adjustLargeArtX: 9,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        dedenne: {
            height: .2,
            weight: 2.2,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 11,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        rowlet: {
            height: .3,
            weight: 1.5,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 6,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        dartrix: {
            height: .7,
            weight: 16,
            illustrator: 'Mizue',
            adjustLargeArtX: 10,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        decidueye: {
            height: 1.6,
            weight: 36.6,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        litten: {
            height: .4,
            weight: 4.3,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        torracat: {
            height: .7,
            weight: 25,
            illustrator: 'Sanosuke Sakuma',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        incineroar: {
            height: 1.8,
            weight: 83,
            illustrator: 'Hitoshi Ariga',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        popplio: {
            height: .4,
            weight: 7.5,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        brionne: {
            height: .6,
            weight: 17.5,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        primarina: {
            height: 1.8,
            weight: 44,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        wishiwashi: {
            height: .2,
            weight: .3,
            illustrator: 'Sanosuke Sakuma',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        morelull: {
            height: .2,
            weight: 1.5,
            illustrator: 'Hitoshi Ariga',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        shiinotic: {
            height: 1,
            weight: 11.5,
            illustrator: 'Mizue',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        mimikyu: {
            height: .2,
            weight: .7,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 13,
            adjustLargeArtScale: 0,
            releaseDate: '2019-09-29T21:00:00Z'
        },
        steelix: {
            height: 9.2,
            weight: 400,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        pinsir: {
            height: 1.5,
            weight: 55,
            illustrator: 'Hajime Kusajima',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        pineco: {
            height: .6,
            weight: 7.2,
            illustrator: 'Suwama Chiaki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        forretress: {
            height: 1.2,
            weight: 125.8,
            illustrator: 'Tomokazu Komiya',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        teddiursa: {
            height: .6,
            weight: 8.8,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        ursaring: {
            height: 1.8,
            weight: 125.8,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        phanpy: {
            height: .5,
            weight: 33.5,
            illustrator: 'Yuka Morii',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        donphan: {
            height: 1.1,
            weight: 120,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        tropius: {
            height: 2,
            weight: 100,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        blitzle: {
            height: .8,
            weight: 29.8,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        zebstrika: {
            height: 1.6,
            weight: 79.5,
            illustrator: 'Misa Tsutsui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-01-23T21:00:00Z'
        },
        growlithe: {
            height: .7,
            weight: 19,
            illustrator: 'MAHOU',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        arcanine: {
            height: 1.9,
            weight: 155,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        poliwag: {
            height: .6,
            weight: 12.4,
            illustrator: 'MAHOU',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        poliwhirl: {
            height: 1,
            weight: 20,
            illustrator: 'Kanako Eo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        poliwrath: {
            height: 1.3,
            weight: 54,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        politoed: {
            height: 1.1,
            weight: 33.9,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        wooper: {
            height: .4,
            weight: 8.5,
            illustrator: 'sui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        quagsire: {
            height: 1.4,
            weight: 75,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        misdreavus: {
            height: .7,
            weight: 1,
            illustrator: 'sui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        mismagius: {
            height: .9,
            weight: 4.4,
            illustrator: 'chibi',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        ducklett: {
            height: .5,
            weight: 5.5,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        swanna: {
            height: 1.3,
            weight: 24.2,
            illustrator: 'Mizue',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        salandit: {
            height: .6,
            weight: 4.8,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        salazzle: {
            height: 1.2,
            weight: 22.2,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-02-20T21:00:00Z'
        },
        cleffa: {
            height: .3,
            weight: 3,
            illustrator: 'Shibuzoh.',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        clefairy: {
            height: .6,
            weight: 7.5,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        clefable: {
            height: 1.3,
            weight: 40,
            illustrator: 'sui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        happiny: {
            height: .6,
            weight: 24.4,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        chansey: {
            height: 1.1,
            weight: 34.6,
            illustrator: 'Ryo Ueda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        azurill: {
            height: .2,
            weight: 2,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        marill: {
            height: .4,
            weight: 8.5,
            illustrator: 'Mizue',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        azumarill: {
            height: .8,
            weight: 28.5,
            illustrator: 'miki kudo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        ralts: {
            height: .4,
            weight: 6.6,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        kirlia: {
            height: .8,
            weight: 20.2,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        gardevoir: {
            height: 1.6,
            weight: 48.4,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        gallade: {
            height: 1.6,
            weight: 52,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        shroomish: {
            height: .4,
            weight: 4.5,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        breloom: {
            height: 1.2,
            weight: 39.2,
            illustrator: 'Suwama Chiaki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        carbink: {
            height: .3,
            weight: 5.7,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-03-19T21:00:00Z'
        },
        numel: {
            height: .7,
            weight: 24,
            illustrator: 'Tomokazu Komiya',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-04-22T21:00:00Z'
        },
        camerupt: {
            height: 1.9,
            weight: 220,
            illustrator: 'Akira Komayama',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-04-22T21:00:00Z'
        },
        larvesta: {
            height: 1.1,
            weight: 28.8,
            illustrator: 'kawayoo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-04-22T21:00:00Z'
        },
        volcarona: {
            height: 1.6,
            weight: 46,
            illustrator: 'Shin Nagasawa',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-04-22T21:00:00Z'
        },
        turtonator: {
            height: 2,
            weight: 212,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-04-22T21:00:00Z'
        },
        moltres: {
            height: 2,
            weight: 60,
            illustrator: 'Misa Tsutsui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-04-22T21:00:00Z'
        },
        lugia: {
            height: 5.2,
            weight: 216,
            illustrator: 'PLANETA Igarashi',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-04-22T21:00:00Z'
        },
        grimer: {
            height: .9,
            weight: 30,
            illustrator: 'Yuka Morii',
            adjustLargeArtX: 11,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-06T21:00:00Z'
        },
        muk: {
            height: 1.2,
            weight: 30,
            illustrator: 'Anesaki Dynamic',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-06T21:00:00Z'
        },
        spinarak: {
            height: .5,
            weight: 8.5,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-06T21:00:00Z'
        },
        ariados: {
            height: 1.1,
            weight: 33.5,
            illustrator: 'Suwama Chiaki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-06T21:00:00Z'
        },
        elekid: {
            height: .6,
            weight: 23.5,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-06T21:00:00Z'
        },
        electabuzz: {
            height: 1.1,
            weight: 30,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-06T21:00:00Z'
        },
        electivire: {
            height: 1.8,
            weight: 138.6,
            illustrator: 'kawayoo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-06T21:00:00Z'
        },
        zapdos: {
            height: 1.6,
            weight: 52.6,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-06T21:00:00Z'
        },
        delibird: {
            height: .9,
            weight: 16,
            illustrator: 'Yuka Morii',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-13T21:00:00Z'
        },
        snorunt: {
            height: .7,
            weight: 16.8,
            illustrator: 'Yuka Morii',
            adjustLargeArtX: 14,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-13T21:00:00Z'
        },
        glalie: {
            height: 1.5,
            weight: 256.5,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 12,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-13T21:00:00Z'
        },
        froslass: {
            height: 1.3,
            weight: 26.6,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-13T21:00:00Z'
        },
        sneasel: {
            height: .9,
            weight: 28,
            illustrator: 'sui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-13T21:00:00Z'
        },
        weavile: {
            height: 1.1,
            weight: 34,
            illustrator: 'Akira Komayama',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-13T21:00:00Z'
        },
        articuno: {
            height: 1.7,
            weight: 55.4,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 20,
            adjustLargeArtScale: .03,
            releaseDate: '2020-05-13T21:00:00Z'
        },
        zubat: {
            height: .8,
            weight: 7.5,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-20T21:00:00Z'
        },
        golbat: {
            height: 1.6,
            weight: 55,
            illustrator: 'Yukiko Baba',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-20T21:00:00Z'
        },
        crobat: {
            height: 1.8,
            weight: 75,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-20T21:00:00Z'
        },
        wobbuffet: {
            height: 1.3,
            weight: 28.5,
            illustrator: 'Akira Komayama',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-20T21:00:00Z'
        },
        inkay: {
            height: .4,
            weight: 3.5,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-20T21:00:00Z'
        },
        malamar: {
            height: 1.5,
            weight: 47,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-20T21:00:00Z'
        },
        mewtwo: {
            height: 2,
            weight: 122,
            illustrator: '5ban Graphics',
            adjustLargeArtX: -2,
            adjustLargeArtScale: .07,
            releaseDate: '2020-05-20T21:00:00Z'
        },
        mew: {
            height: .4,
            weight: 4,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-20T21:00:00Z'
        },
        lotad: {
            height: .5,
            weight: 2.6,
            illustrator: 'Saya Tsuruta',
            adjustLargeArtX: 22,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-27T21:00:00Z'
        },
        lombre: {
            height: 1.2,
            weight: 32.5,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-27T21:00:00Z'
        },
        ludicolo: {
            height: 1.5,
            weight: 55,
            illustrator: 'kawayoo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-27T21:00:00Z'
        },
        wingull: {
            height: .6,
            weight: 9.5,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-27T21:00:00Z'
        },
        pelipper: {
            height: 1.2,
            weight: 28,
            illustrator: 'Sumiyoshi Kizuki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-27T21:00:00Z'
        },
        mareep: {
            height: .6,
            weight: 7.8,
            illustrator: '0313',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-27T21:00:00Z'
        },
        flaaffy: {
            height: .8,
            weight: 13.3,
            illustrator: 'MAHOU',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-27T21:00:00Z'
        },
        ampharos: {
            height: 1.4,
            weight: 61.5,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-27T21:00:00Z'
        },
        raikou: {
            height: 1.9,
            weight: 178,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-27T21:00:00Z'
        },
        'ho-oh': {
            height: 3.8,
            weight: 199,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 16,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-27T21:00:00Z'
        },
        lunatone: {
            height: 1,
            weight: 168,
            illustrator: 'Hajime Kusajima',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-30T21:00:00Z'
        },
        solrock: {
            height: 1.2,
            weight: 154,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 13,
            adjustLargeArtScale: 0,
            releaseDate: '2020-05-30T21:00:00Z'
        },
        houndour: {
            height: .6,
            weight: 10.8,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-03T21:00:00Z'
        },
        houndoom: {
            height: 1.4,
            weight: 35,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-03T21:00:00Z'
        },
        torkoal: {
            height: .5,
            weight: 80.4,
            illustrator: 'sui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-03T21:00:00Z'
        },
        duskull: {
            height: .8,
            weight: 15,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-03T21:00:00Z'
        },
        dusclops: {
            height: 1.6,
            weight: 30.6,
            illustrator: 'Sumiyoshi Kizuki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-03T21:00:00Z'
        },
        dusknoir: {
            height: 2.2,
            weight: 106.6,
            illustrator: 'Eske Yoshinob',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-03T21:00:00Z'
        },
        entei: {
            height: 2.1,
            weight: 198,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-03T21:00:00Z'
        },
        meditite: {
            height: .6,
            weight: 11.2,
            illustrator: 'sui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-10T21:00:00Z'
        },
        medicham: {
            height: 1.3,
            weight: 31.5,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-10T21:00:00Z'
        },
        bronzor: {
            height: .5,
            weight: 60.5,
            illustrator: 'Akira Komayama',
            adjustLargeArtX: 11,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-10T21:00:00Z'
        },
        bronzong: {
            height: 1.3,
            weight: 187,
            illustrator: 'Kyoko Umemoto',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-10T21:00:00Z'
        },
        beldum: {
            height: .6,
            weight: 95.2,
            illustrator: 'Naoyo Kimura',
            adjustLargeArtX: 18,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-10T21:00:00Z'
        },
        metang: {
            height: 1.2,
            weight: 202.5,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-10T21:00:00Z'
        },
        metagross: {
            height: 1.6,
            weight: 550,
            illustrator: 'kirisAki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-10T21:00:00Z'
        },
        suicune: {
            height: 2,
            weight: 187,
            illustrator: 'Anesaki Dynamic',
            adjustLargeArtX: 0,
            adjustLargeArtScale: .07,
            releaseDate: '2020-06-10T21:00:00Z'
        },
        aipom: {
            height: .8,
            weight: 11.5,
            illustrator: 'Miki Tanaka',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-17T21:00:00Z'
        },
        ambipom: {
            height: 1.2,
            weight: 20.3,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-17T21:00:00Z'
        },
        sableye: {
            height: .5,
            weight: 11,
            illustrator: 'Aya Kusube',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-17T21:00:00Z'
        },
        baltoy: {
            height: .5,
            weight: 21.5,
            illustrator: 'Shigenori Negishi',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-17T21:00:00Z'
        },
        claydol: {
            height: 1.5,
            weight: 108,
            illustrator: 'Shin Nagasawa',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-17T21:00:00Z'
        },
        deoxys: {
            height: 1.7,
            weight: 60.8,
            illustrator: 'kawayoo',
            adjustLargeArtX: 24,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-17T21:00:00Z'
        },
        jirachi: {
            height: .3,
            weight: 1.1,
            illustrator: 'Satoshi Ohta',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-17T21:00:00Z'
        },
        cranidos: {
            height: .9,
            weight: 31.5,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-01T21:00:00Z'
        },
        rampardos: {
            height: 1.6,
            weight: 102.5,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-01T21:00:00Z'
        },
        shieldon: {
            height: .5,
            weight: 57,
            illustrator: 'Mizue',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-01T21:00:00Z'
        },
        bastiodon: {
            height: 1.3,
            weight: 149.5,
            illustrator: 'Hajime Kusajima',
            adjustLargeArtX: 16,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-01T21:00:00Z'
        },
        tyrunt: {
            height: .8,
            weight: 26,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-01T21:00:00Z'
        },
        tyrantrum: {
            height: 2.5,
            weight: 270,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 10,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-01T21:00:00Z'
        },
        aerodactyl: {
            height: 1.8,
            weight: 59,
            illustrator: 'Suwama Chiaki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-01T21:00:00Z'
        },
        groudon: {
            height: 3.5,
            weight: 950,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-01T21:00:00Z'
        },
        rayquaza: {
            height: 7,
            weight: 206.5,
            illustrator: 'Yoshinobu Saito',
            adjustLargeArtX: 16,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-01T21:00:00Z'
        },
        omanyte: {
            height: .4,
            weight: 7.5,
            illustrator: 'Aya Kusube',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-15T21:00:00Z'
        },
        omastar: {
            height: 1,
            weight: 35,
            illustrator: 'kirisAki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-15T21:00:00Z'
        },
        tirtouga: {
            height: .7,
            weight: 16.5,
            illustrator: 'HYOGONOSUKE',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-15T21:00:00Z'
        },
        carracosta: {
            height: 1.2,
            weight: 81,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-15T21:00:00Z'
        },
        amaura: {
            height: 1.3,
            weight: 25.2,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-15T21:00:00Z'
        },
        aurorus: {
            height: 2.7,
            weight: 225,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-15T21:00:00Z'
        },
        kyogre: {
            height: 4.5,
            weight: 352,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-15T21:00:00Z'
        },
        corsola: {
            height: .6,
            weight: 5,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-06-30T21:00:00Z'
        },
        jynx: {
            height: 1.4,
            weight: 40.6,
            illustrator: 'Tomokazu Komiya',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-29T21:00:00Z'
        },
        slakoth: {
            height: .8,
            weight: 24,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-29T21:00:00Z'
        },
        vigoroth: {
            height: 1.4,
            weight: 46.5,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-29T21:00:00Z'
        },
        slaking: {
            height: 2,
            weight: 130.5,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-29T21:00:00Z'
        },
        carvanha: {
            height: .8,
            weight: 20.8,
            illustrator: 'Hasuno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-29T21:00:00Z'
        },
        sharpedo: {
            height: 1.8,
            weight: 88.8,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-29T21:00:00Z'
        },
        celebi: {
            height: .6,
            weight: 5,
            illustrator: 'Mitsuhiro Arita',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-29T21:00:00Z'
        },
        kyurem: {
            height: 3,
            weight: 325,
            illustrator: 'Ryo Ueda',
            adjustLargeArtX: 3,
            adjustLargeArtScale: .05,
            releaseDate: '2020-07-29T21:00:00Z'
        },
        togedemaru: {
            height: .3,
            weight: 3.3,
            illustrator: 'Megumi Mizutani',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-07-31T21:00:00Z'
        },
        scyther: {
            height: 1.5,
            weight: 56,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-05T21:00:00Z'
        },
        scizor: {
            height: 1.8,
            weight: 118,
            illustrator: 'Daisuke Ito',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-05T21:00:00Z'
        },
        lileep: {
            height: 1,
            weight: 23.8,
            illustrator: 'Suwama Chiaki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-05T21:00:00Z'
        },
        cradily: {
            height: 1.5,
            weight: 60.4,
            illustrator: 'otumami',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-05T21:00:00Z'
        },
        togepi: {
            height: .3,
            weight: 1.5,
            illustrator: '',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-05T21:00:00Z'
        },
        togetic: {
            height: .6,
            weight: 3.2,
            illustrator: '',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-05T21:00:00Z'
        },
        togekiss: {
            height: 1.5,
            weight: 38,
            illustrator: '',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-05T21:00:00Z'
        },
        xerneas: {
            height: 3,
            weight: 215,
            illustrator: 'sui',
            adjustLargeArtX: -1,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-05T21:00:00Z'
        },
        volcanion: {
            height: 1.7,
            weight: 195,
            illustrator: 'TOKIYA',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-05T21:00:00Z'
        },
        staryu: {
            height: .8,
            weight: 34.5,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-12T21:00:00Z'
        },
        starmie: {
            height: 1.1,
            weight: 80,
            illustrator: 'HiRON',
            adjustLargeArtX: 14,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-12T21:00:00Z'
        },
        wailmer: {
            height: 2,
            weight: 130,
            illustrator: 'Miki Tanaka',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-12T21:00:00Z'
        },
        wailord: {
            height: 14.5,
            weight: 398,
            illustrator: 'Ryo Ueda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-12T21:00:00Z'
        },
        alomomola: {
            height: 1.2,
            weight: 31.6,
            illustrator: 'Miki Tanaka',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-12T21:00:00Z'
        },
        regice: {
            height: 1.8,
            weight: 175,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-12T21:00:00Z'
        },
        genesect: {
            height: 1.5,
            weight: 82.5,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-12T21:00:00Z'
        },
        swablu: {
            height: .4,
            weight: 1.2,
            illustrator: '',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-19T21:00:00Z'
        },
        altaria: {
            height: 1.1,
            weight: 20.6,
            illustrator: '',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-19T21:00:00Z'
        },
        archen: {
            height: .5,
            weight: 9.5,
            illustrator: '313',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-19T21:00:00Z'
        },
        archeops: {
            height: 1.4,
            weight: 32,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-19T21:00:00Z'
        },
        bagon: {
            height: .6,
            weight: 42.1,
            illustrator: 'Kagemaru Himeno',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-19T21:00:00Z'
        },
        shelgon: {
            height: 1.1,
            weight: 110.5,
            illustrator: 'sui',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-19T21:00:00Z'
        },
        salamence: {
            height: 1.5,
            weight: 102.6,
            illustrator: 'Naoki Saito',
            adjustLargeArtX: 14,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-19T21:00:00Z'
        },
        yveltal: {
            height: 5.8,
            weight: 203,
            illustrator: '5ban Graphics',
            adjustLargeArtX: 5,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-19T21:00:00Z'
        },
        geodude: {
            height: .4,
            weight: 20,
            illustrator: 'Motofumi Fujiwara',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-26T21:00:00Z'
        },
        graveler: {
            height: 1,
            weight: 105,
            illustrator: 'Ayaka Yoshida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-26T21:00:00Z'
        },
        golem: {
            height: 1.4,
            weight: 300,
            illustrator: 'Hajime Kusajima',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-26T21:00:00Z'
        },
        gligar: {
            height: 1.1,
            weight: 64.8,
            illustrator: 'Sanosuke Sakuma',
            adjustLargeArtX: 10,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-26T21:00:00Z'
        },
        gliscor: {
            height: 2,
            weight: 42.5,
            illustrator: 'Kent Kanetsuna',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-26T21:00:00Z'
        },
        larvitar: {
            height: .6,
            weight: 72,
            illustrator: 'Masakazu Fukuda',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-26T21:00:00Z'
        },
        pupitar: {
            height: 1.5,
            weight: 152,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 21,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-26T21:00:00Z'
        },
        tyranitar: {
            height: 2,
            weight: 202,
            illustrator: 'Satoshi Shirai',
            adjustLargeArtX: 23,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-26T21:00:00Z'
        },
        regirock: {
            height: 1.7,
            weight: 230,
            illustrator: 'Ayaka Yoshida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-08-26T21:00:00Z'
        },
        kabuto: {
            height: .5,
            weight: 11.5,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-02T21:00:00Z'
        },
        kabutops: {
            height: 1.3,
            weight: 40.5,
            illustrator: 'Kyoko Umemoto',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-02T21:00:00Z'
        },
        anorith: {
            height: .7,
            weight: 12.5,
            illustrator: 'Shigenori Negishi',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-02T21:00:00Z'
        },
        armaldo: {
            height: 1.5,
            weight: 68.2,
            illustrator: 'Satoshi Shirai',
            adjustLargeArtX: 16,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-02T21:00:00Z'
        },
        gible: {
            height: .7,
            weight: 20.5,
            illustrator: 'Kanako Eo',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-02T21:00:00Z'
        },
        gabite: {
            height: 1.4,
            weight: 56,
            illustrator: 'Sumiyoshi Kizuki',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-02T21:00:00Z'
        },
        garchomp: {
            height: 1.9,
            weight: 95,
            illustrator: 'Akira Komayama',
            adjustLargeArtX: 22,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-02T21:00:00Z'
        },
        zygarde: {
            height: 5,
            weight: 305,
            illustrator: 'Misa Tsutsui',
            adjustLargeArtX: 12,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-02T21:00:00Z'
        },
        skarmory: {
            height: 1.7,
            weight: 50.5,
            illustrator: 'Hajime Kusajima',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-09T21:00:00Z'
        },
        aron: {
            height: .4,
            weight: 60,
            illustrator: 'Atsuko Nishida',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-09T21:00:00Z'
        },
        lairon: {
            height: .9,
            weight: 120,
            illustrator: 'Yukiko Baba',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-09T21:00:00Z'
        },
        aggron: {
            height: 2.1,
            weight: 360,
            illustrator: 'Satoshi Shirai',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-09T21:00:00Z'
        },
        porygon: {
            height: .8,
            weight: 36.5,
            illustrator: 'Kent Kanetsuna',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-09T21:00:00Z'
        },
        porygon2: {
            height: .6,
            weight: 32.5,
            illustrator: 'Midori Harada',
            adjustLargeArtX: 25,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-09T21:00:00Z'
        },
        porygonz: {
            height: .9,
            weight: 34,
            illustrator: 'Kent Kanetsuna',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-09T21:00:00Z'
        },
        registeel: {
            height: 1.9,
            weight: 205,
            illustrator: 'Kouki Saitou',
            adjustLargeArtX: 0,
            adjustLargeArtScale: 0,
            releaseDate: '2020-09-09T21:00:00Z'
        }
    },
    'src/conf/staticData/raidAi.json': {
        moltres: [{
            id: 'larvesta',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'numel',
            start: 1,
            end: 1
        }, {
            id: 'ponyta',
            start: 1,
            end: 1
        }, {
            id: 'spearow',
            start: 1,
            end: 1
        }, {
            id: 'magcargo',
            start: 1,
            end: 3,
            ability: 0
        }, {
            id: 'fearow',
            start: 2,
            end: 3
        }, {
            id: 'larvesta',
            start: 2,
            end: 3,
            ability: 0
        }, {
            id: 'morelull',
            start: 2,
            end: 3
        }, {
            id: 'rapidash',
            start: 2,
            end: 3
        }, {
            id: 'pyroar',
            start: 3,
            end: 3
        }, {
            id: 'camerupt',
            start: 3,
            end: 14
        }, {
            id: 'volcarona',
            start: 4,
            end: 6
        }, {
            id: 'exeggutor',
            start: 4,
            end: 10
        }, {
            id: 'growlithe',
            start: 4,
            end: 10,
            ability: 0
        }, {
            id: 'machamp',
            start: 4,
            end: 10
        }, {
            id: 'shiinotic',
            start: 4,
            end: 15
        }, {
            id: 'turtonator',
            start: 4,
            end: 15
        }, {
            id: 'typhlosion',
            start: 4,
            end: 15,
            ability: 2
        }, {
            id: 'moltres',
            start: 5,
            end: 15
        }, {
            id: 'arcanine',
            start: 7,
            end: 15
        }, {
            id: 'quilava',
            start: 7,
            end: 15,
            ability: 2
        }, {
            id: 'volcarona',
            start: 7,
            end: 15,
            ability: 1
        }, {
            id: 'arcanine',
            start: 11,
            end: 15
        }, {
            id: 'breloom',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'lugia',
            start: 11,
            end: 15
        }, {
            id: 'moltres',
            start: 11,
            end: 15
        }, {
            id: 'quilava',
            start: 11,
            end: 15,
            ability: 2
        }, {
            id: 'rhydon',
            start: 11,
            end: 15
        }, {
            id: 'rhyperior',
            start: 11,
            end: 15
        }, {
            id: 'tropius',
            start: 11,
            end: 15
        }, {
            id: 'typhlosion',
            start: 11,
            end: 15,
            ability: 2
        }, {
            id: 'donphan',
            start: 15,
            end: 15
        }],
        zapdos: [{
            id: 'elekid',
            start: 1,
            end: 1
        }, {
            id: 'grimer',
            start: 1,
            end: 1,
            ability: 0
        }, {
            id: 'solosis',
            start: 1,
            end: 1
        }, {
            id: 'diggersby',
            start: 1,
            end: 3
        }, {
            id: 'spinarak',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'spinarak',
            start: 2,
            end: 3,
            ability: 0
        }, {
            id: 'pikachu',
            start: 2,
            end: 3
        }, {
            id: 'duosion',
            start: 2,
            end: 6
        }, {
            id: 'electabuzz',
            start: 2,
            end: 6,
            ability: 0
        }, {
            id: 'magnezone',
            start: 4,
            end: 6
        }, {
            id: 'electivire',
            start: 7,
            end: 10
        }, {
            id: 'raichu',
            start: 4,
            end: 14
        }, {
            id: 'zebstrika',
            start: 11,
            end: 14
        }, {
            id: 'muk',
            start: 3,
            end: 15,
            ability: 0
        }, {
            id: 'slowbro',
            start: 3,
            end: 15
        }, {
            id: 'ariados',
            start: 4,
            end: 15,
            ability: 0
        }, {
            id: 'maractus',
            start: 4,
            end: 15
        }, {
            id: 'torterra',
            start: 4,
            end: 15,
            ability: 1
        }, {
            id: 'zapdos',
            start: 5,
            end: 15
        }, {
            id: 'grotle',
            start: 7,
            end: 15,
            ability: 1
        }, {
            id: 'manectric',
            start: 7,
            end: 15,
            ability: 0
        }, {
            id: 'electivire',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'forretress',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'grotle',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'lugia',
            start: 11,
            end: 15
        }, {
            id: 'zapdos',
            start: 11,
            end: 15
        }, {
            id: 'zebstrika',
            start: 15,
            end: 15,
            ability: 1
        }, {
            id: 'jolteon',
            start: 15,
            end: 15
        }],
        articuno: [{
            id: 'magikarp',
            start: 1,
            end: 1
        }, {
            id: 'sneasel',
            start: 1,
            end: 1,
            ability: 3
        }, {
            id: 'kingdra',
            start: 1,
            end: 3,
            ability: 0
        }, {
            id: 'shellder',
            start: 1,
            end: 3,
            ability: 0
        }, {
            id: 'snorunt',
            start: 1,
            end: 3,
            ability: 0
        }, {
            id: 'sneasel',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'delibird',
            start: 2,
            end: 15
        }, {
            id: 'milotic',
            start: 3,
            end: 3
        }, {
            id: 'gyarados',
            start: 3,
            end: 6
        }, {
            id: 'weavile',
            start: 3,
            end: 6
        }, {
            id: 'poliwrath',
            start: 4,
            end: 10
        }, {
            id: 'cloyster',
            start: 4,
            end: 15,
            ability: 1
        }, {
            id: 'empoleon',
            start: 4,
            end: 15
        }, {
            id: 'lapras',
            start: 4,
            end: 15
        }, {
            id: 'quagsire',
            start: 4,
            end: 15
        }, {
            id: 'articuno',
            start: 5,
            end: 15
        }, {
            id: 'prinplup',
            start: 7,
            end: 10
        }, {
            id: 'froslass',
            start: 7,
            end: 14
        }, {
            id: 'weavile',
            start: 7,
            end: 15,
            ability: 0
        }, {
            id: 'articuno',
            start: 11,
            end: 15
        }, {
            id: 'dragonair',
            start: 11,
            end: 15
        }, {
            id: 'dragonite',
            start: 11,
            end: 15
        }, {
            id: 'empoleon',
            start: 11,
            end: 15
        }, {
            id: 'lugia',
            start: 11,
            end: 15
        }, {
            id: 'mismagius',
            start: 11,
            end: 15
        }, {
            id: 'prinplup',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'prinplup',
            start: 11,
            end: 15
        }, {
            id: 'steelix',
            start: 15,
            end: 15
        }],
        mewtwo: [{
            id: 'inkay',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'oddish',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'psyduck',
            start: 1,
            end: 2,
            ability: 1
        }, {
            id: 'zubat',
            start: 1,
            end: 2
        }, {
            id: 'wobbuffet',
            start: 1,
            end: 14
        }, {
            id: 'eevee',
            start: 2,
            end: 3
        }, {
            id: 'inkay',
            start: 2,
            end: 3,
            ability: 0
        }, {
            id: 'golbat',
            start: 3,
            end: 3,
            ability: 0
        }, {
            id: 'ninetales',
            start: 3,
            end: 3,
            ability: 0
        }, {
            id: 'vileplume',
            start: 3,
            end: 3,
            ability: 0
        }, {
            id: 'golduck',
            start: 3,
            end: 15,
            ability: 0
        }, {
            id: 'crobat',
            start: 4,
            end: 6,
            ability: 0
        }, {
            id: 'machamp',
            start: 4,
            end: 10
        }, {
            id: 'vaporeon',
            start: 4,
            end: 10
        }, {
            id: 'farfetchd',
            start: 4,
            end: 15
        }, {
            id: 'greninja',
            start: 4,
            end: 15,
            ability: 0
        }, {
            id: 'swanna',
            start: 4,
            end: 15,
            ability: 1
        }, {
            id: 'mewtwo',
            start: 5,
            end: 15
        }, {
            id: 'crobat',
            start: 7,
            end: 15
        }, {
            id: 'frogadier',
            start: 7,
            end: 15,
            ability: 0
        }, {
            id: 'chansey',
            start: 11,
            end: 15
        }, {
            id: 'clefable',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'frogadier',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'gallade',
            start: 11,
            end: 15
        }, {
            id: 'greninja',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'malamar',
            start: 11,
            end: 15
        }, {
            id: 'mew',
            start: 11,
            end: 15
        }, {
            id: 'mewtwo',
            start: 11,
            end: 15
        }, {
            id: 'slowking',
            start: 15,
            end: 15
        }],
        raikou: [{
            id: 'jumpluff',
            start: 1,
            end: 1,
            ability: 3
        }, {
            id: 'wingull',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'lotad',
            start: 1,
            end: 2
        }, {
            id: 'mareep',
            start: 1,
            end: 2
        }, {
            id: 'wooper',
            start: 1,
            end: 2
        }, {
            id: 'wingull',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'jumpluff',
            start: 2,
            end: 3,
            ability: 0
        }, {
            id: 'flaaffy',
            start: 3,
            end: 3,
            ability: 0
        }, {
            id: 'lombre',
            start: 3,
            end: 3,
            ability: 0
        }, {
            id: 'gyarados',
            start: 3,
            end: 6,
            ability: 0
        }, {
            id: 'ludicolo',
            start: 3,
            end: 15
        }, {
            id: 'pelipper',
            start: 3,
            end: 15
        }, {
            id: 'quagsire',
            start: 3,
            end: 15
        }, {
            id: 'heliolisk',
            start: 4,
            end: 10
        }, {
            id: 'ampharos',
            start: 4,
            end: 15
        }, {
            id: 'ampharos',
            start: 4,
            end: 15
        }, {
            id: 'decidueye',
            start: 4,
            end: 15
        }, {
            id: 'decidueye',
            start: 4,
            end: 15,
            ability: 2
        }, {
            id: 'slowking',
            start: 4,
            end: 15
        }, {
            id: 'raikou',
            start: 5,
            end: 15
        }, {
            id: 'raichu',
            start: 7,
            end: 14
        }, {
            id: 'dartrix',
            start: 7,
            end: 15,
            ability: 2
        }, {
            id: 'dartrix',
            start: 11,
            end: 15,
            ability: 2
        }, {
            id: 'decidueye',
            start: 11,
            end: 15
        }, {
            id: 'decidueye',
            start: 11,
            end: 15,
            ability: 2
        }, {
            id: 'ho-oh',
            start: 11,
            end: 15
        }, {
            id: 'ho-oh',
            start: 11,
            end: 15
        }, {
            id: 'manectric',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'raikou',
            start: 11,
            end: 15
        }, {
            id: 'swanna',
            start: 11,
            end: 15
        }, {
            id: 'tropius',
            start: 11,
            end: 15
        }],
        entei: [{
            id: 'houndour',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'fletchling',
            start: 1,
            end: 2
        }, {
            id: 'gastly',
            start: 1,
            end: 2
        }, {
            id: 'litleo',
            start: 1,
            end: 2
        }, {
            id: 'ninetales',
            start: 1,
            end: 3
        }, {
            id: 'houndour',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'fletchinder',
            start: 3,
            end: 6
        }, {
            id: 'pyroar',
            start: 3,
            end: 6
        }, {
            id: 'torkoal',
            start: 3,
            end: 14,
            ability: 0
        }, {
            id: 'haunter',
            start: 3,
            end: 15,
            ability: 0
        }, {
            id: 'magmar',
            start: 3,
            end: 15
        }, {
            id: 'dusknoir',
            start: 4,
            end: 10
        }, {
            id: 'houndoom',
            start: 4,
            end: 10
        }, {
            id: 'delphox',
            start: 4,
            end: 15,
            ability: 0
        }, {
            id: 'entei',
            start: 5,
            end: 15
        }, {
            id: 'braixen',
            start: 7,
            end: 15,
            ability: 0
        }, {
            id: 'chansey',
            start: 7,
            end: 15
        }, {
            id: 'onix',
            start: 7,
            end: 15,
            ability: 0
        }, {
            id: 'braixen',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'delphox',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'dusknoir',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'entei',
            start: 11,
            end: 15
        }, {
            id: 'ho-oh',
            start: 11,
            end: 15
        }, {
            id: 'houndoom',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'mimikyu',
            start: 11,
            end: 15
        }, {
            id: 'mismagius',
            start: 11,
            end: 15
        }],
        suicune: [{
            id: 'bronzor',
            start: 1,
            end: 1
        }, {
            id: 'beldum',
            start: 1,
            end: 2
        }, {
            id: 'diggersby',
            start: 1,
            end: 2
        }, {
            id: 'poliwag',
            start: 1,
            end: 2
        }, {
            id: 'meditite',
            start: 1,
            end: 3
        }, {
            id: 'bronzor',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'pidgeotto',
            start: 3,
            end: 3,
            ability: 0
        }, {
            id: 'duosion',
            start: 3,
            end: 6,
            ability: 0
        }, {
            id: 'metang',
            start: 3,
            end: 6
        }, {
            id: 'diggersby',
            start: 3,
            end: 14,
            ability: 0
        }, {
            id: 'bronzong',
            start: 3,
            end: 15,
            ability: 0
        }, {
            id: 'poliwhirl',
            start: 3,
            end: 15,
            ability: 0
        }, {
            id: 'gengar',
            start: 4,
            end: 6,
            ability: 0
        }, {
            id: 'medicham',
            start: 4,
            end: 6
        }, {
            id: 'swampert',
            start: 4,
            end: 15
        }, {
            id: 'suicune',
            start: 5,
            end: 15
        }, {
            id: 'dragonair',
            start: 7,
            end: 15
        }, {
            id: 'marshtomp',
            start: 7,
            end: 15,
            ability: 2
        }, {
            id: 'medicham',
            start: 7,
            end: 15,
            ability: 1
        }, {
            id: 'metagross',
            start: 7,
            end: 15
        }, {
            id: 'xatu',
            start: 7,
            end: 15,
            ability: 1
        }, {
            id: 'ho-oh',
            start: 11,
            end: 15
        }, {
            id: 'marshtomp',
            start: 11,
            end: 15,
            ability: 2
        }, {
            id: 'quagsire',
            start: 11,
            end: 15
        }, {
            id: 'steelix',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'suicune',
            start: 11,
            end: 15
        }, {
            id: 'swampert',
            start: 11,
            end: 15,
            ability: 2
        }],
        deoxys: [{
            id: 'aipom',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'baltoy',
            start: 1,
            end: 1
        }, {
            id: 'sableye',
            start: 1,
            end: 1
        }, {
            id: 'shroomish',
            start: 1,
            end: 1
        }, {
            id: 'butterfree',
            start: 1,
            end: 3
        }, {
            id: 'aipom',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'baltoy',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'shroomish',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'sableye',
            start: 2,
            end: 6
        }, {
            id: 'oddish',
            start: 3,
            end: 3,
            ability: 0
        }, {
            id: 'breloom',
            start: 3,
            end: 6
        }, {
            id: 'ambipom',
            start: 3,
            end: 14
        }, {
            id: 'claydol',
            start: 3,
            end: 15,
            ability: 0
        }, {
            id: 'shuckle',
            start: 3,
            end: 15
        }, {
            id: 'machamp',
            start: 4,
            end: 10
        }, {
            id: 'bellossom',
            start: 4,
            end: 15,
            ability: 0
        }, {
            id: 'sceptile',
            start: 4,
            end: 15
        }, {
            id: 'sceptile',
            start: 4,
            end: 15,
            ability: 2
        }, {
            id: 'deoxys',
            start: 5,
            end: 15
        }, {
            id: 'breloom',
            start: 7,
            end: 15,
            ability: 1
        }, {
            id: 'grovyle',
            start: 7,
            end: 15
        }, {
            id: 'sableye',
            start: 7,
            end: 15,
            ability: 1
        }, {
            id: 'deoxys',
            start: 11,
            end: 15
        }, {
            id: 'forretress',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'gallade',
            start: 11,
            end: 15
        }, {
            id: 'gallade',
            start: 11,
            end: 15
        }, {
            id: 'grovyle',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'jirachi',
            start: 11,
            end: 15
        }, {
            id: 'sceptile',
            start: 11,
            end: 15
        }, {
            id: 'sceptile',
            start: 11,
            end: 15
        }, {
            id: 'shiinotic',
            start: 11,
            end: 15
        }],
        regice: [{
            id: 'cubone',
            start: 1,
            end: 1
        }, {
            id: 'horsea',
            start: 1,
            end: 1
        }, {
            id: 'staryu',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'staryu',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'stunfisk',
            start: 2,
            end: 15
        }, {
            id: 'wailmer',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'milotic',
            start: 1,
            end: 1
        }, {
            id: 'seadra',
            start: 2,
            end: 3
        }, {
            id: 'marowak',
            start: 2,
            end: 10
        }, {
            id: 'carbink',
            start: 11,
            end: 15
        }, {
            id: 'swanna',
            start: 15,
            end: 15
        }, {
            id: 'ursaring',
            start: 11,
            end: 15
        }, {
            id: 'wailord',
            start: 2,
            end: 2
        }, {
            id: 'wailord',
            start: 3,
            end: 15
        }, {
            id: 'alomomola',
            start: 3,
            end: 15
        }, {
            id: 'steelix',
            start: 11,
            end: 15
        }, {
            id: 'onix',
            start: 3,
            end: 10
        }, {
            id: 'starmie',
            start: 3,
            end: 14,
            ability: 0
        }, {
            id: 'politoed',
            start: 4,
            end: 15
        }, {
            id: 'lapras',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'dewott',
            start: 7,
            end: 15
        }, {
            id: 'dewott',
            start: 11,
            end: 15
        }, {
            id: 'samurott',
            start: 4,
            end: 10
        }, {
            id: 'samurott',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'samurott',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'genesect',
            start: 11,
            end: 15
        }, {
            id: 'regice',
            start: 5,
            end: 15
        }, {
            id: 'regice',
            start: 11,
            end: 15
        }],
        groudon: [{
            id: 'kricketot',
            start: 1,
            end: 1
        }, {
            id: 'tyrunt',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'tyrunt',
            start: 2,
            end: 3
        }, {
            id: 'shieldon',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'shieldon',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'cranidos',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'cranidos',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'beedrill',
            start: 1,
            end: 3
        }, {
            id: 'kricketune',
            start: 2,
            end: 15
        }, {
            id: 'stunfisk',
            start: 3,
            end: 14
        }, {
            id: 'shuckle',
            start: 3,
            end: 15
        }, {
            id: 'meowth',
            start: 15,
            end: 15
        }, {
            id: 'marowak',
            start: 11,
            end: 15
        }, {
            id: 'rampardos',
            start: 3,
            end: 15
        }, {
            id: 'bastiodon',
            start: 3,
            end: 15
        }, {
            id: 'aerodactyl',
            start: 11,
            end: 14
        }, {
            id: 'aerodactyl',
            start: 15,
            end: 15,
            ability: 1
        }, {
            id: 'heracross',
            start: 4,
            end: 10
        }, {
            id: 'heracross',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'tyrantrum',
            start: 4,
            end: 10
        }, {
            id: 'tyrantrum',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'charmeleon',
            start: 7,
            end: 15
        }, {
            id: 'charizard',
            start: 4,
            end: 15
        }, {
            id: 'rayquaza',
            start: 11,
            end: 15
        }, {
            id: 'groudon',
            start: 5,
            end: 15
        }, {
            id: 'groudon',
            start: 11,
            end: 15
        }],
        kyogre: [{
            id: 'tirtouga',
            start: 1,
            end: 1
        }, {
            id: 'amaura',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'amaura',
            start: 2,
            end: 3
        }, {
            id: 'omanyte',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'omanyte',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'wooper',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'wooper',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'milotic',
            start: 1,
            end: 3
        }, {
            id: 'carracosta',
            start: 2,
            end: 10
        }, {
            id: 'carracosta',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'stunfisk',
            start: 3,
            end: 14
        }, {
            id: 'quagsire',
            start: 3,
            end: 15,
            ability: 0
        }, {
            id: 'salazzle',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'solrock',
            start: 15,
            end: 15
        }, {
            id: 'gyarados',
            start: 3,
            end: 10
        }, {
            id: 'cloyster',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'omastar',
            start: 3,
            end: 15,
            ability: 0
        }, {
            id: 'aerodactyl',
            start: 11,
            end: 14
        }, {
            id: 'aerodactyl',
            start: 15,
            end: 15,
            ability: 1
        }, {
            id: 'lapras',
            start: 4,
            end: 10
        }, {
            id: 'lapras',
            start: 11,
            end: 15,
            ability: 1
        }, {
            id: 'aurorus',
            start: 4,
            end: 15
        }, {
            id: 'croconaw',
            start: 7,
            end: 15
        }, {
            id: 'feraligatr',
            start: 4,
            end: 15
        }, {
            id: 'rayquaza',
            start: 11,
            end: 15
        }, {
            id: 'kyogre',
            start: 5,
            end: 15
        }, {
            id: 'kyogre',
            start: 11,
            end: 15
        }],
        celebi: [{
            id: 'carvanha',
            start: 1,
            end: 1,
            ability: 2
        }, {
            id: 'oddish',
            start: 1,
            end: 1,
            ability: 1
        }, {
            id: 'wooper',
            start: 1,
            end: 1
        }, {
            id: 'slakoth',
            start: 1,
            end: 2
        }, {
            id: 'carvanha',
            start: 2,
            end: 2
        }, {
            id: 'oddish',
            start: 2,
            end: 2,
            ability: 0
        }, {
            id: 'butterfree',
            start: 1,
            end: 3
        }, {
            id: 'poliwhirl',
            start: 3,
            end: 3
        }, {
            id: 'quagsire',
            start: 2,
            end: 6
        }, {
            id: 'politoed',
            start: 4,
            end: 10
        }, {
            id: 'azumarill',
            start: 4,
            end: 10
        }, {
            id: 'vileplume',
            start: 3,
            end: 10
        }, {
            id: 'quagsire',
            start: 7,
            end: 14,
            ability: 1
        }, {
            id: 'jynx',
            start: 3,
            end: 15
        }, {
            id: 'sharpedo',
            start: 3,
            end: 15
        }, {
            id: 'vigoroth',
            start: 3,
            end: 15
        }, {
            id: 'serperior',
            start: 4,
            end: 15,
            ability: 2
        }, {
            id: 'celebi',
            start: 5,
            end: 15
        }, {
            id: 'servine',
            start: 7,
            end: 15,
            ability: 2
        }, {
            id: 'tropius',
            start: 11,
            end: 15,
            ability: 0
        }, {
            id: 'kyurem',
            start: 11,
            end: 15
        }, {
            id: 'celebi',
            start: 11,
            end: 15
        }, {
            id: 'poliwrath',
            start: 11,
            end: 15
        }, {
            id: 'serperior',
            start: 11,
            end: 15,
            ability: 2
        }, {
            id: 'servine',
            start: 11,
            end: 15,
            ability: 2
        }, {
            id: 'shuckle',
            start: 11,
            end: 15
        }, {
            id: 'slaking',
            start: 11,
            end: 15
        }, {
            id: 'steelix',
            start: 15,
            end: 15
        }]
    },
    'src/conf/staticData/raidRankingRewards.json': {
        best: {
            0: {
                reward: 'raidMedal',
                amount: 1
            },
            1: {
                reward: 'raidMedal',
                amount: 1
            }
        },
        damages: {
            0: {
                reward: 'raidMedal',
                amount: 2
            },
            1: {
                reward: 'raidMedal',
                amount: 1
            },
            2: {
                reward: 'raidMedal',
                amount: 1
            }
        }
    },
    'src/conf/staticData/raidStages.json': {
        1: {
            stage: 1,
            hp: 500,
            packReq: 500,
            minGym: 2,
            boss: {
                1: 100,
                2: 0,
                3: 0,
                4: 0,
                5: 0
            },
            tier: {
                1: 5,
                2: 1,
                3: 0
            },
            raidPack: 'raidPack1'
        },
        2: {
            stage: 2,
            hp: 1e3,
            packReq: 1e3,
            minGym: 3,
            boss: {
                1: 0,
                2: 100,
                3: 0,
                4: 0,
                5: 0
            },
            tier: {
                1: 4,
                2: 2,
                3: 0
            },
            raidPack: 'raidPack2'
        },
        3: {
            stage: 3,
            hp: 2e3,
            packReq: 2e3,
            minGym: 4,
            boss: {
                1: 0,
                2: 0,
                3: 100,
                4: 0,
                5: 0
            },
            tier: {
                1: 3,
                2: 2,
                3: 1
            },
            raidPack: 'raidPack3'
        },
        4: {
            stage: 4,
            hp: 2e4,
            packReq: 2500,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 0,
                4: 100,
                5: 0
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack4',
            raidMedal: 'raidMedal4'
        },
        5: {
            stage: 5,
            hp: 4e4,
            packReq: 5e3,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 50,
                4: 50,
                5: 0
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack5',
            raidMedal: 'raidMedal5'
        },
        6: {
            stage: 6,
            hp: 6e4,
            packReq: 7500,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 50,
                4: 50,
                5: 0
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack6',
            raidMedal: 'raidMedal6'
        },
        7: {
            stage: 7,
            hp: 8e4,
            packReq: 1e4,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 45,
                4: 50,
                5: 5
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack7',
            raidMedal: 'raidMedal7'
        },
        8: {
            stage: 8,
            hp: 1e5,
            packReq: 12500,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 40,
                4: 50,
                5: 10
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack7',
            raidMedal: 'raidMedal7'
        },
        9: {
            stage: 9,
            hp: 12e4,
            packReq: 15e3,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 35,
                4: 50,
                5: 15
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack7',
            raidMedal: 'raidMedal7'
        },
        10: {
            stage: 10,
            hp: 14e4,
            packReq: 17500,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 30,
                4: 50,
                5: 20
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack7',
            raidMedal: 'raidMedal7'
        },
        11: {
            stage: 11,
            hp: 16e4,
            packReq: 2e4,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 25,
                4: 50,
                5: 25
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack11',
            raidMedal: 'raidMedal11'
        },
        12: {
            stage: 12,
            hp: 2e5,
            packReq: 25e3,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 25,
                4: 50,
                5: 25
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack11',
            raidMedal: 'raidMedal11'
        },
        13: {
            stage: 13,
            hp: 24e4,
            packReq: 3e4,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 25,
                4: 50,
                5: 25
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack11',
            raidMedal: 'raidMedal11'
        },
        14: {
            stage: 14,
            hp: 28e4,
            packReq: 35e3,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 25,
                4: 50,
                5: 25
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack11',
            raidMedal: 'raidMedal11'
        },
        15: {
            stage: 15,
            hp: 32e4,
            packReq: 4e4,
            minGym: 5,
            boss: {
                1: 0,
                2: 0,
                3: 25,
                4: 50,
                5: 25
            },
            tier: {
                1: 2,
                2: 2,
                3: 2
            },
            raidPack: 'raidPack15',
            raidMedal: 'raidMedal15'
        }
    },
    'src/conf/staticData/raids.json': {
        3: {
            id: 'celebi',
            boss: {
                1: 'snivy',
                2: 'servine',
                3: 'serperior',
                4: 'celebi',
                5: 'kyurem'
            },
            arena: 13
        },
        4: {
            id: 'moltres',
            boss: {
                1: 'cyndaquil',
                2: 'quilava',
                3: 'typhlosion',
                4: 'moltres',
                5: 'lugia'
            },
            arena: 1
        },
        5: {
            id: 'zapdos',
            boss: {
                1: 'turtwig',
                2: 'grotle',
                3: 'torterra',
                4: 'zapdos',
                5: 'lugia'
            },
            arena: 3
        },
        6: {
            id: 'articuno',
            boss: {
                1: 'piplup',
                2: 'prinplup',
                3: 'empoleon',
                4: 'articuno',
                5: 'lugia'
            },
            arena: 2
        },
        7: {
            id: 'mewtwo',
            boss: {
                1: 'froakie',
                2: 'frogadier',
                3: 'greninja',
                4: 'mewtwo',
                5: 'mew'
            },
            arena: 4
        },
        8: {
            id: 'raikou',
            boss: {
                1: 'rowlet',
                2: 'dartrix',
                3: 'decidueye',
                4: 'raikou',
                5: 'ho-oh'
            },
            arena: 9
        },
        9: {
            id: 'entei',
            boss: {
                1: 'fennekin',
                2: 'braixen',
                3: 'delphox',
                4: 'entei',
                5: 'ho-oh'
            },
            arena: 11
        },
        10: {
            id: 'suicune',
            boss: {
                1: 'mudkip',
                2: 'marshtomp',
                3: 'swampert',
                4: 'suicune',
                5: 'ho-oh'
            },
            arena: 5
        },
        11: {
            id: 'deoxys',
            boss: {
                1: 'treecko',
                2: 'grovyle',
                3: 'sceptile',
                4: 'deoxys',
                5: 'jirachi'
            },
            arena: 13
        },
        12: {
            id: 'moltres',
            boss: {
                1: 'cyndaquil',
                2: 'quilava',
                3: 'typhlosion',
                4: 'moltres',
                5: 'lugia'
            },
            arena: 1
        },
        13: {
            id: 'groudon',
            boss: {
                1: 'charmander',
                2: 'charmeleon',
                3: 'charizard',
                4: 'groudon',
                5: 'rayquaza'
            },
            arena: 12
        },
        14: {
            id: 'zapdos',
            boss: {
                1: 'turtwig',
                2: 'grotle',
                3: 'torterra',
                4: 'zapdos',
                5: 'lugia'
            },
            arena: 3
        },
        15: {
            id: 'kyogre',
            boss: {
                1: 'totodile',
                2: 'croconaw',
                3: 'feraligatr',
                4: 'kyogre',
                5: 'rayquaza'
            },
            arena: 12
        },
        16: {
            id: 'articuno',
            boss: {
                1: 'piplup',
                2: 'prinplup',
                3: 'empoleon',
                4: 'articuno',
                5: 'lugia'
            },
            arena: 2
        }
    },
    'src/conf/staticData/referralBonus.json': {
        coins: {
            reward: 'coins',
            amount: 10
        },
        silverPack: {
            reward: 'silverPack',
            amount: 1
        }
    },
    'src/conf/staticData/socialGifts.json': {
        eevee: {
            reward: 'starMedal',
            amount: 1
        },
        mimikyu: {
            reward: 'candy',
            amount: 20
        },
        meowth: {
            reward: 'coins',
            amount: 50
        }
    },
    'src/conf/staticData/starters.json': {
        bulbasaur: {
            enabled: !0,
            abilityIdx: 0
        },
        charmander: {
            enabled: !0,
            abilityIdx: 0
        },
        squirtle: {
            enabled: !0,
            abilityIdx: 0
        },
        chikorita: {
            enabled: !0,
            abilityIdx: 0
        },
        cyndaquil: {
            enabled: !0,
            abilityIdx: 0
        },
        totodile: {
            enabled: !0,
            abilityIdx: 0
        },
        treecko: {
            enabled: !0,
            abilityIdx: 0
        },
        torchic: {
            enabled: !0,
            abilityIdx: 0
        },
        mudkip: {
            enabled: !0,
            abilityIdx: 0
        },
        turtwig: {
            enabled: !0,
            abilityIdx: 0
        },
        chimchar: {
            enabled: !0,
            abilityIdx: 0
        },
        piplup: {
            enabled: !0,
            abilityIdx: 0
        },
        snivy: {
            enabled: !0,
            abilityIdx: 0
        },
        chespin: {
            enabled: !0,
            abilityIdx: 0
        },
        rowlet: {
            enabled: !0,
            abilityIdx: 0
        },
        tepig: {
            enabled: !0,
            abilityIdx: 0
        },
        fennekin: {
            enabled: !0,
            abilityIdx: 0
        },
        litten: {
            enabled: !0,
            abilityIdx: 0
        },
        oshawott: {
            enabled: !0,
            abilityIdx: 0
        },
        froakie: {
            enabled: !0,
            abilityIdx: 0
        },
        popplio: {
            enabled: !0,
            abilityIdx: 0
        }
    },
    'src/conf/staticData/taskRewards.json': {
        0: {
            id: 0,
            checks: 25,
            reward: 'gymMedal',
            amount: 1
        },
        1: {
            id: 1,
            checks: 50,
            reward: 'gymMedal',
            amount: 1
        },
        2: {
            id: 2,
            checks: 75,
            reward: 'gymMedal',
            amount: 1
        },
        3: {
            id: 3,
            checks: 100,
            reward: 'gymPack',
            amount: 1
        }
    },
    'spritesheets/pathTable.json': ['resources/animations/abilityBurst/', 'resources/animations/currency/', 'resources/animations/elementalBackground/efx_fight/', 'resources/animations/elementalBackground/efx_psychic/', 'resources/animations/gymBackground/pm_gym_4_anim/', 'resources/animations/gymBackground/pm_gym_8_anim/', 'resources/animations/gymBackground/pm_gym_11_anim/', 'resources/animations/medallion/', 'resources/animations/quiz/pm_bg_FTUE_lab/', 'resources/animations/raidBackground/11/', 'resources/animations/arena/', 'resources/animations/dailyReward/pm_task_icons/', 'resources/animations/elementalBackground/efx_fire/', 'resources/animations/elementalBackground/efx_water/', 'resources/animations/gymBackground/pm_gym_1_anim/', 'resources/animations/raidBackground/3/', 'resources/animations/raidBackground/4/', 'resources/animations/raidBackground/5/', 'resources/animations/raidBackground/6/', 'resources/animations/raidBackground/7/', 'resources/animations/raidBackground/8/', 'resources/animations/raidBackground/9/', 'resources/animations/raidWarning/raidBoss/', 'resources/animations/raidWarning/', 'resources/fonts/remap/', 'resources/fonts/th/', 'resources/images/badgeHistory/', 'resources/images/badges/large/', 'resources/images/badges/shadow/', 'resources/images/badges/small/', 'resources/images/bagScreen/', 'resources/images/challengeScreen/', 'resources/images/chatbotSubscription/', 'resources/images/common/', 'resources/images/common/currencies/', 'resources/images/common/progressBar/', 'resources/animations/raidStageCleared/', 'resources/images/dialogs/battle/', 'resources/images/dialogs/common/', 'resources/images/gifts/', 'resources/images/gameResult/', 'resources/fonts/zh-TW/', 'resources/images/headerBar/', 'resources/animations/gymBackground/pm_gym_9_anim/', 'resources/animations/gymBackground/pm_gym_5_anim/', 'resources/animations/medallionEvolution/', 'resources/animations/raidBackground/12/', 'resources/animations/quiz/pm_ftue_pokemon_reveal/', 'resources/animations/spinner/', 'resources/animations/tutorial/pm_tutorial/', 'resources/fonts/latin/', 'resources/animations/wishes/', 'resources/fonts/ja/', 'resources/images/raid/', 'resources/images/raidProgressBar/', 'resources/images/ranking/', 'resources/images/settingScreen/', 'resources/images/pokemonTypes/', 'resources/images/shopScreen/', 'resources/images/spinner/', 'resources/images/taskScreen/', 'resources/images/worldRankingScreen/flags/', 'resources/images/worldRankingScreen/', 'resources/images/landing/', 'resources/images/landing/popin/', 'resources/images/landing/raid/', 'resources/images/pokedexEntryPopup/', 'resources/images/playerHud/', 'resources/images/pokedexScreen/', 'resources/images/pokemonAbilities/', 'resources/images/medallion/', 'resources/animations/elementalBackground/efx_grass/', 'resources/animations/elementalBackground/efx_dragon/', 'resources/animations/gymBackground/pm_gym_2_anim/', 'resources/animations/gymBackground/pm_gym_6_anim/', 'resources/animations/badgeGaining/', 'resources/animations/gymBackground/pm_gym_final_anim/', 'resources/animations/generalBattle/', 'resources/animations/raidBackground/1/', 'resources/animations/raidBackground/13/', 'resources/animations/pogsFx/', 'resources/images/navBar/', 'resources/images/pokemonPreview/', 'resources/images/starPack/', 'resources/animations/elementalBackground/efx_normal/', 'resources/animations/gymBackground/pm_gym_10_anim/', 'resources/animations/gymBackground/pm_gym_3_anim/', 'resources/animations/gymBackground/pm_gym_7_anim/', 'resources/animations/hazards/', 'resources/animations/raidBackground/10/', 'resources/animations/raidBackground/2/', 'resources/animations/callouts/', 'resources/animations/elementalBackground/efx_electric/', 'resources/animations/pokepack/'],
    'spritesheets/map.json': {
        'spritesheets/resources-animations-abilityBurst1.png': [{
            f: '12.png',
            x: 2,
            y: 2,
            w: 1e3,
            h: 15,
            p: 0
        }, {
            f: '19.png',
            x: 2,
            y: 19,
            w: 346,
            h: 20,
            b: 1,
            p: 0
        }, {
            f: '40.png',
            x: 2,
            y: 41,
            w: 296,
            h: 34,
            p: 0
        }, {
            f: '28.png',
            x: 300,
            y: 41,
            w: 296,
            h: 34,
            p: 0
        }, {
            f: '60.png',
            x: 598,
            y: 19,
            w: 296,
            h: 34,
            p: 0
        }, {
            f: '32.png',
            x: 2,
            y: 77,
            w: 296,
            h: 34,
            p: 0
        }, {
            f: '36.png',
            x: 300,
            y: 77,
            w: 296,
            h: 34,
            p: 0
        }, {
            f: '15.png',
            x: 598,
            y: 55,
            w: 296,
            h: 34,
            p: 0
        }, {
            f: '44.png',
            x: 2,
            y: 113,
            w: 296,
            h: 34,
            p: 0
        }, {
            f: '48.png',
            x: 300,
            y: 113,
            w: 296,
            h: 34,
            p: 0
        }, {
            f: '56.png',
            x: 598,
            y: 91,
            w: 296,
            h: 34,
            p: 0
        }, {
            f: '52.png',
            x: 2,
            y: 149,
            w: 296,
            h: 34,
            p: 0
        }, {
            f: '8.png',
            x: 350,
            y: 19,
            w: 246,
            h: 10,
            t: 1,
            b: 1,
            p: 0
        }, {
            f: '5.png',
            x: 2,
            y: 185,
            w: 162,
            h: 161,
            b: 1,
            p: 0
        }, {
            f: '3.png',
            x: 300,
            y: 149,
            w: 162,
            h: 162,
            p: 0
        }],
        'spritesheets/resources-animations-currency1.png': [{
            f: '11.png',
            x: 2,
            y: 2,
            w: 477,
            h: 476,
            t: 2,
            l: 2,
            b: 2,
            r: 1,
            p: 1
        }, {
            f: '16.png',
            x: 2,
            y: 480,
            w: 194,
            h: 268,
            t: 7,
            l: 36,
            b: 9,
            r: 44,
            p: 1
        }, {
            f: '3.png',
            x: 198,
            y: 480,
            w: 163,
            h: 162,
            p: 1
        }, {
            f: '9.png',
            x: 363,
            y: 480,
            w: 42,
            h: 142,
            p: 1
        }, {
            f: '13.png',
            x: 363,
            y: 624,
            w: 15,
            h: 124,
            p: 1
        }, {
            f: '7.png',
            x: 380,
            y: 624,
            w: 56,
            h: 122,
            p: 1
        }, {
            f: '5.png',
            x: 407,
            y: 480,
            w: 60,
            h: 112,
            b: 1,
            p: 1
        }, {
            f: '18.png',
            x: 198,
            y: 644,
            w: 72,
            h: 72,
            p: 1
        }],
        'spritesheets/resources-animations-elementalBackground-efx_fight1.png': [{
            f: '8.png',
            x: 2,
            y: 2,
            w: 20,
            h: 137,
            l: 2,
            b: 1,
            r: 2,
            p: 2
        }, {
            f: '6.png',
            x: 24,
            y: 2,
            w: 98,
            h: 98,
            b: 1,
            p: 2
        }, {
            f: '9.png',
            x: 124,
            y: 2,
            w: 90,
            h: 90,
            p: 2
        }, {
            f: '3.png',
            x: 2,
            y: 141,
            w: 54,
            h: 55,
            p: 2
        }],
        'spritesheets/resources-animations-elementalBackground-efx_psychic1.png': [{
            f: '8.png',
            x: 2,
            y: 2,
            w: 479,
            h: 225,
            p: 3
        }, {
            f: '5.png',
            x: 2,
            y: 229,
            w: 168,
            h: 168,
            p: 3
        }, {
            f: '2.png',
            x: 172,
            y: 229,
            w: 26,
            h: 61,
            p: 3
        }, {
            f: '1.png',
            x: 172,
            y: 292,
            w: 16,
            h: 42,
            p: 3
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_4_anim1.png': [{
            f: '1.png',
            x: 2,
            y: 2,
            w: 121,
            h: 15,
            p: 4
        }, {
            f: '5.png',
            x: 2,
            y: 19,
            w: 81,
            h: 41,
            p: 4
        }, {
            f: '13.png',
            x: 85,
            y: 19,
            w: 37,
            h: 27,
            p: 4
        }, {
            f: '21.png',
            x: 2,
            y: 62,
            w: 37,
            h: 28,
            t: 1,
            b: 3,
            r: 1,
            p: 4
        }, {
            f: '15.png',
            x: 41,
            y: 62,
            w: 35,
            h: 26,
            b: 1,
            p: 4
        }, {
            f: '19.png',
            x: 85,
            y: 48,
            w: 18,
            h: 29,
            p: 4
        }, {
            f: '17.png',
            x: 105,
            y: 48,
            w: 15,
            h: 27,
            p: 4
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_8_anim1.png': [{
            f: '8.png',
            x: 2,
            y: 2,
            w: 49,
            h: 46,
            p: 5
        }, {
            f: '3.png',
            x: 2,
            y: 50,
            w: 42,
            h: 42,
            p: 5
        }, {
            f: '5.png',
            x: 53,
            y: 2,
            w: 11,
            h: 20,
            p: 5
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_11_anim1.png': [{
            f: '34.png',
            x: 2,
            y: 2,
            w: 1478,
            h: 236,
            p: 6
        }, {
            f: '46.png',
            x: 2,
            y: 240,
            w: 741,
            h: 95,
            p: 6
        }, {
            f: '9.png',
            x: 2,
            y: 337,
            w: 689,
            h: 547,
            t: 5,
            l: 1,
            p: 6
        }, {
            f: '43.png',
            x: 745,
            y: 240,
            w: 441,
            h: 131,
            p: 6
        }, {
            f: '18.png',
            x: 693,
            y: 373,
            w: 417,
            h: 207,
            t: 2,
            l: 2,
            p: 6
        }, {
            f: '27.png',
            x: 1188,
            y: 240,
            w: 251,
            h: 352,
            p: 6
        }, {
            f: '37.png',
            x: 693,
            y: 594,
            w: 302,
            h: 277,
            p: 6
        }, {
            f: '12.png',
            x: 997,
            y: 594,
            w: 269,
            h: 103,
            r: 1,
            p: 6
        }, {
            f: '15.png',
            x: 997,
            y: 699,
            w: 226,
            h: 177,
            p: 6
        }, {
            f: '24.png',
            x: 1225,
            y: 699,
            w: 214,
            h: 119,
            b: 1,
            r: 1,
            p: 6
        }, {
            f: '40.png',
            x: 2,
            y: 886,
            w: 151,
            h: 165,
            p: 6
        }, {
            f: '21.png',
            x: 1112,
            y: 373,
            w: 68,
            h: 91,
            l: 27,
            p: 6
        }, {
            f: '30.png',
            x: 1268,
            y: 594,
            w: 81,
            h: 88,
            p: 6
        }, {
            f: '52.png',
            x: 1441,
            y: 240,
            w: 20,
            h: 35,
            b: 1,
            r: 1,
            p: 6
        }, {
            f: '2.png',
            x: 1441,
            y: 277,
            w: 31,
            h: 16,
            p: 6
        }, {
            f: '5.png',
            x: 693,
            y: 337,
            w: 19,
            h: 22,
            t: 13,
            p: 6
        }, {
            f: '49.png',
            x: 1268,
            y: 684,
            w: 13,
            h: 13,
            b: 1,
            r: 1,
            p: 6
        }],
        'spritesheets/resources-animations-medallion1.png': [{
            f: '27.png',
            x: 2,
            y: 2,
            w: 23,
            h: 285,
            p: 7
        }, {
            f: '25.png',
            x: 27,
            y: 2,
            w: 59,
            h: 283,
            p: 7
        }, {
            f: '23.png',
            x: 88,
            y: 2,
            w: 89,
            h: 280,
            p: 7
        }, {
            f: '38.png',
            x: 179,
            y: 2,
            w: 276,
            h: 277,
            r: 1,
            p: 7
        }, {
            f: '21.png',
            x: 2,
            y: 289,
            w: 106,
            h: 275,
            r: 1,
            p: 7
        }, {
            f: '1.png',
            x: 179,
            y: 281,
            w: 273,
            h: 273,
            p: 7
        }, {
            f: '6.png',
            x: 457,
            y: 2,
            w: 143,
            h: 271,
            p: 7
        }, {
            f: '4.png',
            x: 457,
            y: 275,
            w: 135,
            h: 255,
            r: 1,
            p: 7
        }, {
            f: '49.png',
            x: 2,
            y: 566,
            w: 148,
            h: 148,
            p: 7
        }, {
            f: '32.png',
            x: 110,
            y: 284,
            w: 43,
            h: 40,
            p: 7
        }],
        'spritesheets/resources-animations-quiz-pm_bg_FTUE_lab1.png': [{
            f: '4.png',
            x: 2,
            y: 2,
            w: 80,
            h: 801,
            p: 8
        }, {
            f: '2.png',
            x: 84,
            y: 2,
            w: 14,
            h: 14,
            p: 8
        }],
        'spritesheets/resources-animations-raidBackground-111.png': [{
            f: '29.png',
            x: 2,
            y: 2,
            w: 48,
            h: 271,
            b: 1,
            p: 9
        }, {
            f: '32.png',
            x: 52,
            y: 2,
            w: 239,
            h: 67,
            l: 2,
            p: 9
        }, {
            f: '26.png',
            x: 52,
            y: 71,
            w: 54,
            h: 171,
            p: 9
        }, {
            f: '2.png',
            x: 108,
            y: 71,
            w: 166,
            h: 142,
            t: 1,
            l: 2,
            b: 2,
            r: 2,
            p: 9
        }, {
            f: '6.png',
            x: 2,
            y: 275,
            w: 133,
            h: 148,
            t: 9,
            l: 8,
            b: 9,
            r: 12,
            p: 9
        }, {
            f: '11.png',
            x: 137,
            y: 215,
            w: 112,
            h: 146,
            t: 9,
            l: 8,
            b: 9,
            r: 11,
            p: 9
        }, {
            f: '14.png',
            x: 293,
            y: 2,
            w: 114,
            h: 146,
            t: 15,
            l: 8,
            b: 9,
            r: 11,
            p: 9
        }, {
            f: '23.png',
            x: 276,
            y: 150,
            w: 106,
            h: 142,
            t: 8,
            l: 7,
            b: 10,
            r: 11,
            p: 9
        }, {
            f: '20.png',
            x: 409,
            y: 2,
            w: 114,
            h: 135,
            t: 7,
            l: 8,
            b: 9,
            r: 11,
            p: 9
        }, {
            f: '17.png',
            x: 409,
            y: 139,
            w: 114,
            h: 130,
            t: 10,
            l: 8,
            b: 9,
            r: 12,
            p: 9
        }, {
            f: '8.png',
            x: 384,
            y: 271,
            w: 113,
            h: 26,
            p: 9
        }],
        'spritesheets/resources-animations-arena1.png': [{
            f: '65.png',
            x: 2,
            y: 2,
            w: 1286,
            h: 850,
            b: 2,
            p: 10
        }, {
            f: '27.png',
            x: 2,
            y: 854,
            w: 784,
            h: 736,
            p: 10
        }, {
            f: '8.png',
            x: 1290,
            y: 2,
            w: 244,
            h: 753,
            r: 1,
            p: 10
        }, {
            f: '82.png',
            x: 788,
            y: 854,
            w: 710,
            h: 710,
            p: 10
        }, {
            f: '111.png',
            x: 1536,
            y: 2,
            w: 461,
            h: 613,
            b: 1,
            r: 1,
            p: 10
        }, {
            f: '217.png',
            x: 1500,
            y: 757,
            w: 114,
            h: 590,
            r: 1,
            p: 10
        }, {
            f: '216.png',
            x: 1616,
            y: 617,
            w: 113,
            h: 567,
            t: 12,
            b: 10,
            p: 10
        }, {
            f: '70.png',
            x: 1500,
            y: 1349,
            w: 464,
            h: 130,
            p: 10
        }, {
            f: '31.png',
            x: 2,
            y: 1592,
            w: 395,
            h: 269,
            t: 55,
            l: 5,
            b: 76,
            p: 10
        }, {
            f: '68.png',
            x: 1616,
            y: 1186,
            w: 365,
            h: 80,
            b: 1,
            p: 10
        }, {
            f: '60.png',
            x: 1500,
            y: 1481,
            w: 337,
            h: 341,
            t: 1,
            b: 1,
            r: 2,
            p: 10
        }, {
            f: '91.png',
            x: 788,
            y: 1566,
            w: 314,
            h: 295,
            p: 10
        }, {
            f: '50.png',
            x: 1104,
            y: 1566,
            w: 314,
            h: 295,
            p: 10
        }, {
            f: '147.png',
            x: 1420,
            y: 1566,
            w: 46,
            h: 275,
            p: 10
        }, {
            f: '144.png',
            x: 399,
            y: 1592,
            w: 55,
            h: 268,
            p: 10
        }, {
            f: '213.png',
            x: 1731,
            y: 617,
            w: 249,
            h: 249,
            p: 10
        }, {
            f: '129.png',
            x: 1731,
            y: 868,
            w: 249,
            h: 103,
            p: 10
        }, {
            f: '138.png',
            x: 1616,
            y: 1268,
            w: 241,
            h: 77,
            p: 10
        }, {
            f: '132.png',
            x: 456,
            y: 1592,
            w: 56,
            h: 241,
            p: 10
        }, {
            f: '126.png',
            x: 1731,
            y: 973,
            w: 241,
            h: 90,
            p: 10
        }, {
            f: '141.png',
            x: 514,
            y: 1592,
            w: 193,
            h: 219,
            b: 1,
            r: 1,
            p: 10
        }, {
            f: '123.png',
            x: 2,
            y: 1863,
            w: 217,
            h: 147,
            p: 10
        }, {
            f: '33.png',
            x: 1731,
            y: 1065,
            w: 210,
            h: 65,
            t: 156,
            l: 127,
            b: 179,
            r: 63,
            p: 10
        }, {
            f: '120.png',
            x: 514,
            y: 1813,
            w: 175,
            h: 195,
            p: 10
        }, {
            f: '108.png',
            x: 1468,
            y: 1824,
            w: 194,
            h: 180,
            p: 10
        }, {
            f: '150.png',
            x: 1664,
            y: 1824,
            w: 90,
            h: 185,
            p: 10
        }, {
            f: '135.png',
            x: 1756,
            y: 1824,
            w: 166,
            h: 180,
            p: 10
        }, {
            f: '56.png',
            x: 1839,
            y: 1481,
            w: 158,
            h: 157,
            t: 1,
            l: 1,
            b: 4,
            r: 3,
            p: 10
        }, {
            f: '53.png',
            x: 1839,
            y: 1640,
            w: 158,
            h: 157,
            t: 1,
            l: 1,
            b: 4,
            r: 3,
            p: 10
        }, {
            f: '79.png',
            x: 221,
            y: 1863,
            w: 146,
            h: 146,
            p: 10
        }, {
            f: '41.png',
            x: 1983,
            y: 617,
            w: 8,
            h: 130,
            p: 10
        }, {
            f: '37.png',
            x: 399,
            y: 1862,
            w: 111,
            h: 111,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 10
        }, {
            f: '153.png',
            x: 691,
            y: 1863,
            w: 104,
            h: 103,
            p: 10
        }, {
            f: '21.png',
            x: 797,
            y: 1863,
            w: 100,
            h: 100,
            p: 10
        }, {
            f: '156.png',
            x: 1859,
            y: 1268,
            w: 99,
            h: 63,
            p: 10
        }, {
            f: '95.png',
            x: 1420,
            y: 1843,
            w: 45,
            h: 79,
            p: 10
        }, {
            f: '212.png',
            x: 709,
            y: 1592,
            w: 74,
            h: 74,
            t: 3,
            l: 3,
            b: 3,
            r: 3,
            p: 10
        }, {
            f: '97.png',
            x: 691,
            y: 1968,
            w: 57,
            h: 37,
            p: 10
        }, {
            f: '99.png',
            x: 1960,
            y: 1268,
            w: 37,
            h: 57,
            p: 10
        }, {
            f: '47.png',
            x: 1924,
            y: 1799,
            w: 56,
            h: 56,
            b: 1,
            r: 1,
            p: 10
        }, {
            f: '3.png',
            x: 1924,
            y: 1857,
            w: 56,
            h: 56,
            b: 1,
            r: 1,
            p: 10
        }, {
            f: '215.png',
            x: 797,
            y: 1965,
            w: 42,
            h: 44,
            t: 1,
            l: 1,
            b: 2,
            r: 2,
            p: 10
        }, {
            f: '42.png',
            x: 1960,
            y: 1327,
            w: 35,
            h: 7,
            p: 10
        }, {
            f: '93.png',
            x: 369,
            y: 1975,
            w: 32,
            h: 32,
            p: 10
        }, {
            f: '211.png',
            x: 369,
            y: 1863,
            w: 28,
            h: 28,
            p: 10
        }, {
            f: '43.png',
            x: 1859,
            y: 1333,
            w: 26,
            h: 14,
            p: 10
        }],
        'spritesheets/resources-animations-arena2.png': [{
            f: '63.png',
            x: 2,
            y: 2,
            w: 784,
            h: 736,
            p: 10
        }, {
            f: '114.png',
            x: 2,
            y: 740,
            w: 428,
            h: 570,
            b: 2,
            r: 2,
            p: 10
        }, {
            f: '81.png',
            x: 788,
            y: 2,
            w: 551,
            h: 551,
            p: 10
        }, {
            f: '105.png',
            x: 788,
            y: 555,
            w: 483,
            h: 483,
            p: 10
        }, {
            f: '36.png',
            x: 432,
            y: 740,
            w: 334,
            h: 334,
            p: 10
        }, {
            f: '73.png',
            x: 2,
            y: 1312,
            w: 334,
            h: 334,
            p: 10
        }, {
            f: '88.png',
            x: 338,
            y: 1312,
            w: 334,
            h: 334,
            p: 10
        }, {
            f: '24.png',
            x: 674,
            y: 1076,
            w: 334,
            h: 334,
            p: 10
        }, {
            f: '159.png',
            x: 1341,
            y: 2,
            w: 334,
            h: 334,
            p: 10
        }, {
            f: '2.png',
            x: 1341,
            y: 338,
            w: 334,
            h: 334,
            p: 10
        }, {
            f: '102.png',
            x: 1273,
            y: 674,
            w: 334,
            h: 334,
            p: 10
        }, {
            f: '46.png',
            x: 1273,
            y: 1010,
            w: 334,
            h: 334,
            p: 10
        }, {
            f: '40.png',
            x: 1010,
            y: 1346,
            w: 314,
            h: 295,
            p: 10
        }, {
            f: '6.png',
            x: 1326,
            y: 1346,
            w: 314,
            h: 295,
            p: 10
        }, {
            f: '76.png',
            x: 2,
            y: 1648,
            w: 314,
            h: 295,
            p: 10
        }, {
            f: '117.png',
            x: 318,
            y: 1648,
            w: 275,
            h: 270,
            p: 10
        }, {
            f: '84.png',
            x: 432,
            y: 1076,
            w: 179,
            h: 180,
            r: 1,
            p: 10
        }, {
            f: '214.png',
            x: 1010,
            y: 1040,
            w: 179,
            h: 179,
            p: 10
        }],
        'spritesheets/resources-animations-dailyReward-pm_task_icons1.png': [{
            f: '3.png',
            x: 2,
            y: 2,
            w: 170,
            h: 176,
            p: 11
        }, {
            f: '93.png',
            x: 174,
            y: 2,
            w: 126,
            h: 125,
            b: 1,
            p: 11
        }, {
            f: '81.png',
            x: 174,
            y: 129,
            w: 126,
            h: 125,
            b: 1,
            p: 11
        }, {
            f: '87.png',
            x: 2,
            y: 180,
            w: 126,
            h: 125,
            b: 1,
            p: 11
        }, {
            f: '49.png',
            x: 302,
            y: 2,
            w: 104,
            h: 123,
            p: 11
        }, {
            f: '11.png',
            x: 302,
            y: 127,
            w: 104,
            h: 123,
            p: 11
        }, {
            f: '14.png',
            x: 2,
            y: 307,
            w: 103,
            h: 122,
            p: 11
        }, {
            f: '8.png',
            x: 107,
            y: 307,
            w: 103,
            h: 122,
            p: 11
        }, {
            f: '57.png',
            x: 302,
            y: 252,
            w: 96,
            h: 115,
            p: 11
        }, {
            f: '59.png',
            x: 408,
            y: 2,
            w: 96,
            h: 115,
            p: 11
        }, {
            f: '24.png',
            x: 408,
            y: 119,
            w: 95,
            h: 114,
            p: 11
        }, {
            f: '22.png',
            x: 408,
            y: 235,
            w: 95,
            h: 114,
            p: 11
        }, {
            f: '52.png',
            x: 212,
            y: 256,
            w: 86,
            h: 102,
            t: 8,
            l: 12,
            r: 12,
            p: 11
        }, {
            f: '33.png',
            x: 2,
            y: 431,
            w: 101,
            h: 93,
            p: 11
        }, {
            f: '103.png',
            x: 105,
            y: 431,
            w: 101,
            h: 93,
            p: 11
        }, {
            f: '102.png',
            x: 208,
            y: 431,
            w: 101,
            h: 92,
            p: 11
        }, {
            f: '30.png',
            x: 400,
            y: 351,
            w: 101,
            h: 92,
            p: 11
        }, {
            f: '47.png',
            x: 506,
            y: 2,
            w: 101,
            h: 92,
            p: 11
        }, {
            f: '65.png',
            x: 506,
            y: 96,
            w: 101,
            h: 93,
            p: 11
        }, {
            f: '79.png',
            x: 505,
            y: 191,
            w: 101,
            h: 93,
            p: 11
        }, {
            f: '75.png',
            x: 505,
            y: 286,
            w: 93,
            h: 85,
            p: 11
        }, {
            f: '73.png',
            x: 503,
            y: 373,
            w: 93,
            h: 85,
            p: 11
        }, {
            f: '43.png',
            x: 2,
            y: 526,
            w: 93,
            h: 84,
            p: 11
        }, {
            f: '41.png',
            x: 97,
            y: 526,
            w: 93,
            h: 84,
            p: 11
        }, {
            f: '83.png',
            x: 192,
            y: 526,
            w: 77,
            h: 80,
            p: 11
        }, {
            f: '89.png',
            x: 271,
            y: 525,
            w: 77,
            h: 80,
            p: 11
        }, {
            f: '95.png',
            x: 311,
            y: 369,
            w: 77,
            h: 80,
            p: 11
        }, {
            f: '17.png',
            x: 130,
            y: 256,
            w: 51,
            h: 35,
            p: 11
        }, {
            f: '6.png',
            x: 130,
            y: 180,
            w: 30,
            h: 43,
            p: 11
        }],
        'spritesheets/resources-animations-elementalBackground-efx_fire1.png': [{
            f: '6.png',
            x: 2,
            y: 2,
            w: 11,
            h: 90,
            t: 1,
            p: 12
        }, {
            f: '2.png',
            x: 15,
            y: 2,
            w: 31,
            h: 67,
            p: 12
        }, {
            f: '1.png',
            x: 48,
            y: 2,
            w: 28,
            h: 59,
            r: 1,
            p: 12
        }, {
            f: '8.png',
            x: 48,
            y: 63,
            w: 22,
            h: 28,
            p: 12
        }],
        'spritesheets/resources-animations-elementalBackground-efx_water1.png': [{
            f: '10.png',
            x: 2,
            y: 2,
            w: 468,
            h: 225,
            l: 5,
            r: 6,
            p: 13
        }, {
            f: '2.png',
            x: 2,
            y: 229,
            w: 80,
            h: 80,
            p: 13
        }, {
            f: '4.png',
            x: 84,
            y: 229,
            w: 56,
            h: 56,
            p: 13
        }, {
            f: '6.png',
            x: 142,
            y: 229,
            w: 47,
            h: 47,
            b: 1,
            p: 13
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_1_anim1.png': [{
            f: '2.png',
            x: 2,
            y: 2,
            w: 20,
            h: 10,
            p: 14
        }],
        'spritesheets/resources-animations-raidBackground-31.png': [{
            f: '13.png',
            x: 2,
            y: 2,
            w: 29,
            h: 79,
            r: 1,
            p: 15
        }, {
            f: '15.png',
            x: 33,
            y: 2,
            w: 40,
            h: 77,
            p: 15
        }, {
            f: '4.png',
            x: 75,
            y: 2,
            w: 13,
            h: 73,
            r: 1,
            p: 15
        }, {
            f: '11.png',
            x: 2,
            y: 83,
            w: 27,
            h: 73,
            p: 15
        }, {
            f: '12.png',
            x: 31,
            y: 83,
            w: 23,
            h: 65,
            p: 15
        }, {
            f: '53.png',
            x: 90,
            y: 2,
            w: 41,
            h: 65,
            l: 1,
            b: 1,
            r: 1,
            p: 15
        }, {
            f: '14.png',
            x: 90,
            y: 69,
            w: 34,
            h: 62,
            r: 1,
            p: 15
        }, {
            f: '16.png',
            x: 133,
            y: 2,
            w: 49,
            h: 60,
            p: 15
        }, {
            f: '17.png',
            x: 133,
            y: 64,
            w: 49,
            h: 43,
            p: 15
        }, {
            f: '10.png',
            x: 126,
            y: 109,
            w: 33,
            h: 46,
            r: 1,
            p: 15
        }, {
            f: '9.png',
            x: 2,
            y: 158,
            w: 34,
            h: 45,
            p: 15
        }, {
            f: '26.png',
            x: 38,
            y: 157,
            w: 42,
            h: 38,
            p: 15
        }, {
            f: '25.png',
            x: 82,
            y: 133,
            w: 41,
            h: 33,
            r: 1,
            p: 15
        }, {
            f: '8.png',
            x: 161,
            y: 109,
            w: 19,
            h: 39,
            p: 15
        }, {
            f: '27.png',
            x: 82,
            y: 168,
            w: 39,
            h: 34,
            p: 15
        }, {
            f: '24.png',
            x: 56,
            y: 81,
            w: 29,
            h: 38,
            r: 1,
            p: 15
        }, {
            f: '28.png',
            x: 123,
            y: 168,
            w: 36,
            h: 21,
            p: 15
        }, {
            f: '22.png',
            x: 184,
            y: 2,
            w: 29,
            h: 35,
            p: 15
        }, {
            f: '29.png',
            x: 123,
            y: 191,
            w: 34,
            h: 12,
            p: 15
        }, {
            f: '23.png',
            x: 184,
            y: 39,
            w: 29,
            h: 32,
            b: 1,
            p: 15
        }, {
            f: '21.png',
            x: 184,
            y: 73,
            w: 26,
            h: 28,
            p: 15
        }, {
            f: '7.png',
            x: 56,
            y: 121,
            w: 18,
            h: 25,
            b: 1,
            p: 15
        }, {
            f: '20.png',
            x: 184,
            y: 103,
            w: 24,
            h: 21,
            b: 1,
            p: 15
        }, {
            f: '18.png',
            x: 182,
            y: 126,
            w: 14,
            h: 22,
            p: 15
        }, {
            f: '6.png',
            x: 198,
            y: 126,
            w: 14,
            h: 22,
            b: 1,
            r: 1,
            p: 15
        }, {
            f: '30.png',
            x: 159,
            y: 191,
            w: 16,
            h: 11,
            b: 1,
            p: 15
        }, {
            f: '31.png',
            x: 56,
            y: 148,
            w: 13,
            h: 7,
            b: 1,
            p: 15
        }, {
            f: '2.png',
            x: 177,
            y: 150,
            w: 12,
            h: 13,
            p: 15
        }, {
            f: '19.png',
            x: 76,
            y: 121,
            w: 10,
            h: 7,
            p: 15
        }],
        'spritesheets/resources-animations-raidBackground-41.png': [{
            f: '2.png',
            x: 2,
            y: 2,
            w: 89,
            h: 110,
            b: 1,
            p: 16
        }, {
            f: '34.png',
            x: 93,
            y: 2,
            w: 98,
            h: 87,
            p: 16
        }, {
            f: '38.png',
            x: 2,
            y: 114,
            w: 54,
            h: 55,
            p: 16
        }, {
            f: '13.png',
            x: 58,
            y: 114,
            w: 19,
            h: 50,
            p: 16
        }, {
            f: '15.png',
            x: 79,
            y: 114,
            w: 26,
            h: 50,
            r: 1,
            p: 16
        }, {
            f: '26.png',
            x: 107,
            y: 91,
            w: 46,
            h: 41,
            b: 1,
            p: 16
        }, {
            f: '11.png',
            x: 155,
            y: 91,
            w: 17,
            h: 46,
            p: 16
        }, {
            f: '25.png',
            x: 2,
            y: 171,
            w: 45,
            h: 36,
            r: 1,
            p: 16
        }, {
            f: '27.png',
            x: 107,
            y: 134,
            w: 43,
            h: 37,
            p: 16
        }, {
            f: '16.png',
            x: 152,
            y: 139,
            w: 35,
            h: 43,
            p: 16
        }, {
            f: '12.png',
            x: 58,
            y: 166,
            w: 14,
            h: 41,
            r: 1,
            p: 16
        }, {
            f: '14.png',
            x: 74,
            y: 166,
            w: 23,
            h: 41,
            p: 16
        }, {
            f: '24.png',
            x: 193,
            y: 2,
            w: 31,
            h: 40,
            p: 16
        }, {
            f: '17.png',
            x: 174,
            y: 91,
            w: 40,
            h: 36,
            r: 1,
            p: 16
        }, {
            f: '28.png',
            x: 99,
            y: 184,
            w: 38,
            h: 23,
            p: 16
        }, {
            f: '22.png',
            x: 189,
            y: 129,
            w: 32,
            h: 38,
            p: 16
        }, {
            f: '23.png',
            x: 189,
            y: 169,
            w: 32,
            h: 37,
            p: 16
        }, {
            f: '29.png',
            x: 139,
            y: 184,
            w: 36,
            h: 13,
            p: 16
        }, {
            f: '10.png',
            x: 193,
            y: 44,
            w: 23,
            h: 32,
            p: 16
        }, {
            f: '21.png',
            x: 2,
            y: 209,
            w: 29,
            h: 31,
            r: 1,
            p: 16
        }, {
            f: '9.png',
            x: 33,
            y: 209,
            w: 24,
            h: 31,
            b: 1,
            p: 16
        }, {
            f: '20.png',
            x: 59,
            y: 209,
            w: 26,
            h: 24,
            p: 16
        }, {
            f: '8.png',
            x: 87,
            y: 209,
            w: 12,
            h: 25,
            p: 16
        }, {
            f: '30.png',
            x: 101,
            y: 209,
            w: 18,
            h: 12,
            b: 1,
            p: 16
        }, {
            f: '7.png',
            x: 93,
            y: 91,
            w: 12,
            h: 18,
            r: 1,
            p: 16
        }, {
            f: '18.png',
            x: 177,
            y: 184,
            w: 9,
            h: 15,
            p: 16
        }, {
            f: '6.png',
            x: 101,
            y: 223,
            w: 10,
            h: 15,
            p: 16
        }, {
            f: '31.png',
            x: 99,
            y: 173,
            w: 14,
            h: 8,
            p: 16
        }, {
            f: '19.png',
            x: 174,
            y: 129,
            w: 11,
            h: 7,
            p: 16
        }],
        'spritesheets/resources-animations-raidBackground-51.png': [{
            f: '7.png',
            x: 2,
            y: 2,
            w: 166,
            h: 142,
            t: 1,
            l: 2,
            b: 2,
            r: 2,
            p: 17
        }, {
            f: '10.png',
            x: 2,
            y: 146,
            w: 160,
            h: 94,
            p: 17
        }, {
            f: '4.png',
            x: 170,
            y: 2,
            w: 140,
            h: 37,
            p: 17
        }, {
            f: '2.png',
            x: 170,
            y: 41,
            w: 122,
            h: 42,
            p: 17
        }, {
            f: '12.png',
            x: 294,
            y: 41,
            w: 2,
            h: 65,
            p: 17
        }],
        'spritesheets/resources-animations-raidBackground-61.png': [{
            f: '9.png',
            x: 2,
            y: 2,
            w: 101,
            h: 302,
            t: 3,
            l: 1,
            b: 1,
            r: 2,
            p: 18
        }, {
            f: '7.png',
            x: 105,
            y: 2,
            w: 54,
            h: 55,
            p: 18
        }, {
            f: '2.png',
            x: 105,
            y: 59,
            w: 45,
            h: 3,
            p: 18
        }],
        'spritesheets/resources-animations-raidBackground-71.png': [{
            f: '6.png',
            x: 2,
            y: 2,
            w: 479,
            h: 225,
            p: 19
        }, {
            f: '10.png',
            x: 2,
            y: 229,
            w: 218,
            h: 76,
            t: 2,
            l: 3,
            b: 1,
            r: 3,
            p: 19
        }, {
            f: '3.png',
            x: 2,
            y: 307,
            w: 84,
            h: 86,
            p: 19
        }],
        'spritesheets/resources-animations-raidBackground-81.png': [{
            f: '1.png',
            x: 2,
            y: 2,
            w: 111,
            h: 14,
            b: 1,
            p: 20
        }, {
            f: '5.png',
            x: 2,
            y: 18,
            w: 89,
            h: 38,
            p: 20
        }, {
            f: '13.png',
            x: 93,
            y: 18,
            w: 15,
            h: 15,
            p: 20
        }],
        'spritesheets/resources-animations-raidBackground-91.png': [{
            f: '17.png',
            x: 2,
            y: 2,
            w: 304,
            h: 547,
            t: 39,
            l: 25,
            b: 40,
            r: 27,
            p: 21
        }, {
            f: '20.png',
            x: 308,
            y: 2,
            w: 273,
            h: 518,
            t: 47,
            l: 20,
            b: 31,
            r: 25,
            p: 21
        }, {
            f: '14.png',
            x: 2,
            y: 551,
            w: 222,
            h: 471,
            t: 42,
            l: 13,
            b: 31,
            r: 25,
            p: 21
        }, {
            f: '23.png',
            x: 226,
            y: 551,
            w: 233,
            h: 464,
            t: 44,
            l: 14,
            b: 36,
            r: 23,
            p: 21
        }, {
            f: '26.png',
            x: 583,
            y: 2,
            w: 191,
            h: 449,
            t: 17,
            l: 5,
            b: 20,
            r: 16,
            p: 21
        }, {
            f: '2.png',
            x: 776,
            y: 2,
            w: 347,
            h: 263,
            r: 5,
            p: 21
        }, {
            f: '5.png',
            x: 776,
            y: 267,
            w: 54,
            h: 171,
            p: 21
        }, {
            f: '9.png',
            x: 832,
            y: 267,
            w: 32,
            h: 46,
            p: 21
        }],
        'spritesheets/resources-animations-raidWarning-raidBoss1.png': [{
            f: '22.png',
            x: 2,
            y: 2,
            w: 797,
            h: 1061,
            p: 22
        }, {
            f: '9.png',
            x: 801,
            y: 2,
            w: 907,
            h: 71,
            p: 22
        }, {
            f: '18.png',
            x: 801,
            y: 75,
            w: 481,
            h: 481,
            b: 1,
            r: 1,
            p: 22
        }, {
            f: '5.png',
            x: 1284,
            y: 75,
            w: 311,
            h: 53,
            t: 9,
            l: 6,
            b: 9,
            r: 6,
            p: 22
        }, {
            f: '2.png',
            x: 1284,
            y: 130,
            w: 263,
            h: 67,
            l: 63,
            b: 1,
            r: 64,
            p: 22
        }, {
            f: '20.png',
            x: 1597,
            y: 75,
            w: 61,
            h: 60,
            t: 2,
            r: 3,
            p: 22
        }],
        'spritesheets/resources-animations-raidWarning1.png': [{
            f: 'raidBoss_bg.jpg',
            x: 2,
            y: 2,
            w: 768,
            h: 1024,
            p: 23
        }],
        'spritesheets/resources-fonts-remap1.png': [{
            f: 'pm_icon_abilities_protect.png',
            x: 2,
            y: 2,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 24
        }, {
            f: 'pm_icon_abilities_se_water.png',
            x: 132,
            y: 2,
            w: 128,
            h: 128,
            t: 1,
            r: 1,
            p: 24
        }, {
            f: 'pm_icon_abilities_se_grass.png',
            x: 2,
            y: 132,
            w: 128,
            h: 128,
            t: 1,
            l: 1,
            p: 24
        }, {
            f: 'pm_icon_abilities_se_fire.png',
            x: 132,
            y: 132,
            w: 128,
            h: 128,
            t: 1,
            r: 1,
            p: 24
        }, {
            f: 'pm_candy.png',
            x: 262,
            y: 2,
            w: 63,
            h: 94,
            l: 16,
            r: 15,
            p: 24
        }, {
            f: 'pm_coin.png',
            x: 2,
            y: 262,
            w: 93,
            h: 94,
            r: 1,
            p: 24
        }, {
            f: 'pm_medal_rarity_star.png',
            x: 97,
            y: 262,
            w: 86,
            h: 82,
            t: 6,
            l: 4,
            b: 6,
            r: 4,
            p: 24
        }, {
            f: 'starMedal.png',
            x: 185,
            y: 262,
            w: 84,
            h: 78,
            t: 32,
            l: 13,
            r: 13,
            p: 24
        }, {
            f: 'gymMedal.png',
            x: 327,
            y: 2,
            w: 82,
            h: 76,
            t: 31,
            l: 14,
            b: 3,
            r: 14,
            p: 24
        }, {
            f: 'icon_t3.png',
            x: 327,
            y: 80,
            w: 80,
            h: 80,
            t: 5,
            l: 5,
            b: 5,
            r: 5,
            p: 24
        }, {
            f: 'icon_t2.png',
            x: 262,
            y: 162,
            w: 80,
            h: 80,
            t: 5,
            l: 5,
            b: 5,
            r: 5,
            p: 24
        }, {
            f: 'icon_t1.png',
            x: 271,
            y: 244,
            w: 79,
            h: 78,
            t: 5,
            l: 6,
            b: 7,
            r: 5,
            p: 24
        }, {
            f: 'pm_icon_fossil.png',
            x: 2,
            y: 358,
            w: 78,
            h: 78,
            t: 6,
            l: 6,
            b: 6,
            r: 6,
            p: 24
        }, {
            f: 'pm_icon_legendary.png',
            x: 82,
            y: 358,
            w: 78,
            h: 78,
            t: 6,
            l: 6,
            b: 6,
            r: 6,
            p: 24
        }, {
            f: 'pm_icon_shop_pokeball.png',
            x: 344,
            y: 162,
            w: 64,
            h: 64,
            p: 24
        }, {
            f: 'duel.png',
            x: 352,
            y: 228,
            w: 49,
            h: 48,
            p: 24
        }, {
            f: 'pm_bag_expand_icon-arrow_v01.png',
            x: 262,
            y: 98,
            w: 8,
            h: 14,
            p: 24
        }],
        'spritesheets/fonts-th1.png': [{
            f: 'lilyupc_bold_white-outline_TH_e.png',
            x: 2,
            y: 2,
            w: 440,
            h: 441,
            t: 3,
            l: 2,
            b: 4,
            r: 6,
            p: 25
        }, {
            f: 'lilyupc_bold_white_TH_e.png',
            x: 444,
            y: 2,
            w: 311,
            h: 313,
            t: 3,
            l: 3,
            b: 4,
            r: 6,
            p: 25
        }, {
            f: 'lilyupc_white_TH_e.png',
            x: 444,
            y: 2,
            w: 311,
            h: 313,
            t: 3,
            l: 3,
            b: 4,
            r: 6,
            p: 25
        }],
        'spritesheets/resources-images-badgeHistory1.png': [{
            f: 'pm_badges_module_background.png',
            x: 2,
            y: 2,
            w: 541,
            h: 155,
            b: 1,
            r: 1,
            p: 26
        }, {
            f: 'pm_badges_container-10_v01.png',
            x: 2,
            y: 159,
            w: 246,
            h: 130,
            p: 26
        }, {
            f: 'pm_badges_container-1_v01.png',
            x: 250,
            y: 159,
            w: 246,
            h: 130,
            p: 26
        }, {
            f: 'pm_badges_container-2_v01.png',
            x: 2,
            y: 291,
            w: 246,
            h: 130,
            p: 26
        }, {
            f: 'pm_badges_container-3_v01.png',
            x: 250,
            y: 291,
            w: 246,
            h: 130,
            p: 26
        }, {
            f: 'pm_badges_container-4_v01.png',
            x: 2,
            y: 423,
            w: 246,
            h: 130,
            p: 26
        }, {
            f: 'pm_badges_container-11_v01.png',
            x: 250,
            y: 423,
            w: 246,
            h: 130,
            p: 26
        }, {
            f: 'pm_badges_container-6_v01.png',
            x: 545,
            y: 2,
            w: 246,
            h: 130,
            p: 26
        }, {
            f: 'pm_badges_container-7_v01.png',
            x: 545,
            y: 134,
            w: 246,
            h: 130,
            p: 26
        }, {
            f: 'pm_badges_container-8_v01.png',
            x: 498,
            y: 266,
            w: 246,
            h: 130,
            p: 26
        }, {
            f: 'pm_badges_container-9_v01.png',
            x: 498,
            y: 398,
            w: 246,
            h: 130,
            p: 26
        }, {
            f: 'pm_badges_container-5_v01.png',
            x: 2,
            y: 555,
            w: 246,
            h: 130,
            p: 26
        }],
        'spritesheets/resources-images-badges-large1.png': [{
            f: '8.png',
            x: 2,
            y: 2,
            w: 340,
            h: 302,
            t: 22,
            b: 16,
            p: 27
        }, {
            f: '5.png',
            x: 2,
            y: 306,
            w: 336,
            h: 243,
            t: 38,
            l: 3,
            b: 59,
            r: 1,
            p: 27
        }, {
            f: '4.png',
            x: 344,
            y: 2,
            w: 263,
            h: 334,
            t: 2,
            l: 31,
            b: 4,
            r: 46,
            p: 27
        }, {
            f: '7.png',
            x: 2,
            y: 551,
            w: 263,
            h: 333,
            t: 3,
            l: 38,
            b: 4,
            r: 39,
            p: 27
        }, {
            f: '2.png',
            x: 267,
            y: 551,
            w: 275,
            h: 331,
            t: 3,
            l: 36,
            b: 6,
            r: 29,
            p: 27
        }, {
            f: '10.png',
            x: 609,
            y: 2,
            w: 327,
            h: 281,
            t: 33,
            l: 2,
            b: 26,
            r: 11,
            p: 27
        }, {
            f: '3.png',
            x: 609,
            y: 285,
            w: 312,
            h: 320,
            t: 7,
            l: 15,
            b: 13,
            r: 13,
            p: 27
        }, {
            f: '9.png',
            x: 2,
            y: 886,
            w: 316,
            h: 306,
            t: 16,
            l: 12,
            b: 18,
            r: 12,
            p: 27
        }, {
            f: '1.png',
            x: 544,
            y: 607,
            w: 312,
            h: 312,
            t: 14,
            l: 14,
            b: 14,
            r: 14,
            p: 27
        }, {
            f: '11.png',
            x: 938,
            y: 2,
            w: 299,
            h: 311,
            t: 14,
            l: 20,
            b: 15,
            r: 21,
            p: 27
        }, {
            f: '6.png',
            x: 923,
            y: 315,
            w: 303,
            h: 278,
            t: 29,
            l: 20,
            b: 33,
            r: 17,
            p: 27
        }],
        'spritesheets/resources-images-badges-shadow1.png': [{
            f: '5.png',
            x: 2,
            y: 2,
            w: 71,
            h: 49,
            t: 13,
            l: 2,
            b: 13,
            r: 2,
            p: 28
        }, {
            f: '6.png',
            x: 2,
            y: 53,
            w: 55,
            h: 49,
            t: 13,
            l: 10,
            b: 13,
            r: 10,
            p: 28
        }, {
            f: '8.png',
            x: 59,
            y: 53,
            w: 55,
            h: 49,
            t: 13,
            l: 10,
            b: 13,
            r: 10,
            p: 28
        }, {
            f: '10.png',
            x: 75,
            y: 2,
            w: 53,
            h: 45,
            t: 15,
            l: 11,
            b: 15,
            r: 11,
            p: 28
        }, {
            f: '9.png',
            x: 2,
            y: 104,
            w: 51,
            h: 49,
            t: 13,
            l: 12,
            b: 13,
            r: 12,
            p: 28
        }, {
            f: '7.png',
            x: 130,
            y: 2,
            w: 41,
            h: 51,
            t: 12,
            l: 17,
            b: 12,
            r: 17,
            p: 28
        }, {
            f: '11.png',
            x: 55,
            y: 104,
            w: 47,
            h: 49,
            t: 13,
            l: 14,
            b: 13,
            r: 14,
            p: 28
        }, {
            f: '2.png',
            x: 104,
            y: 104,
            w: 41,
            h: 49,
            t: 13,
            l: 17,
            b: 13,
            r: 17,
            p: 28
        }, {
            f: '3.png',
            x: 2,
            y: 155,
            w: 49,
            h: 49,
            t: 13,
            l: 13,
            b: 13,
            r: 13,
            p: 28
        }, {
            f: '1.png',
            x: 53,
            y: 155,
            w: 49,
            h: 49,
            t: 13,
            l: 13,
            b: 13,
            r: 13,
            p: 28
        }, {
            f: '4.png',
            x: 104,
            y: 155,
            w: 39,
            h: 49,
            t: 13,
            l: 18,
            b: 13,
            r: 18,
            p: 28
        }],
        'spritesheets/resources-images-badges-small1.png': [{
            f: '11.png',
            x: 2,
            y: 2,
            w: 101,
            h: 109,
            l: 3,
            r: 5,
            p: 29
        }, {
            f: '10.png',
            x: 105,
            y: 2,
            w: 108,
            h: 95,
            t: 8,
            b: 6,
            r: 1,
            p: 29
        }, {
            f: '9.png',
            x: 2,
            y: 113,
            w: 103,
            h: 100,
            t: 2,
            l: 1,
            b: 3,
            r: 1,
            p: 29
        }, {
            f: '5.png',
            x: 107,
            y: 99,
            w: 103,
            h: 75,
            t: 15,
            l: 1,
            b: 15,
            r: 1,
            p: 29
        }, {
            f: '8.png',
            x: 215,
            y: 2,
            w: 101,
            h: 94,
            t: 5,
            l: 2,
            b: 6,
            r: 2,
            p: 29
        }, {
            f: '6.png',
            x: 215,
            y: 98,
            w: 99,
            h: 92,
            t: 6,
            l: 3,
            b: 7,
            r: 3,
            p: 29
        }, {
            f: '2.png',
            x: 2,
            y: 215,
            w: 76,
            h: 94,
            t: 5,
            l: 14,
            b: 6,
            r: 15,
            p: 29
        }, {
            f: '3.png',
            x: 80,
            y: 215,
            w: 89,
            h: 94,
            t: 5,
            l: 8,
            b: 6,
            r: 8,
            p: 29
        }, {
            f: '7.png',
            x: 171,
            y: 192,
            w: 72,
            h: 94,
            t: 5,
            l: 16,
            b: 6,
            r: 17,
            p: 29
        }, {
            f: '1.png',
            x: 2,
            y: 311,
            w: 91,
            h: 94,
            t: 5,
            l: 7,
            b: 6,
            r: 7,
            p: 29
        }, {
            f: '4.png',
            x: 95,
            y: 311,
            w: 72,
            h: 94,
            t: 5,
            l: 16,
            b: 6,
            r: 17,
            p: 29
        }],
        'spritesheets/resources-images-bagScreen1.png': [{
            f: 'pm_bag_bg_v01.jpg',
            x: 2,
            y: 2,
            w: 10,
            h: 1024,
            p: 30
        }, {
            f: 'pm_bag_container_teams_v02.png',
            x: 14,
            y: 2,
            w: 536,
            h: 197,
            p: 30
        }, {
            f: 'pm_bag_container_teams_v01.png',
            x: 14,
            y: 201,
            w: 536,
            h: 197,
            p: 30
        }, {
            f: 'pm_bag_container_lab_v01.png',
            x: 14,
            y: 400,
            w: 536,
            h: 197,
            p: 30
        }, {
            f: 'blueSelectBorderWithAbility.png',
            x: 14,
            y: 599,
            w: 268,
            h: 271,
            p: 30
        }, {
            f: 'sellingBorderNoAbility.png',
            x: 552,
            y: 2,
            w: 268,
            h: 271,
            p: 30
        }, {
            f: 'blueSelectBorderNoAbility.png',
            x: 552,
            y: 275,
            w: 268,
            h: 271,
            p: 30
        }, {
            f: 'sellingBorderWithAbility.png',
            x: 552,
            y: 548,
            w: 268,
            h: 271,
            p: 30
        }, {
            f: 'pm_bag_img_bag_v01.png',
            x: 284,
            y: 599,
            w: 264,
            h: 261,
            p: 30
        }, {
            f: 'pm_bag_img_lab_v01.png',
            x: 14,
            y: 872,
            w: 229,
            h: 130,
            p: 30
        }, {
            f: 'pm_arena_container_lighten-fade3.png',
            x: 822,
            y: 2,
            w: 8,
            h: 214,
            p: 30
        }, {
            f: 'pm_bag_slot-inventory_v01.png',
            x: 550,
            y: 821,
            w: 197,
            h: 197,
            p: 30
        }, {
            f: 'pm_bag_lab_icon-candy-selected_v01.png',
            x: 245,
            y: 872,
            w: 96,
            h: 96,
            p: 30
        }, {
            f: 'pm_bag_btn-icon_bag-btn-active_v01.png',
            x: 245,
            y: 970,
            w: 91,
            h: 51,
            p: 30
        }, {
            f: 'pm_bag_btn-icon_bag-btn_v01.png',
            x: 338,
            y: 970,
            w: 91,
            h: 51,
            p: 30
        }, {
            f: 'pm_bag_container_lighten1.png',
            x: 749,
            y: 821,
            w: 43,
            h: 41,
            p: 30
        }, {
            f: 'pm_bag_lab-candy.png',
            x: 794,
            y: 821,
            w: 36,
            h: 36,
            p: 30
        }, {
            f: 'right_round_corner_w_container.png',
            x: 794,
            y: 859,
            w: 32,
            h: 32,
            p: 30
        }],
        'spritesheets/resources-images-challengeScreen1.png': [{
            f: 'pm_challenge_module-background.png',
            x: 2,
            y: 2,
            w: 542,
            h: 145,
            p: 31
        }, {
            f: 'pm_challenge_icon_duel.png',
            x: 2,
            y: 149,
            w: 49,
            h: 48,
            p: 31
        }, {
            f: 'pm_challenge_duel-pip.png',
            x: 53,
            y: 149,
            w: 34,
            h: 34,
            p: 31
        }],
        'spritesheets/resources-images-chatbotSubscription1.png': [{
            f: 'pm_reminders-subscription_image_v01.png',
            x: 2,
            y: 2,
            w: 529,
            h: 605,
            p: 32
        }, {
            f: 'pm_subscription_container_white.png',
            x: 533,
            y: 2,
            w: 248,
            h: 268,
            p: 32
        }, {
            f: 'pm_subscription_game-icon.png',
            x: 533,
            y: 272,
            w: 109,
            h: 109,
            p: 32
        }],
        'spritesheets/resources-images-common1.png': [{
            f: 'pm_pokemon_grey_header.png',
            x: 2,
            y: 2,
            w: 473,
            h: 102,
            p: 33
        }, {
            f: 'pm_bag_slot-team_v01.png',
            x: 2,
            y: 106,
            w: 209,
            h: 209,
            p: 33
        }, {
            f: 'pm_container_tasks_overlay.png',
            x: 213,
            y: 106,
            w: 153,
            h: 17,
            p: 33
        }, {
            f: 'icon_t2.png',
            x: 368,
            y: 106,
            w: 80,
            h: 80,
            t: 5,
            l: 5,
            b: 5,
            r: 5,
            p: 33
        }, {
            f: 'icon_t3.png',
            x: 213,
            y: 188,
            w: 80,
            h: 80,
            t: 5,
            l: 5,
            b: 5,
            r: 5,
            p: 33
        }, {
            f: 'icon_t1.png',
            x: 295,
            y: 188,
            w: 79,
            h: 78,
            t: 5,
            l: 6,
            b: 7,
            r: 5,
            p: 33
        }, {
            f: 'pm_icon_shop_pokeball.png',
            x: 376,
            y: 188,
            w: 64,
            h: 64,
            p: 33
        }, {
            f: 'pm_container_dragon_v01.png',
            x: 213,
            y: 125,
            w: 57,
            h: 61,
            p: 33
        }, {
            f: 'pm_container_electric_v01.png',
            x: 376,
            y: 254,
            w: 57,
            h: 61,
            p: 33
        }, {
            f: 'pm_container_fighting_v01.png',
            x: 272,
            y: 125,
            w: 57,
            h: 61,
            p: 33
        }, {
            f: 'pm_container_fire_v01.png',
            x: 2,
            y: 317,
            w: 57,
            h: 61,
            p: 33
        }, {
            f: 'pm_container_grass_v01.png',
            x: 61,
            y: 317,
            w: 57,
            h: 61,
            p: 33
        }, {
            f: 'pm_container_normal_v01.png',
            x: 120,
            y: 317,
            w: 57,
            h: 61,
            p: 33
        }, {
            f: 'pm_container_psychic_v01.png',
            x: 179,
            y: 317,
            w: 57,
            h: 61,
            p: 33
        }, {
            f: 'pm_container_water_v01.png',
            x: 238,
            y: 317,
            w: 57,
            h: 61,
            p: 33
        }, {
            f: 'pm_arrow_yellow.png',
            x: 442,
            y: 188,
            w: 33,
            h: 60,
            p: 33
        }, {
            f: 'new.png',
            x: 213,
            y: 270,
            w: 50,
            h: 39,
            p: 33
        }, {
            f: 'pm_btn_x.png',
            x: 297,
            y: 317,
            w: 50,
            h: 49,
            p: 33
        }, {
            f: 'pm_circle_white.png',
            x: 349,
            y: 317,
            w: 50,
            h: 49,
            p: 33
        }, {
            f: 'pm_container_selected.png',
            x: 401,
            y: 317,
            w: 50,
            h: 49,
            p: 33
        }, {
            f: 'pm_button_lookup.png',
            x: 2,
            y: 380,
            w: 48,
            h: 49,
            p: 33
        }, {
            f: 'pm_button_share.png',
            x: 52,
            y: 380,
            w: 48,
            h: 49,
            r: 1,
            p: 33
        }, {
            f: 'pm_button_share_yellow.png',
            x: 102,
            y: 380,
            w: 48,
            h: 49,
            p: 33
        }, {
            f: 'pm_btn_next_v01.png',
            x: 152,
            y: 380,
            w: 48,
            h: 48,
            p: 33
        }, {
            f: 'pm_button_favorite_off.png',
            x: 265,
            y: 270,
            w: 43,
            h: 40,
            t: 4,
            l: 2,
            b: 5,
            r: 3,
            p: 33
        }, {
            f: 'pm_button_favorite_on.png',
            x: 310,
            y: 268,
            w: 43,
            h: 40,
            t: 5,
            l: 2,
            b: 4,
            r: 3,
            p: 33
        }, {
            f: 'pm_container_grey.png',
            x: 202,
            y: 380,
            w: 43,
            h: 42,
            p: 33
        }, {
            f: 'pm_tasks_notification.png',
            x: 435,
            y: 254,
            w: 39,
            h: 39,
            p: 33
        }, {
            f: 'checkMark.png',
            x: 247,
            y: 380,
            w: 36,
            h: 37,
            p: 33
        }, {
            f: 'pm_arrow_white.png',
            x: 453,
            y: 295,
            w: 21,
            h: 36,
            p: 33
        }, {
            f: 'cpLogo.png',
            x: 450,
            y: 106,
            w: 25,
            h: 20,
            p: 33
        }],
        'spritesheets/resources-images-common-currencies1.png': [{
            f: 'pm_currency-coin-stash_v02.png',
            x: 2,
            y: 2,
            w: 237,
            h: 237,
            t: 13,
            l: 8,
            b: 6,
            r: 11,
            p: 34
        }, {
            f: 'pm_candy.png',
            x: 241,
            y: 2,
            w: 63,
            h: 94,
            l: 16,
            r: 15,
            p: 34
        }, {
            f: 'pm_coin.png',
            x: 2,
            y: 241,
            w: 93,
            h: 94,
            r: 1,
            p: 34
        }, {
            f: 'pm_currency-coin-stash_v01.png',
            x: 97,
            y: 241,
            w: 90,
            h: 90,
            p: 34
        }, {
            f: 'pm_pokeball.png',
            x: 189,
            y: 241,
            w: 65,
            h: 66,
            p: 34
        }],
        'spritesheets/resources-images-common-progressBar1.png': [{
            f: 'pm_container_progress-bar-backing-dark.png',
            x: 2,
            y: 2,
            w: 35,
            h: 34,
            p: 35
        }, {
            f: 'pm_container_progress-bar-backing-white.png',
            x: 2,
            y: 38,
            w: 35,
            h: 34,
            p: 35
        }, {
            f: 'pm_container_progress-bar-backing.png',
            x: 39,
            y: 2,
            w: 35,
            h: 34,
            p: 35
        }, {
            f: 'pm_container_progress-bar-backing_v02.png',
            x: 39,
            y: 38,
            w: 35,
            h: 34,
            p: 35
        }, {
            f: 'pm_container_progress-bar-fill.png',
            x: 2,
            y: 74,
            w: 35,
            h: 34,
            p: 35
        }],
        'spritesheets/resources-animations-raidStageCleared1.png': [{
            f: '28.png',
            x: 2,
            y: 2,
            w: 1819,
            h: 1819,
            p: 36
        }, {
            f: '8.png',
            x: 2,
            y: 1823,
            w: 617,
            h: 165,
            t: 1,
            p: 36
        }, {
            f: '5.png',
            x: 621,
            y: 1823,
            w: 554,
            h: 165,
            t: 1,
            p: 36
        }, {
            f: '31.png',
            x: 1177,
            y: 1823,
            w: 48,
            h: 61,
            p: 36
        }, {
            f: '24.png',
            x: 1177,
            y: 1886,
            w: 40,
            h: 41,
            r: 1,
            p: 36
        }, {
            f: '33.png',
            x: 1177,
            y: 1929,
            w: 34,
            h: 32,
            t: 1,
            l: 1,
            b: 1,
            p: 36
        }],
        'spritesheets/resources-animations-raidStageCleared2.png': [{
            f: '2.png',
            x: 2,
            y: 2,
            w: 1593,
            h: 1591,
            b: 2,
            p: 36
        }, {
            f: '17.png',
            x: 2,
            y: 1595,
            w: 561,
            h: 166,
            p: 36
        }, {
            f: '20.png',
            x: 565,
            y: 1595,
            w: 561,
            h: 166,
            p: 36
        }, {
            f: '14.png',
            x: 2,
            y: 1763,
            w: 494,
            h: 166,
            p: 36
        }, {
            f: '11.png',
            x: 498,
            y: 1763,
            w: 494,
            h: 166,
            p: 36
        }, {
            f: '22.png',
            x: 1597,
            y: 2,
            w: 424,
            h: 424,
            p: 36
        }],
        'spritesheets/battle1.png': [{
            f: 'score_container_raid.png',
            x: 2,
            y: 2,
            w: 250,
            h: 155,
            p: 37
        }, {
            f: 'pm_arena_reveal-base_friendly_x2.png',
            x: 2,
            y: 159,
            w: 231,
            h: 226,
            p: 37
        }, {
            f: 'score_container_red.png',
            x: 254,
            y: 2,
            w: 134,
            h: 106,
            p: 37
        }, {
            f: 'score_container_blue.png',
            x: 254,
            y: 110,
            w: 134,
            h: 106,
            p: 37
        }, {
            f: 'bannerTurnMarkerOff.png',
            x: 235,
            y: 218,
            w: 128,
            h: 128,
            p: 37
        }, {
            f: 'bannerTurnMarkerOn.png',
            x: 2,
            y: 387,
            w: 128,
            h: 128,
            p: 37
        }, {
            f: 'network.png',
            x: 235,
            y: 348,
            w: 100,
            h: 75,
            p: 37
        }, {
            f: 'abilityTracker_blue.png',
            x: 365,
            y: 218,
            w: 16,
            h: 93,
            p: 37
        }, {
            f: 'abilityTracker_red.png',
            x: 365,
            y: 313,
            w: 16,
            h: 93,
            p: 37
        }, {
            f: 'pm_arena_container_lighten-fade2-details.png',
            x: 132,
            y: 425,
            w: 86,
            h: 81,
            p: 37
        }, {
            f: 'pm_arena_container_darken-fade3.png',
            x: 220,
            y: 425,
            w: 86,
            h: 81,
            p: 37
        }, {
            f: 'pm_icon_cpu.png',
            x: 308,
            y: 425,
            w: 75,
            h: 25,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 37
        }, {
            f: 'timer_highlight.png',
            x: 308,
            y: 452,
            w: 73,
            h: 59,
            p: 37
        }, {
            f: 'pm_arena_reveal-icon_friendly_x2.png',
            x: 383,
            y: 452,
            w: 65,
            h: 63,
            p: 37
        }, {
            f: 'revealed_btn.png',
            x: 390,
            y: 2,
            w: 52,
            h: 50,
            t: 1,
            b: 1,
            p: 37
        }, {
            f: 'pm_arena-end_container_darkblue_v02.png',
            x: 390,
            y: 54,
            w: 43,
            h: 42,
            p: 37
        }, {
            f: 'timer_container.png',
            x: 132,
            y: 387,
            w: 38,
            h: 27,
            p: 37
        }, {
            f: 'abilityTrackerTurnOn_blue.png',
            x: 172,
            y: 387,
            w: 34,
            h: 34,
            p: 37
        }, {
            f: 'abilityTrackerTurnOn_red.png',
            x: 390,
            y: 98,
            w: 34,
            h: 34,
            p: 37
        }, {
            f: 'timer_bar.png',
            x: 426,
            y: 98,
            w: 28,
            h: 17,
            p: 37
        }, {
            f: 'abilityTrackerTurnOff.png',
            x: 208,
            y: 387,
            w: 22,
            h: 22,
            t: 6,
            l: 6,
            b: 6,
            r: 6,
            p: 37
        }],
        'spritesheets/resources-images-dialogs-common1.png': [{
            f: 'pm_btn_settings_v02.png',
            x: 2,
            y: 2,
            w: 128,
            h: 128,
            p: 38
        }, {
            f: 'pm_btn_circle-blue_v02.png',
            x: 132,
            y: 2,
            w: 91,
            h: 101,
            p: 38
        }, {
            f: 'pm_btn_big-blue.png',
            x: 2,
            y: 132,
            w: 47,
            h: 57,
            p: 38
        }, {
            f: 'pm_btn_big-grey.png',
            x: 51,
            y: 132,
            w: 47,
            h: 57,
            p: 38
        }, {
            f: 'pm_btn_big-yellow.png',
            x: 100,
            y: 132,
            w: 47,
            h: 57,
            p: 38
        }, {
            f: 'pm_container_dialog_v09.png',
            x: 149,
            y: 105,
            w: 57,
            h: 57,
            p: 38
        }, {
            f: 'pm_container_white.png',
            x: 2,
            y: 191,
            w: 49,
            h: 48,
            p: 38
        }, {
            f: 'pm_btn_thin-blue-active.png',
            x: 53,
            y: 191,
            w: 43,
            h: 47,
            p: 38
        }, {
            f: 'pm_btn_thin-blue.png',
            x: 98,
            y: 191,
            w: 43,
            h: 47,
            p: 38
        }, {
            f: 'pm_btn_thin-grey.png',
            x: 143,
            y: 191,
            w: 43,
            h: 47,
            p: 38
        }, {
            f: 'pm_btn_thin-yellow.png',
            x: 225,
            y: 2,
            w: 43,
            h: 47,
            p: 38
        }, {
            f: 'pm_btn_thin-red.png',
            x: 225,
            y: 51,
            w: 42,
            h: 42,
            b: 5,
            r: 1,
            p: 38
        }],
        'spritesheets/resources-images-gifts1.png': [{
            f: 'popup_header.png',
            x: 2,
            y: 2,
            w: 530,
            h: 371,
            p: 39
        }],
        'spritesheets/resources-images-gameResult1.png': [{
            f: 'sparkle.png',
            x: 2,
            y: 2,
            w: 426,
            h: 311,
            p: 40
        }, {
            f: 'stand_blue_lit.png',
            x: 2,
            y: 315,
            w: 309,
            h: 180,
            t: 3,
            p: 40
        }, {
            f: 'stand_red_lit.png',
            x: 430,
            y: 2,
            w: 309,
            h: 183,
            p: 40
        }, {
            f: 'stand_blue.png',
            x: 430,
            y: 187,
            w: 307,
            h: 122,
            t: 61,
            l: 1,
            r: 1,
            p: 40
        }, {
            f: 'stand_red.png',
            x: 430,
            y: 311,
            w: 307,
            h: 122,
            t: 61,
            l: 1,
            r: 1,
            p: 40
        }, {
            f: 'star_piece.png',
            x: 2,
            y: 497,
            w: 254,
            h: 253,
            t: 1,
            b: 1,
            p: 40
        }],
        'spritesheets/fonts-zh-TW1.png': [{
            f: 'pingfang_TC_outline_ZHTW.png',
            x: 0,
            y: 0,
            w: 2106,
            h: 2042,
            t: 2,
            l: 2,
            b: 4,
            r: 4,
            p: 41
        }],
        'spritesheets/fonts-zh-TW2.png': [{
            f: 'pingfang_TC_ZHTW.png',
            x: 2,
            y: 2,
            w: 1785,
            h: 1721,
            t: 3,
            l: 3,
            b: 4,
            r: 4,
            p: 41
        }],
        'spritesheets/resources-images-headerBar1.png': [{
            f: 'pm_hud_top.png',
            x: 2,
            y: 2,
            w: 1542,
            h: 174,
            p: 42
        }, {
            f: 'pm_main_container_hud-top_dropdown_v03.png',
            x: 2,
            y: 178,
            w: 86,
            h: 100,
            p: 42
        }, {
            f: 'pm_container_nav-candy_v01.png',
            x: 90,
            y: 178,
            w: 70,
            h: 68,
            p: 42
        }, {
            f: 'pm_container_nav-pokedollar_v01.png',
            x: 162,
            y: 178,
            w: 70,
            h: 68,
            p: 42
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_9_anim1.png': [{
            f: '6.png',
            x: 2,
            y: 2,
            w: 67,
            h: 692,
            l: 1,
            b: 7,
            r: 1,
            p: 43
        }, {
            f: '2.png',
            x: 71,
            y: 2,
            w: 9,
            h: 9,
            p: 43
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_5_anim1.png': [{
            f: '5.png',
            x: 2,
            y: 2,
            w: 119,
            h: 123,
            p: 44
        }, {
            f: '30.png',
            x: 123,
            y: 2,
            w: 61,
            h: 21,
            b: 1,
            p: 44
        }, {
            f: '26.png',
            x: 123,
            y: 25,
            w: 51,
            h: 41,
            p: 44
        }, {
            f: '27.png',
            x: 123,
            y: 68,
            w: 49,
            h: 44,
            p: 44
        }, {
            f: '29.png',
            x: 2,
            y: 127,
            w: 49,
            h: 29,
            p: 44
        }, {
            f: '14.png',
            x: 2,
            y: 158,
            w: 18,
            h: 47,
            b: 1,
            p: 44
        }, {
            f: '28.png',
            x: 22,
            y: 158,
            w: 46,
            h: 40,
            r: 1,
            p: 44
        }, {
            f: '16.png',
            x: 70,
            y: 127,
            w: 24,
            h: 46,
            p: 44
        }, {
            f: '12.png',
            x: 96,
            y: 127,
            w: 16,
            h: 44,
            p: 44
        }, {
            f: '3.png',
            x: 123,
            y: 114,
            w: 43,
            h: 40,
            p: 44
        }, {
            f: '13.png',
            x: 168,
            y: 114,
            w: 14,
            h: 39,
            b: 1,
            p: 44
        }, {
            f: '15.png',
            x: 114,
            y: 156,
            w: 21,
            h: 37,
            b: 1,
            p: 44
        }, {
            f: '23.png',
            x: 137,
            y: 156,
            w: 30,
            h: 36,
            p: 44
        }, {
            f: '17.png',
            x: 186,
            y: 2,
            w: 29,
            h: 36,
            p: 44
        }, {
            f: '25.png',
            x: 184,
            y: 40,
            w: 29,
            h: 36,
            b: 1,
            p: 44
        }, {
            f: '24.png',
            x: 184,
            y: 78,
            w: 31,
            h: 35,
            p: 44
        }, {
            f: '22.png',
            x: 184,
            y: 115,
            w: 29,
            h: 31,
            p: 44
        }, {
            f: '18.png',
            x: 184,
            y: 148,
            w: 29,
            h: 26,
            p: 44
        }, {
            f: '11.png',
            x: 169,
            y: 176,
            w: 20,
            h: 28,
            p: 44
        }, {
            f: '21.png',
            x: 70,
            y: 175,
            w: 28,
            h: 25,
            p: 44
        }, {
            f: '10.png',
            x: 191,
            y: 176,
            w: 21,
            h: 27,
            p: 44
        }, {
            f: '9.png',
            x: 100,
            y: 173,
            w: 11,
            h: 24,
            p: 44
        }, {
            f: '31.png',
            x: 2,
            y: 207,
            w: 21,
            h: 15,
            p: 44
        }, {
            f: '32.png',
            x: 191,
            y: 205,
            w: 18,
            h: 10,
            p: 44
        }, {
            f: '36.png',
            x: 25,
            y: 202,
            w: 18,
            h: 18,
            p: 44
        }, {
            f: '8.png',
            x: 45,
            y: 206,
            w: 11,
            h: 15,
            p: 44
        }, {
            f: '7.png',
            x: 58,
            y: 200,
            w: 9,
            h: 14,
            p: 44
        }, {
            f: '19.png',
            x: 174,
            y: 68,
            w: 8,
            h: 13,
            b: 1,
            p: 44
        }, {
            f: '20.png',
            x: 45,
            y: 200,
            w: 6,
            h: 4,
            p: 44
        }],
        'spritesheets/resources-animations-medallionEvolution1.png': [{
            f: '10.png',
            x: 2,
            y: 2,
            w: 1153,
            h: 1735,
            l: 1,
            p: 45
        }, {
            f: '8.png',
            x: 1157,
            y: 2,
            w: 355,
            h: 765,
            t: 2,
            p: 45
        }, {
            f: '25.png',
            x: 1514,
            y: 2,
            w: 512,
            h: 513,
            r: 1,
            p: 45
        }, {
            f: '6.png',
            x: 1514,
            y: 517,
            w: 390,
            h: 390,
            b: 1,
            r: 1,
            p: 45
        }, {
            f: '1.png',
            x: 1157,
            y: 769,
            w: 319,
            h: 319,
            p: 45
        }, {
            f: '16.png',
            x: 1478,
            y: 909,
            w: 238,
            h: 315,
            p: 45
        }, {
            f: '12.png',
            x: 1157,
            y: 1090,
            w: 314,
            h: 314,
            p: 45
        }, {
            f: '20.png',
            x: 1906,
            y: 517,
            w: 105,
            h: 312,
            p: 45
        }, {
            f: '14.png',
            x: 1157,
            y: 1406,
            w: 276,
            h: 307,
            p: 45
        }, {
            f: '18.png',
            x: 1435,
            y: 1406,
            w: 173,
            h: 306,
            p: 45
        }, {
            f: '22.png',
            x: 1906,
            y: 831,
            w: 26,
            h: 304,
            p: 45
        }, {
            f: '27.png',
            x: 1473,
            y: 1226,
            w: 142,
            h: 142,
            b: 1,
            r: 1,
            p: 45
        }],
        'spritesheets/resources-animations-medallionEvolution2.png': [{
            f: '4.png',
            x: 2,
            y: 2,
            w: 1374,
            h: 1375,
            p: 45
        }],
        'spritesheets/resources-animations-raidBackground-121.png': [{
            f: '2.png',
            x: 2,
            y: 2,
            w: 311,
            h: 293,
            t: 2,
            l: 1,
            b: 1,
            r: 2,
            p: 46
        }, {
            f: '9.png',
            x: 2,
            y: 297,
            w: 186,
            h: 263,
            t: 16,
            l: 24,
            b: 11,
            r: 26,
            p: 46
        }, {
            f: '12.png',
            x: 190,
            y: 297,
            w: 72,
            h: 29,
            p: 46
        }, {
            f: '5.png',
            x: 264,
            y: 297,
            w: 8,
            h: 60,
            r: 1,
            p: 46
        }],
        'spritesheets/resources-animations-quiz-pm_ftue_pokemon_reveal1.png': [{
            f: '26.png',
            x: 2,
            y: 2,
            w: 300,
            h: 300,
            p: 47
        }, {
            f: '53.png',
            x: 304,
            y: 2,
            w: 300,
            h: 300,
            p: 47
        }, {
            f: '6.png',
            x: 2,
            y: 304,
            w: 246,
            h: 247,
            p: 47
        }, {
            f: '29.png',
            x: 250,
            y: 304,
            w: 198,
            h: 211,
            p: 47
        }, {
            f: '32.png',
            x: 2,
            y: 553,
            w: 185,
            h: 189,
            p: 47
        }, {
            f: '9.png',
            x: 450,
            y: 304,
            w: 140,
            h: 140,
            b: 1,
            r: 1,
            p: 47
        }],
        'spritesheets/resources-animations-spinner1.png': [{
            f: '32.png',
            x: 2,
            y: 2,
            w: 76,
            h: 146,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 48
        }, {
            f: '22.png',
            x: 80,
            y: 2,
            w: 142,
            h: 142,
            p: 48
        }, {
            f: '16.png',
            x: 2,
            y: 150,
            w: 70,
            h: 108,
            l: 1,
            b: 1,
            r: 1,
            p: 48
        }, {
            f: '2.png',
            x: 74,
            y: 150,
            w: 50,
            h: 107,
            p: 48
        }, {
            f: '10.png',
            x: 126,
            y: 146,
            w: 40,
            h: 40,
            p: 48
        }],
        'spritesheets/resources-animations-tutorial-pm_tutorial1.png': [{
            f: '15.png',
            x: 2,
            y: 2,
            w: 147,
            h: 174,
            p: 49
        }, {
            f: '10.png',
            x: 151,
            y: 2,
            w: 90,
            h: 90,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 49
        }, {
            f: '3.png',
            x: 2,
            y: 178,
            w: 78,
            h: 83,
            t: 5,
            l: 5,
            b: 2,
            r: 4,
            p: 49
        }, {
            f: '6.png',
            x: 82,
            y: 178,
            w: 77,
            h: 80,
            t: 8,
            l: 6,
            b: 2,
            r: 4,
            p: 49
        }],
        'spritesheets/fonts-latin1.png': [{
            f: 'source_sans_pro_bold_outline_out.png',
            x: 2,
            y: 2,
            w: 438,
            h: 376,
            t: 4,
            l: 2,
            b: 4,
            r: 8,
            p: 50
        }, {
            f: 'source_sans_pro_bold_outline_in.png',
            x: 2,
            y: 380,
            w: 431,
            h: 369,
            t: 7,
            l: 6,
            b: 8,
            r: 11,
            p: 50
        }, {
            f: 'source_sans_pro_regular.png',
            x: 442,
            y: 2,
            w: 313,
            h: 312,
            t: 4,
            l: 3,
            b: 4,
            r: 4,
            p: 50
        }, {
            f: 'futura_condensed_xbold.png',
            x: 442,
            y: 316,
            w: 180,
            h: 119,
            t: 3,
            l: 3,
            b: 6,
            r: 9,
            p: 50
        }],
        'spritesheets/resources-animations-wishes1.png': [{
            f: '2.png',
            x: 2,
            y: 2,
            w: 562,
            h: 86,
            l: 20,
            b: 2,
            p: 51
        }, {
            f: '138.png',
            x: 2,
            y: 90,
            w: 446,
            h: 340,
            p: 51
        }, {
            f: '109.png',
            x: 2,
            y: 432,
            w: 411,
            h: 411,
            t: 2,
            l: 2,
            b: 2,
            r: 2,
            p: 51
        }, {
            f: '18.png',
            x: 566,
            y: 2,
            w: 389,
            h: 389,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 51
        }, {
            f: '11.png',
            x: 415,
            y: 432,
            w: 380,
            h: 380,
            t: 11,
            l: 11,
            b: 12,
            r: 12,
            p: 51
        }, {
            f: '66.png',
            x: 2,
            y: 845,
            w: 227,
            h: 304,
            p: 51
        }, {
            f: '63.png',
            x: 231,
            y: 845,
            w: 227,
            h: 304,
            p: 51
        }, {
            f: '105.png',
            x: 460,
            y: 814,
            w: 298,
            h: 299,
            t: 1,
            l: 1,
            r: 1,
            p: 51
        }, {
            f: '72.png',
            x: 957,
            y: 2,
            w: 217,
            h: 254,
            b: 2,
            r: 1,
            p: 51
        }, {
            f: '120.png',
            x: 760,
            y: 814,
            w: 249,
            h: 254,
            t: 1,
            l: 1,
            b: 5,
            r: 5,
            p: 51
        }, {
            f: '129.png',
            x: 797,
            y: 393,
            w: 247,
            h: 208,
            t: 1,
            l: 1,
            b: 3,
            r: 6,
            p: 51
        }, {
            f: '68.png',
            x: 2,
            y: 1151,
            w: 244,
            h: 242,
            r: 1,
            p: 51
        }, {
            f: '14.png',
            x: 248,
            y: 1151,
            w: 81,
            h: 234,
            t: 12,
            b: 5,
            r: 3,
            p: 51
        }, {
            f: '55.png',
            x: 331,
            y: 1151,
            w: 222,
            h: 224,
            p: 51
        }, {
            f: '70.png',
            x: 555,
            y: 1115,
            w: 213,
            h: 213,
            t: 5,
            l: 5,
            b: 5,
            r: 5,
            p: 51
        }, {
            f: '123.png',
            x: 797,
            y: 603,
            w: 208,
            h: 205,
            b: 4,
            r: 3,
            p: 51
        }, {
            f: '111.png',
            x: 1007,
            y: 603,
            w: 115,
            h: 207,
            p: 51
        }, {
            f: '24.png',
            x: 1011,
            y: 812,
            w: 160,
            h: 203,
            p: 51
        }, {
            f: '117.png',
            x: 770,
            y: 1070,
            w: 192,
            h: 197,
            t: 1,
            b: 5,
            r: 5,
            p: 51
        }, {
            f: '126.png',
            x: 964,
            y: 1070,
            w: 193,
            h: 176,
            p: 51
        }, {
            f: '26.png',
            x: 1176,
            y: 2,
            w: 187,
            h: 188,
            r: 1,
            p: 51
        }, {
            f: '140.png',
            x: 1176,
            y: 192,
            w: 185,
            h: 78,
            p: 51
        }, {
            f: '74.png',
            x: 964,
            y: 1248,
            w: 169,
            h: 144,
            p: 51
        }, {
            f: '29.png',
            x: 957,
            y: 272,
            w: 160,
            h: 108,
            p: 51
        }, {
            f: '32.png',
            x: 1135,
            y: 1248,
            w: 158,
            h: 135,
            p: 51
        }, {
            f: '146.png',
            x: 1173,
            y: 272,
            w: 157,
            h: 153,
            p: 51
        }, {
            f: '93.png',
            x: 1173,
            y: 427,
            w: 150,
            h: 130,
            p: 51
        }, {
            f: '4.png',
            x: 1173,
            y: 559,
            w: 141,
            h: 142,
            t: 2,
            l: 1,
            r: 2,
            p: 51
        }, {
            f: '135.png',
            x: 1046,
            y: 382,
            w: 125,
            h: 115,
            p: 51
        }, {
            f: '6.png',
            x: 770,
            y: 1269,
            w: 116,
            h: 116,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 51
        }, {
            f: '78.png',
            x: 450,
            y: 90,
            w: 110,
            h: 110,
            p: 51
        }, {
            f: '83.png',
            x: 450,
            y: 202,
            w: 110,
            h: 110,
            p: 51
        }, {
            f: '90.png',
            x: 1124,
            y: 703,
            w: 23,
            h: 103,
            t: 4,
            l: 28,
            b: 4,
            r: 30,
            p: 51
        }, {
            f: '142.png',
            x: 1011,
            y: 1017,
            w: 101,
            h: 46,
            p: 51
        }, {
            f: '155.png',
            x: 1046,
            y: 499,
            w: 90,
            h: 90,
            t: 1,
            l: 1,
            b: 1,
            r: 2,
            p: 51
        }, {
            f: '156.png',
            x: 1149,
            y: 703,
            w: 90,
            h: 90,
            t: 1,
            l: 1,
            b: 1,
            r: 2,
            p: 51
        }, {
            f: '96.png',
            x: 450,
            y: 314,
            w: 80,
            h: 87,
            t: 2,
            l: 6,
            b: 5,
            r: 5,
            p: 51
        }, {
            f: '133.png',
            x: 1241,
            y: 703,
            w: 80,
            h: 80,
            p: 51
        }, {
            f: '80.png',
            x: 1241,
            y: 785,
            w: 78,
            h: 79,
            p: 51
        }, {
            f: '144.png',
            x: 1114,
            y: 1017,
            w: 77,
            h: 42,
            r: 1,
            p: 51
        }, {
            f: '36.png',
            x: 888,
            y: 1269,
            w: 70,
            h: 42,
            p: 51
        }, {
            f: '8.png',
            x: 1119,
            y: 258,
            w: 52,
            h: 52,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 51
        }, {
            f: '33.png',
            x: 1124,
            y: 591,
            w: 47,
            h: 47,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 51
        }, {
            f: '43.png',
            x: 1193,
            y: 795,
            w: 44,
            h: 45,
            r: 1,
            p: 51
        }, {
            f: '106.png',
            x: 1193,
            y: 842,
            w: 44,
            h: 44,
            p: 51
        }, {
            f: '15.png',
            x: 1316,
            y: 559,
            w: 44,
            h: 44,
            p: 51
        }, {
            f: '53.png',
            x: 1046,
            y: 591,
            w: 40,
            h: 10,
            b: 1,
            p: 51
        }, {
            f: '84.png',
            x: 1323,
            y: 605,
            w: 40,
            h: 40,
            p: 51
        }, {
            f: '130.png',
            x: 1323,
            y: 647,
            w: 39,
            h: 40,
            r: 1,
            p: 51
        }, {
            f: '113.png',
            x: 532,
            y: 393,
            w: 37,
            h: 37,
            b: 1,
            r: 1,
            p: 51
        }, {
            f: '59.png',
            x: 460,
            y: 1115,
            w: 34,
            h: 34,
            b: 2,
            r: 2,
            p: 51
        }, {
            f: '101.png',
            x: 331,
            y: 1377,
            w: 33,
            h: 16,
            p: 51
        }, {
            f: '45.png',
            x: 1114,
            y: 1061,
            w: 28,
            h: 7,
            b: 1,
            p: 51
        }, {
            f: '51.png',
            x: 1144,
            y: 1061,
            w: 26,
            h: 7,
            p: 51
        }, {
            f: '47.png',
            x: 1135,
            y: 1385,
            w: 26,
            h: 7,
            p: 51
        }, {
            f: '49.png',
            x: 248,
            y: 1387,
            w: 23,
            h: 6,
            p: 51
        }, {
            f: '103.png',
            x: 957,
            y: 258,
            w: 20,
            h: 12,
            r: 1,
            p: 51
        }],
        'spritesheets/fonts-ja1.png': [{
            f: 'hiragino-kaku-gs-bold_white-outline_JP1_e.png',
            x: 2,
            y: 2,
            w: 1337,
            h: 1274,
            t: 2,
            l: 2,
            b: 4,
            r: 5,
            p: 52
        }],
        'spritesheets/fonts-ja2.png': [{
            f: 'hiragino-kaku-gs-bold_white_JP1_e.png',
            x: 2,
            y: 2,
            w: 1145,
            h: 1081,
            t: 3,
            l: 3,
            b: 4,
            r: 4,
            p: 52
        }],
        'spritesheets/fonts-ja3.png': [{
            f: 'hiragino-kaku-gp_white_JP1_e.png',
            x: 2,
            y: 2,
            w: 1081,
            h: 1017,
            t: 3,
            l: 3,
            b: 4,
            r: 4,
            p: 52
        }],
        'spritesheets/resources-images-raid1.png': [{
            f: 'pm_main_btn_back-to-gym.png',
            x: 2,
            y: 2,
            w: 205,
            h: 215,
            p: 53
        }, {
            f: 'pm_raid_platform_v01.png',
            x: 209,
            y: 2,
            w: 210,
            h: 86,
            t: 1,
            l: 2,
            r: 2,
            p: 53
        }, {
            f: 'pm_raid_btn_rank.png',
            x: 209,
            y: 90,
            w: 88,
            h: 92,
            p: 53
        }, {
            f: 'pm_raid_btn_team.png',
            x: 299,
            y: 90,
            w: 88,
            h: 92,
            p: 53
        }, {
            f: 'gymMedal_whiteStroke.png',
            x: 2,
            y: 219,
            w: 56,
            h: 52,
            t: 1,
            b: 1,
            p: 53
        }, {
            f: 'versus_icon.png',
            x: 60,
            y: 219,
            w: 49,
            h: 31,
            p: 53
        }, {
            f: 'pm_btn_home.png',
            x: 111,
            y: 219,
            w: 47,
            h: 48,
            l: 1,
            b: 1,
            r: 1,
            p: 53
        }, {
            f: 'pm_icon_crown_stroked.png',
            x: 160,
            y: 219,
            w: 44,
            h: 25,
            p: 53
        }, {
            f: 'pm_raid_icon-raid-pass.png',
            x: 206,
            y: 219,
            w: 35,
            h: 37,
            p: 53
        }],
        'spritesheets/resources-images-raidProgressBar1.png': [{
            f: 'avatar_marker.png',
            x: 2,
            y: 2,
            w: 162,
            h: 182,
            t: 20,
            p: 54
        }, {
            f: 'progress-bar-hp-left.png',
            x: 166,
            y: 2,
            w: 35,
            h: 34,
            p: 54
        }, {
            f: 'progress-bar-hp-right.png',
            x: 166,
            y: 38,
            w: 35,
            h: 34,
            p: 54
        }, {
            f: 'progress-bar-left.png',
            x: 166,
            y: 74,
            w: 35,
            h: 34,
            p: 54
        }, {
            f: 'progress-bar-right.png',
            x: 166,
            y: 110,
            w: 35,
            h: 34,
            p: 54
        }, {
            f: 'progress-bar-middle.png',
            x: 166,
            y: 146,
            w: 17,
            h: 34,
            p: 54
        }],
        'spritesheets/resources-images-ranking1.png': [{
            f: 'season_switch.png',
            x: 2,
            y: 2,
            w: 83,
            h: 83,
            p: 55
        }, {
            f: 'pm_medal_bronze.png',
            x: 87,
            y: 2,
            w: 55,
            h: 58,
            p: 55
        }, {
            f: 'pm_medal_gold.png',
            x: 87,
            y: 62,
            w: 55,
            h: 58,
            p: 55
        }, {
            f: 'pm_medal_silver.png',
            x: 2,
            y: 87,
            w: 55,
            h: 58,
            p: 55
        }, {
            f: 'pm_icon_rank_transparent.png',
            x: 144,
            y: 2,
            w: 49,
            h: 45,
            p: 55
        }],
        'spritesheets/resources-images-settingScreen1.png': [{
            f: 'pm_settings_module_bg.png',
            x: 2,
            y: 2,
            w: 413,
            h: 126,
            b: 1,
            r: 1,
            p: 56
        }, {
            f: 'pm_settings_icon_music_off.png',
            x: 2,
            y: 130,
            w: 44,
            h: 46,
            p: 56
        }, {
            f: 'pm_settings_icon_music_on.png',
            x: 48,
            y: 130,
            w: 44,
            h: 46,
            p: 56
        }, {
            f: 'pm_settings_icon_pokemon-preview_off.png',
            x: 94,
            y: 130,
            w: 44,
            h: 46,
            p: 56
        }, {
            f: 'pm_settings_icon_pokemon-preview_on.png',
            x: 140,
            y: 130,
            w: 44,
            h: 46,
            p: 56
        }, {
            f: 'pm_settings_icon_sound_off.png',
            x: 186,
            y: 130,
            w: 44,
            h: 46,
            p: 56
        }, {
            f: 'pm_settings_icon_sound_on.png',
            x: 232,
            y: 130,
            w: 44,
            h: 46,
            p: 56
        }, {
            f: 'pm_settins_toggle_backing_off.png',
            x: 278,
            y: 130,
            w: 41,
            h: 41,
            p: 56
        }, {
            f: 'pm_settins_toggle_backing_on.png',
            x: 321,
            y: 130,
            w: 41,
            h: 41,
            p: 56
        }],
        'spritesheets/pokemonTypes1.png': [{
            f: 'black_circle_border.png',
            x: 2,
            y: 2,
            w: 190,
            h: 190,
            p: 57
        }, {
            f: 'white_circle_border.png',
            x: 194,
            y: 2,
            w: 190,
            h: 190,
            p: 57
        }, {
            f: 'pm_icon_no_water.png',
            x: 2,
            y: 194,
            w: 178,
            h: 178,
            t: 13,
            l: 13,
            b: 14,
            r: 13,
            p: 57
        }, {
            f: 'pm_icon_electric.png',
            x: 182,
            y: 194,
            w: 178,
            h: 178,
            t: 14,
            l: 13,
            b: 13,
            r: 14,
            p: 57
        }, {
            f: 'pm_icon_fire.png',
            x: 2,
            y: 374,
            w: 178,
            h: 178,
            t: 14,
            l: 13,
            b: 13,
            r: 14,
            p: 57
        }, {
            f: 'pm_icon_water.png',
            x: 182,
            y: 374,
            w: 178,
            h: 178,
            t: 14,
            l: 13,
            b: 13,
            r: 14,
            p: 57
        }, {
            f: 'pm_icon_grass.png',
            x: 386,
            y: 2,
            w: 178,
            h: 178,
            t: 14,
            l: 13,
            b: 13,
            r: 14,
            p: 57
        }, {
            f: 'pm_icon_psychic.png',
            x: 386,
            y: 182,
            w: 178,
            h: 178,
            t: 14,
            l: 13,
            b: 13,
            r: 14,
            p: 57
        }, {
            f: 'pm_icon_no_fighting.png',
            x: 362,
            y: 362,
            w: 178,
            h: 178,
            t: 14,
            l: 13,
            b: 13,
            r: 13,
            p: 57
        }, {
            f: 'pm_icon_dragon.png',
            x: 2,
            y: 554,
            w: 178,
            h: 178,
            t: 14,
            l: 13,
            b: 13,
            r: 14,
            p: 57
        }, {
            f: 'pm_icon_fighting.png',
            x: 182,
            y: 554,
            w: 178,
            h: 178,
            t: 14,
            l: 13,
            b: 13,
            r: 14,
            p: 57
        }, {
            f: 'pm_icon_normal.png',
            x: 362,
            y: 542,
            w: 178,
            h: 178,
            t: 14,
            l: 13,
            b: 13,
            r: 14,
            p: 57
        }, {
            f: 'pm_icon_no_normal.png',
            x: 566,
            y: 2,
            w: 178,
            h: 178,
            t: 14,
            l: 13,
            b: 13,
            r: 13,
            p: 57
        }, {
            f: 'pm_icon_tier2.png',
            x: 566,
            y: 182,
            w: 80,
            h: 80,
            t: 5,
            l: 5,
            b: 5,
            r: 5,
            p: 57
        }, {
            f: 'pm_icon_tier3.png',
            x: 648,
            y: 182,
            w: 80,
            h: 80,
            t: 5,
            l: 5,
            b: 5,
            r: 5,
            p: 57
        }, {
            f: 'pm_icon_tier1.png',
            x: 566,
            y: 264,
            w: 79,
            h: 78,
            t: 5,
            l: 6,
            b: 7,
            r: 5,
            p: 57
        }, {
            f: 'pm_icon_legendary.png',
            x: 647,
            y: 264,
            w: 78,
            h: 78,
            t: 6,
            l: 6,
            b: 6,
            r: 6,
            p: 57
        }, {
            f: 'pm_icon_fossil.png',
            x: 566,
            y: 344,
            w: 78,
            h: 78,
            t: 6,
            l: 6,
            b: 6,
            r: 6,
            p: 57
        }],
        'spritesheets/resources-images-shopScreen1.png': [{
            f: 'leagueSilverPack.png',
            x: 2,
            y: 2,
            w: 78,
            h: 94,
            t: 12,
            l: 16,
            b: 4,
            r: 16,
            p: 58
        }, {
            f: 'goldPack.png',
            x: 82,
            y: 2,
            w: 78,
            h: 94,
            t: 12,
            l: 16,
            b: 4,
            r: 16,
            p: 58
        }, {
            f: 'gymPack.png',
            x: 2,
            y: 98,
            w: 78,
            h: 94,
            t: 12,
            l: 16,
            b: 4,
            r: 16,
            p: 58
        }, {
            f: 'leagueBronzePack.png',
            x: 82,
            y: 98,
            w: 78,
            h: 94,
            t: 12,
            l: 16,
            b: 4,
            r: 16,
            p: 58
        }, {
            f: 'leagueGoldPack.png',
            x: 162,
            y: 2,
            w: 78,
            h: 94,
            t: 12,
            l: 16,
            b: 4,
            r: 16,
            p: 58
        }, {
            f: 'leaguePack.png',
            x: 162,
            y: 98,
            w: 78,
            h: 94,
            t: 12,
            l: 16,
            b: 4,
            r: 16,
            p: 58
        }, {
            f: 'silverPack.png',
            x: 2,
            y: 194,
            w: 78,
            h: 94,
            t: 12,
            l: 16,
            b: 4,
            r: 16,
            p: 58
        }, {
            f: 'pm_icon_videoad.png',
            x: 82,
            y: 194,
            w: 88,
            h: 80,
            p: 58
        }, {
            f: 'starMedal.png',
            x: 242,
            y: 2,
            w: 84,
            h: 78,
            t: 32,
            l: 13,
            r: 13,
            p: 58
        }, {
            f: 'gymMedal.png',
            x: 242,
            y: 82,
            w: 82,
            h: 76,
            t: 31,
            l: 14,
            b: 3,
            r: 14,
            p: 58
        }, {
            f: 'pm_container_coming-soon.png',
            x: 242,
            y: 160,
            w: 50,
            h: 49,
            p: 58
        }, {
            f: 'pm_icon_clock_v01.png',
            x: 294,
            y: 160,
            w: 23,
            h: 23,
            p: 58
        }],
        'spritesheets/resources-images-shopScreen-11.png': [{
            f: 'pm_container_shop_regular.png',
            x: 2,
            y: 2,
            w: 64,
            h: 64,
            p: 58
        }],
        'spritesheets/resources-images-spinner1.png': [{
            f: 'spinner.png',
            x: 2,
            y: 2,
            w: 153,
            h: 139,
            t: 14,
            l: 14,
            b: 14,
            p: 59
        }],
        'spritesheets/resources-images-taskScreen1.png': [{
            f: 'pm_tasks_module-background.png',
            x: 2,
            y: 2,
            w: 541,
            h: 126,
            b: 1,
            r: 1,
            p: 60
        }, {
            f: 'pm_container_tasks_overlay.png',
            x: 2,
            y: 130,
            w: 153,
            h: 17,
            p: 60
        }, {
            f: 'pm_tasks_bigmedalpack_collected.png',
            x: 2,
            y: 149,
            w: 86,
            h: 102,
            t: 8,
            l: 12,
            r: 12,
            p: 60
        }, {
            f: 'pm_tasks_bigmedalpack_ready.png',
            x: 90,
            y: 149,
            w: 86,
            h: 102,
            t: 8,
            l: 12,
            r: 12,
            p: 60
        }, {
            f: 'pm_tasks_singlepack_collected.png',
            x: 178,
            y: 130,
            w: 90,
            h: 83,
            t: 27,
            l: 10,
            r: 10,
            p: 60
        }, {
            f: 'pm_tasks_singlepack_ready.png',
            x: 270,
            y: 130,
            w: 90,
            h: 83,
            t: 27,
            l: 10,
            r: 10,
            p: 60
        }, {
            f: 'pm_tasks_icon_checkmark_currency.png',
            x: 362,
            y: 130,
            w: 47,
            h: 47,
            p: 60
        }, {
            f: 'pm_arena-end_container_navyblue_v02.png',
            x: 362,
            y: 179,
            w: 43,
            h: 42,
            p: 60
        }],
        'spritesheets/resources-images-worldRankingScreen-flags1.png': [{
            f: 'pm_flag_border.png',
            x: 2,
            y: 2,
            w: 300,
            h: 210,
            p: 61
        }, {
            f: 'HK.png',
            x: 2,
            y: 214,
            w: 146,
            h: 97,
            p: 61
        }, {
            f: 'IN.png',
            x: 150,
            y: 214,
            w: 146,
            h: 97,
            p: 61
        }, {
            f: 'JP.png',
            x: 298,
            y: 214,
            w: 146,
            h: 97,
            p: 61
        }, {
            f: 'MY.png',
            x: 304,
            y: 2,
            w: 146,
            h: 97,
            p: 61
        }, {
            f: 'ID.png',
            x: 304,
            y: 101,
            w: 146,
            h: 97,
            p: 61
        }, {
            f: 'SG.png',
            x: 2,
            y: 313,
            w: 146,
            h: 97,
            p: 61
        }, {
            f: 'TH.png',
            x: 150,
            y: 313,
            w: 146,
            h: 97,
            p: 61
        }, {
            f: 'TW.png',
            x: 298,
            y: 313,
            w: 146,
            h: 97,
            p: 61
        }, {
            f: 'global.png',
            x: 2,
            y: 412,
            w: 146,
            h: 97,
            p: 61
        }, {
            f: 'PH.png',
            x: 150,
            y: 412,
            w: 146,
            h: 97,
            p: 61
        }],
        'spritesheets/resources-images-worldRankingScreen1.png': [{
            f: 'pm_item_leagueBronzePack.png',
            x: 2,
            y: 2,
            w: 88,
            h: 105,
            t: 2,
            l: 12,
            b: 3,
            r: 10,
            p: 62
        }, {
            f: 'pm_item_leagueGoldPack.png',
            x: 92,
            y: 2,
            w: 88,
            h: 105,
            t: 2,
            l: 12,
            b: 3,
            r: 10,
            p: 62
        }, {
            f: 'pm_item_leagueSilverPack.png',
            x: 2,
            y: 109,
            w: 88,
            h: 105,
            t: 2,
            l: 12,
            b: 3,
            r: 10,
            p: 62
        }, {
            f: 'pm_item_leagueGoldMedal.png',
            x: 92,
            y: 109,
            w: 77,
            h: 71,
            t: 34,
            l: 17,
            b: 5,
            r: 16,
            p: 62
        }, {
            f: 'pm_item_leagueBronzeMedal.png',
            x: 182,
            y: 2,
            w: 74,
            h: 68,
            t: 38,
            l: 18,
            b: 4,
            r: 18,
            p: 62
        }, {
            f: 'pm_item_leagueSilverMedal.png',
            x: 182,
            y: 72,
            w: 74,
            h: 68,
            t: 38,
            l: 18,
            b: 4,
            r: 18,
            p: 62
        }],
        'spritesheets/resources-images-landing1.png': [{
            f: 'pm_main_btn-tasks_v03.png',
            x: 2,
            y: 2,
            w: 204,
            h: 214,
            p: 63
        }, {
            f: 'pm_main_btn_challenge_v02.png',
            x: 208,
            y: 2,
            w: 204,
            h: 214,
            p: 63
        }, {
            f: 'pm_main_icon_invite.png',
            x: 2,
            y: 218,
            w: 88,
            h: 92,
            p: 63
        }, {
            f: 'pm_button_gift.png',
            x: 92,
            y: 218,
            w: 48,
            h: 49,
            p: 63
        }, {
            f: 'pm_button_leaderboard.png',
            x: 142,
            y: 218,
            w: 49,
            h: 49,
            p: 63
        }, {
            f: 'pm_challenge_background.png',
            x: 193,
            y: 218,
            w: 44,
            h: 43,
            p: 63
        }, {
            f: 'pm_arena_container_lightenfade1.png',
            x: 92,
            y: 269,
            w: 43,
            h: 40,
            p: 63
        }, {
            f: 'global_yellow.png',
            x: 137,
            y: 269,
            w: 39,
            h: 26,
            p: 63
        }],
        'spritesheets/resources-images-landing-popin1.png': [{
            f: 'pm_challenge_referral_image_challenger.png',
            x: 2,
            y: 2,
            w: 327,
            h: 171,
            p: 64
        }, {
            f: 'pm_challenge_referral_image_v2.png',
            x: 2,
            y: 175,
            w: 319,
            h: 167,
            p: 64
        }],
        'spritesheets/resources-images-landing-raid1.png': [{
            f: 'pm_main_btn_event-default.png',
            x: 2,
            y: 2,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-deoxys.png',
            x: 209,
            y: 2,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-entei.png',
            x: 2,
            y: 219,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-groudon.png',
            x: 209,
            y: 219,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-kyogre.png',
            x: 416,
            y: 2,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-mew.png',
            x: 416,
            y: 219,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-mewtwo.png',
            x: 2,
            y: 436,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-moltres.png',
            x: 209,
            y: 436,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-raikou.png',
            x: 416,
            y: 436,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-regice.png',
            x: 623,
            y: 2,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-regirock.png',
            x: 623,
            y: 219,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-registeel.png',
            x: 623,
            y: 436,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-suicune.png',
            x: 2,
            y: 653,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-zapdos.png',
            x: 209,
            y: 653,
            w: 205,
            h: 215,
            p: 65
        }, {
            f: 'pm_main_btn_event-articuno.png',
            x: 416,
            y: 653,
            w: 205,
            h: 210,
            p: 65
        }],
        'spritesheets/resources-images-pokedexEntryPopup1.png': [{
            f: 'pm_container_dropdown_v01.png',
            x: 2,
            y: 2,
            w: 45,
            h: 45,
            p: 66
        }],
        'spritesheets/resources-images-playerHud1.png': [{
            f: 'avatar_frame.png',
            x: 2,
            y: 2,
            w: 162,
            h: 162,
            p: 67
        }, {
            f: 'avatar_mask.png',
            x: 166,
            y: 2,
            w: 156,
            h: 156,
            t: 3,
            l: 3,
            b: 3,
            r: 3,
            p: 67
        }, {
            f: 'defaultAvatar.jpg',
            x: 2,
            y: 166,
            w: 128,
            h: 128,
            p: 67
        }, {
            f: 'blue_player_bar.png',
            x: 132,
            y: 166,
            w: 87,
            h: 81,
            p: 67
        }, {
            f: 'red_player_bar.png',
            x: 221,
            y: 160,
            w: 87,
            h: 81,
            p: 67
        }],
        'spritesheets/resources-images-pokedexScreen1.png': [{
            f: 'pm_pokedex_bg_v01.jpg',
            x: 2,
            y: 2,
            w: 768,
            h: 1024,
            p: 68
        }],
        'spritesheets/pokemonAbilities1.png': [{
            f: 'pm_icon_abilities_se_grass.png',
            x: 2,
            y: 2,
            w: 128,
            h: 128,
            t: 1,
            l: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_arena.png',
            x: 132,
            y: 2,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_hazard.png',
            x: 2,
            y: 132,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_priority.png',
            x: 132,
            y: 132,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_protect.png',
            x: 262,
            y: 2,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_reveal.png',
            x: 262,
            y: 132,
            w: 128,
            h: 128,
            l: 1,
            b: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_se_electric.png',
            x: 2,
            y: 262,
            w: 128,
            h: 128,
            t: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_se_fighting.png',
            x: 132,
            y: 262,
            w: 128,
            h: 128,
            t: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_se_fire.png',
            x: 262,
            y: 262,
            w: 128,
            h: 128,
            t: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_clearance.png',
            x: 392,
            y: 2,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_se_legendary.png',
            x: 392,
            y: 132,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_se_normal.png',
            x: 392,
            y: 262,
            w: 128,
            h: 128,
            t: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_se_psychic.png',
            x: 2,
            y: 392,
            w: 128,
            h: 128,
            t: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_se_tier1.png',
            x: 132,
            y: 392,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_se_tier2.png',
            x: 262,
            y: 392,
            w: 128,
            h: 128,
            l: 1,
            b: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_se_tier3.png',
            x: 392,
            y: 392,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_se_water.png',
            x: 522,
            y: 2,
            w: 128,
            h: 128,
            t: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_sleep.png',
            x: 522,
            y: 132,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 69
        }, {
            f: 'pm_icon_abilities_wish.png',
            x: 522,
            y: 262,
            w: 128,
            h: 128,
            b: 1,
            r: 1,
            p: 69
        }],
        'spritesheets/medallion1.png': [{
            f: 'glowLargeMedallion.png',
            x: 2,
            y: 2,
            w: 288,
            h: 288,
            p: 70
        }, {
            f: 'pm_medal_gold-bezel.png',
            x: 292,
            y: 2,
            w: 257,
            h: 255,
            t: 2,
            p: 70
        }, {
            f: 'pm_medal_mini_gold-bezel.png',
            x: 292,
            y: 259,
            w: 257,
            h: 256,
            t: 1,
            p: 70
        }, {
            f: 'pm_medal_white_bezel.png',
            x: 2,
            y: 292,
            w: 256,
            h: 256,
            p: 70
        }, {
            f: 'pm_medal_mini_white_bezel.png',
            x: 2,
            y: 550,
            w: 256,
            h: 256,
            p: 70
        }, {
            f: 'pm_medal-back_2.png',
            x: 260,
            y: 517,
            w: 252,
            h: 254,
            t: 2,
            l: 2,
            r: 2,
            p: 70
        }, {
            f: 'pm_medal-back_3.png',
            x: 551,
            y: 2,
            w: 252,
            h: 253,
            t: 2,
            l: 2,
            b: 1,
            r: 2,
            p: 70
        }, {
            f: 'pm_medal-back_1.png',
            x: 551,
            y: 257,
            w: 252,
            h: 252,
            t: 2,
            l: 2,
            b: 2,
            r: 2,
            p: 70
        }, {
            f: 'pm_medal_rarity_star.png',
            x: 551,
            y: 511,
            w: 232,
            h: 221,
            t: 18,
            l: 12,
            b: 17,
            r: 12,
            p: 70
        }, {
            f: 'glowSmallMedallionAbility.png',
            x: 805,
            y: 2,
            w: 227,
            h: 228,
            l: 1,
            b: 2,
            r: 2,
            p: 70
        }, {
            f: 'glowSmallMedallionNoAbility.png',
            x: 805,
            y: 232,
            w: 227,
            h: 227,
            l: 1,
            b: 3,
            r: 2,
            p: 70
        }, {
            f: 'pm_medal_tier_2.png',
            x: 514,
            y: 734,
            w: 210,
            h: 59,
            p: 70
        }, {
            f: 'pm_medal_mini_tier_1.png',
            x: 726,
            y: 734,
            w: 210,
            h: 58,
            b: 1,
            p: 70
        }, {
            f: 'pm_medal_mini_tier_2.png',
            x: 805,
            y: 461,
            w: 210,
            h: 59,
            p: 70
        }, {
            f: 'pm_medal_mini_tier_3.png',
            x: 785,
            y: 522,
            w: 210,
            h: 58,
            b: 1,
            p: 70
        }, {
            f: 'pm_medal_tier_1.png',
            x: 785,
            y: 582,
            w: 210,
            h: 59,
            p: 70
        }, {
            f: 'pm_medal_tier_3.png',
            x: 785,
            y: 643,
            w: 210,
            h: 58,
            b: 1,
            p: 70
        }, {
            f: 'pm_medal_type_border.png',
            x: 2,
            y: 808,
            w: 203,
            h: 162,
            t: 1,
            r: 10,
            p: 70
        }, {
            f: 'PMB_logo_small_@207x138.png',
            x: 207,
            y: 808,
            w: 168,
            h: 108,
            t: 12,
            l: 19,
            b: 18,
            r: 20,
            p: 70
        }, {
            f: 'pm_pog-shadow.png',
            x: 785,
            y: 703,
            w: 167,
            h: 20,
            p: 70
        }, {
            f: 'pm_medal_ability_strip.png',
            x: 377,
            y: 773,
            w: 128,
            h: 40,
            p: 70
        }, {
            f: 'pm_medal_legendary.png',
            x: 377,
            y: 815,
            w: 123,
            h: 66,
            p: 70
        }, {
            f: 'pm_medal_fossil.png',
            x: 377,
            y: 883,
            w: 115,
            h: 58,
            t: 4,
            l: 4,
            b: 4,
            r: 4,
            p: 70
        }, {
            f: 'abilityTurnDot.png',
            x: 207,
            y: 943,
            w: 22,
            h: 22,
            p: 70
        }],
        'spritesheets/resources-animations-elementalBackground-efx_grass1.png': [{
            f: '5.png',
            x: 2,
            y: 2,
            w: 666,
            h: 792,
            l: 5,
            r: 6,
            p: 71
        }, {
            f: '2.png',
            x: 670,
            y: 2,
            w: 41,
            h: 20,
            p: 71
        }],
        'spritesheets/resources-animations-elementalBackground-efx_dragon1.png': [{
            f: '4.png',
            x: 2,
            y: 2,
            w: 100,
            h: 530,
            t: 5,
            p: 72
        }, {
            f: '1.png',
            x: 104,
            y: 2,
            w: 59,
            h: 102,
            t: 4,
            p: 72
        }, {
            f: '10.png',
            x: 104,
            y: 106,
            w: 54,
            h: 55,
            p: 72
        }, {
            f: '6.png',
            x: 104,
            y: 163,
            w: 33,
            h: 42,
            p: 72
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_2_anim1.png': [{
            f: '2.png',
            x: 2,
            y: 2,
            w: 31,
            h: 78,
            r: 1,
            p: 73
        }, {
            f: '5.png',
            x: 35,
            y: 2,
            w: 30,
            h: 74,
            b: 1,
            p: 73
        }, {
            f: '8.png',
            x: 67,
            y: 2,
            w: 30,
            h: 16,
            r: 1,
            p: 73
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_6_anim1.png': [{
            f: '35.png',
            x: 2,
            y: 2,
            w: 7,
            h: 196,
            p: 74
        }, {
            f: '10.png',
            x: 11,
            y: 2,
            w: 7,
            h: 196,
            p: 74
        }, {
            f: '14.png',
            x: 20,
            y: 2,
            w: 7,
            h: 196,
            p: 74
        }, {
            f: '6.png',
            x: 29,
            y: 2,
            w: 7,
            h: 196,
            p: 74
        }, {
            f: '18.png',
            x: 38,
            y: 2,
            w: 7,
            h: 196,
            p: 74
        }, {
            f: '51.png',
            x: 47,
            y: 2,
            w: 6,
            h: 196,
            p: 74
        }, {
            f: '22.png',
            x: 55,
            y: 2,
            w: 7,
            h: 196,
            p: 74
        }, {
            f: '47.png',
            x: 64,
            y: 2,
            w: 7,
            h: 196,
            p: 74
        }, {
            f: '26.png',
            x: 73,
            y: 2,
            w: 6,
            h: 196,
            p: 74
        }, {
            f: '43.png',
            x: 81,
            y: 2,
            w: 7,
            h: 196,
            p: 74
        }, {
            f: '39.png',
            x: 90,
            y: 2,
            w: 7,
            h: 196,
            p: 74
        }, {
            f: '31.png',
            x: 99,
            y: 2,
            w: 7,
            h: 196,
            p: 74
        }, {
            f: '24.png',
            x: 108,
            y: 2,
            w: 5,
            h: 176,
            p: 74
        }, {
            f: '33.png',
            x: 115,
            y: 2,
            w: 5,
            h: 176,
            p: 74
        }, {
            f: '53.png',
            x: 122,
            y: 2,
            w: 5,
            h: 176,
            p: 74
        }, {
            f: '49.png',
            x: 129,
            y: 2,
            w: 5,
            h: 176,
            p: 74
        }, {
            f: '28.png',
            x: 136,
            y: 2,
            w: 5,
            h: 176,
            p: 74
        }, {
            f: '8.png',
            x: 143,
            y: 2,
            w: 5,
            h: 176,
            p: 74
        }, {
            f: '41.png',
            x: 150,
            y: 2,
            w: 5,
            h: 175,
            p: 74
        }, {
            f: '45.png',
            x: 157,
            y: 2,
            w: 5,
            h: 175,
            b: 1,
            p: 74
        }, {
            f: '12.png',
            x: 164,
            y: 2,
            w: 5,
            h: 175,
            p: 74
        }, {
            f: '20.png',
            x: 171,
            y: 2,
            w: 5,
            h: 175,
            b: 1,
            p: 74
        }, {
            f: '37.png',
            x: 178,
            y: 2,
            w: 5,
            h: 175,
            p: 74
        }, {
            f: '16.png',
            x: 185,
            y: 2,
            w: 5,
            h: 175,
            p: 74
        }, {
            f: '3.png',
            x: 192,
            y: 2,
            w: 84,
            h: 86,
            p: 74
        }, {
            f: '55.png',
            x: 192,
            y: 90,
            w: 59,
            h: 55,
            b: 1,
            r: 1,
            p: 74
        }, {
            f: '58.png',
            x: 108,
            y: 180,
            w: 18,
            h: 18,
            p: 74
        }],
        'spritesheets/resources-animations-badgeGaining1.png': [{
            f: '8.png',
            x: 2,
            y: 2,
            w: 635,
            h: 635,
            p: 75
        }, {
            f: '10.png',
            x: 639,
            y: 2,
            w: 546,
            h: 546,
            p: 75
        }, {
            f: '3.png',
            x: 2,
            y: 639,
            w: 250,
            h: 250,
            p: 75
        }, {
            f: '14.png',
            x: 254,
            y: 639,
            w: 225,
            h: 75,
            r: 1,
            p: 75
        }, {
            f: '11.png',
            x: 254,
            y: 716,
            w: 87,
            h: 87,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 75
        }, {
            f: '20.png',
            x: 254,
            y: 805,
            w: 1,
            h: 1,
            t: 123,
            l: 123,
            p: 75
        }, {
            f: '6.png',
            x: 254,
            y: 808,
            w: 1,
            h: 1,
            t: 99,
            l: 99,
            p: 75
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_final_anim1.png': [{
            f: '1.png',
            x: 2,
            y: 2,
            w: 143,
            h: 436,
            t: 2,
            l: 1,
            b: 1,
            r: 1,
            p: 76
        }, {
            f: '7.png',
            x: 147,
            y: 2,
            w: 145,
            h: 155,
            p: 76
        }, {
            f: '4.png',
            x: 147,
            y: 159,
            w: 59,
            h: 60,
            r: 1,
            p: 76
        }],
        'spritesheets/resources-animations-generalBattle1.png': [{
            f: '20.png',
            x: 2,
            y: 2,
            w: 469,
            h: 469,
            p: 77
        }, {
            f: '65.png',
            x: 473,
            y: 2,
            w: 413,
            h: 413,
            t: 7,
            l: 7,
            b: 7,
            r: 7,
            p: 77
        }, {
            f: '13.png',
            x: 2,
            y: 473,
            w: 393,
            h: 392,
            t: 5,
            l: 2,
            b: 1,
            r: 3,
            p: 77
        }, {
            f: '4.png',
            x: 397,
            y: 473,
            w: 393,
            h: 392,
            t: 5,
            l: 2,
            b: 1,
            r: 3,
            p: 77
        }, {
            f: '21.png',
            x: 2,
            y: 867,
            w: 327,
            h: 314,
            p: 77
        }, {
            f: '134.png',
            x: 331,
            y: 867,
            w: 239,
            h: 216,
            r: 1,
            p: 77
        }, {
            f: '17.png',
            x: 572,
            y: 867,
            w: 212,
            h: 212,
            p: 77
        }, {
            f: '6.png',
            x: 888,
            y: 2,
            w: 205,
            h: 194,
            t: 3,
            l: 2,
            b: 1,
            r: 2,
            p: 77
        }, {
            f: '56.png',
            x: 888,
            y: 198,
            w: 178,
            h: 178,
            p: 77
        }, {
            f: '156.png',
            x: 888,
            y: 378,
            w: 151,
            h: 139,
            t: 10,
            b: 2,
            p: 77
        }, {
            f: '148.png',
            x: 331,
            y: 1085,
            w: 148,
            h: 85,
            t: 44,
            l: 1,
            b: 22,
            r: 2,
            p: 77
        }, {
            f: '94.png',
            x: 792,
            y: 519,
            w: 140,
            h: 140,
            p: 77
        }, {
            f: '154.png',
            x: 934,
            y: 519,
            w: 126,
            h: 136,
            l: 12,
            b: 15,
            r: 13,
            p: 77
        }, {
            f: '125.png',
            x: 473,
            y: 417,
            w: 123,
            h: 22,
            p: 77
        }, {
            f: '70.png',
            x: 934,
            y: 657,
            w: 122,
            h: 122,
            p: 77
        }, {
            f: '61.png',
            x: 792,
            y: 661,
            w: 122,
            h: 122,
            p: 77
        }, {
            f: '150.png',
            x: 916,
            y: 781,
            w: 89,
            h: 105,
            t: 31,
            l: 32,
            b: 15,
            r: 30,
            p: 77
        }, {
            f: '152.png',
            x: 792,
            y: 785,
            w: 96,
            h: 102,
            t: 25,
            l: 29,
            b: 24,
            r: 26,
            p: 77
        }, {
            f: '99.png',
            x: 1007,
            y: 781,
            w: 76,
            h: 76,
            t: 16,
            l: 18,
            b: 18,
            r: 16,
            p: 77
        }, {
            f: '25.png',
            x: 1041,
            y: 378,
            w: 43,
            h: 40,
            p: 77
        }, {
            f: '12.png',
            x: 1041,
            y: 420,
            w: 37,
            h: 37,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 77
        }, {
            f: '1.png',
            x: 1041,
            y: 459,
            w: 37,
            h: 37,
            t: 1,
            l: 1,
            b: 1,
            r: 1,
            p: 77
        }, {
            f: '162.png',
            x: 1058,
            y: 657,
            w: 33,
            h: 33,
            t: 8,
            l: 8,
            b: 9,
            r: 9,
            p: 77
        }, {
            f: '161.png',
            x: 1058,
            y: 692,
            w: 33,
            h: 33,
            t: 8,
            l: 8,
            b: 9,
            r: 9,
            p: 77
        }, {
            f: '73.png',
            x: 473,
            y: 441,
            w: 31,
            h: 30,
            t: 1,
            b: 1,
            r: 1,
            p: 77
        }, {
            f: '144.png',
            x: 1041,
            y: 498,
            w: 22,
            h: 18,
            p: 77
        }],
        'spritesheets/resources-animations-raidBackground-11.png': [{
            f: '18.png',
            x: 2,
            y: 2,
            w: 22,
            h: 91,
            p: 78
        }, {
            f: '2.png',
            x: 26,
            y: 2,
            w: 31,
            h: 18,
            t: 1,
            l: 2,
            p: 78
        }, {
            f: '8.png',
            x: 26,
            y: 22,
            w: 31,
            h: 18,
            t: 1,
            l: 2,
            p: 78
        }, {
            f: '6.png',
            x: 26,
            y: 42,
            w: 30,
            h: 17,
            t: 2,
            l: 3,
            p: 78
        }, {
            f: '4.png',
            x: 26,
            y: 61,
            w: 29,
            h: 17,
            t: 2,
            l: 4,
            p: 78
        }, {
            f: '20.png',
            x: 59,
            y: 2,
            w: 22,
            h: 28,
            p: 78
        }, {
            f: '11.png',
            x: 83,
            y: 2,
            w: 26,
            h: 17,
            p: 78
        }, {
            f: '14.png',
            x: 26,
            y: 80,
            w: 14,
            h: 7,
            p: 78
        }],
        'spritesheets/resources-animations-raidBackground-131.png': [{
            f: '2.png',
            x: 2,
            y: 2,
            w: 479,
            h: 225,
            p: 79
        }, {
            f: '5.png',
            x: 2,
            y: 229,
            w: 210,
            h: 210,
            t: 2,
            l: 1,
            b: 1,
            r: 2,
            p: 79
        }, {
            f: '8.png',
            x: 214,
            y: 229,
            w: 8,
            h: 7,
            p: 79
        }],
        'spritesheets/resources-animations-pogsFx1.png': [{
            f: '76.png',
            x: 2,
            y: 2,
            w: 46,
            h: 887,
            b: 1,
            p: 80
        }, {
            f: '81.png',
            x: 50,
            y: 2,
            w: 582,
            h: 24,
            t: 10,
            l: 11,
            b: 10,
            r: 12,
            p: 80
        }, {
            f: '78.png',
            x: 50,
            y: 28,
            w: 560,
            h: 55,
            r: 1,
            p: 80
        }, {
            f: '9.png',
            x: 50,
            y: 85,
            w: 468,
            h: 468,
            b: 1,
            r: 1,
            p: 80
        }, {
            f: '65.png',
            x: 634,
            y: 2,
            w: 351,
            h: 352,
            t: 2,
            l: 1,
            b: 2,
            r: 4,
            p: 80
        }, {
            f: '73.png',
            x: 50,
            y: 555,
            w: 327,
            h: 314,
            p: 80
        }, {
            f: '56.png',
            x: 379,
            y: 555,
            w: 323,
            h: 323,
            b: 1,
            r: 1,
            p: 80
        }, {
            f: '68.png',
            x: 704,
            y: 356,
            w: 196,
            h: 294,
            t: 10,
            l: 9,
            b: 9,
            r: 10,
            p: 80
        }, {
            f: '44.png',
            x: 902,
            y: 356,
            w: 23,
            h: 285,
            p: 80
        }, {
            f: '42.png',
            x: 520,
            y: 85,
            w: 59,
            h: 283,
            p: 80
        }, {
            f: '40.png',
            x: 2,
            y: 891,
            w: 89,
            h: 280,
            p: 80
        }, {
            f: '38.png',
            x: 93,
            y: 880,
            w: 106,
            h: 275,
            r: 1,
            p: 80
        }, {
            f: '36.png',
            x: 201,
            y: 880,
            w: 143,
            h: 271,
            p: 80
        }, {
            f: '63.png',
            x: 704,
            y: 652,
            w: 253,
            h: 253,
            p: 80
        }, {
            f: '33.png',
            x: 346,
            y: 907,
            w: 248,
            h: 248,
            p: 80
        }, {
            f: '47.png',
            x: 596,
            y: 907,
            w: 127,
            h: 240,
            p: 80
        }, {
            f: '7.png',
            x: 725,
            y: 907,
            w: 207,
            h: 224,
            p: 80
        }, {
            f: '16.png',
            x: 987,
            y: 2,
            w: 212,
            h: 212,
            p: 80
        }, {
            f: '53.png',
            x: 581,
            y: 356,
            w: 114,
            h: 112,
            t: 1,
            l: 1,
            b: 5,
            r: 3,
            p: 80
        }, {
            f: '84.png',
            x: 987,
            y: 216,
            w: 107,
            h: 106,
            t: 6,
            l: 6,
            b: 7,
            r: 6,
            p: 80
        }, {
            f: '3.png',
            x: 987,
            y: 324,
            w: 105,
            h: 105,
            p: 80
        }, {
            f: '15.png',
            x: 1094,
            y: 324,
            w: 105,
            h: 86,
            l: 1,
            p: 80
        }, {
            f: '4.png',
            x: 1096,
            y: 216,
            w: 86,
            h: 100,
            p: 80
        }, {
            f: '31.png',
            x: 1094,
            y: 412,
            w: 98,
            h: 98,
            p: 80
        }, {
            f: '26.png',
            x: 520,
            y: 470,
            w: 94,
            h: 72,
            p: 80
        }, {
            f: '12.png',
            x: 959,
            y: 431,
            w: 94,
            h: 73,
            p: 80
        }, {
            f: '50.png',
            x: 927,
            y: 512,
            w: 81,
            h: 88,
            p: 80
        }, {
            f: '58.png',
            x: 1010,
            y: 506,
            w: 81,
            h: 81,
            p: 80
        }, {
            f: '71.png',
            x: 346,
            y: 880,
            w: 26,
            h: 25,
            t: 4,
            l: 3,
            b: 4,
            r: 4,
            p: 80
        }, {
            f: '2.png',
            x: 374,
            y: 880,
            w: 24,
            h: 24,
            p: 80
        }],
        'spritesheets/resources-images-navBar1.png': [{
            f: 'pm_hud_bottom.png',
            x: 2,
            y: 2,
            w: 1545,
            h: 252,
            p: 81
        }, {
            f: 'pm_icons_nav_battle_v01.png',
            x: 2,
            y: 256,
            w: 203,
            h: 184,
            l: 19,
            r: 20,
            p: 81
        }, {
            f: 'pm_icons_nav_shop_v01.png',
            x: 207,
            y: 256,
            w: 199,
            h: 183,
            l: 21,
            b: 1,
            r: 22,
            p: 81
        }, {
            f: 'pm_icons_nav_mail_v01.png',
            x: 408,
            y: 256,
            w: 197,
            h: 182,
            t: 1,
            l: 22,
            b: 1,
            r: 23,
            p: 81
        }, {
            f: 'pm_icons_nav_bag_v01.png',
            x: 607,
            y: 256,
            w: 184,
            h: 183,
            l: 29,
            b: 1,
            r: 29,
            p: 81
        }, {
            f: 'pm_icons_nav_pokedex_v01.png',
            x: 793,
            y: 256,
            w: 153,
            h: 184,
            l: 44,
            r: 45,
            p: 81
        }, {
            f: 'pm_icons_nav_battle_v01_w.png',
            x: 948,
            y: 256,
            w: 133,
            h: 114,
            l: 7,
            r: 8,
            p: 81
        }, {
            f: 'pm_icons_nav_mail_v01_w.png',
            x: 1083,
            y: 256,
            w: 132,
            h: 106,
            t: 4,
            l: 8,
            b: 4,
            r: 8,
            p: 81
        }, {
            f: 'pm_icons_nav_shop_v01_w.png',
            x: 1217,
            y: 256,
            w: 131,
            h: 113,
            l: 8,
            b: 1,
            r: 9,
            p: 81
        }, {
            f: 'pm_icons_nav_pokedex_v01_w.png',
            x: 1350,
            y: 256,
            w: 98,
            h: 114,
            l: 25,
            r: 25,
            p: 81
        }, {
            f: 'pm_icons_nav_bag_v01_w.png',
            x: 2,
            y: 442,
            w: 114,
            h: 113,
            l: 17,
            b: 1,
            r: 17,
            p: 81
        }, {
            f: 'pm_notification-pip_exclamation.png',
            x: 1450,
            y: 256,
            w: 74,
            h: 74,
            p: 81
        }],
        'spritesheets/resources-images-pokemonPreview1.png': [{
            f: 'pokemonPreviewTier1.png',
            x: 2,
            y: 2,
            w: 192,
            h: 80,
            l: 4,
            r: 4,
            p: 82
        }, {
            f: 'pokemonPreviewTier2.png',
            x: 2,
            y: 84,
            w: 192,
            h: 80,
            l: 4,
            r: 4,
            p: 82
        }, {
            f: 'pokemonPreviewTier3.png',
            x: 2,
            y: 166,
            w: 192,
            h: 80,
            l: 4,
            r: 4,
            p: 82
        }],
        'spritesheets/resources-images-starPack1.png': [{
            f: 'starchest.png',
            x: 2,
            y: 2,
            w: 146,
            h: 170,
            p: 83
        }, {
            f: 'star.png',
            x: 150,
            y: 2,
            w: 113,
            h: 120,
            t: 6,
            l: 6,
            b: 2,
            r: 9,
            p: 83
        }, {
            f: 'gradient_background.png',
            x: 150,
            y: 124,
            w: 42,
            h: 40,
            p: 83
        }],
        'spritesheets/resources-animations-elementalBackground-efx_normal1.png': [{
            f: '6.png',
            x: 2,
            y: 2,
            w: 342,
            h: 121,
            r: 1,
            p: 84
        }, {
            f: '3.png',
            x: 2,
            y: 125,
            w: 54,
            h: 55,
            p: 84
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_10_anim1.png': [{
            f: '54.png',
            x: 2,
            y: 2,
            w: 168,
            h: 631,
            t: 3,
            r: 1,
            p: 85
        }, {
            f: '21.png',
            x: 172,
            y: 2,
            w: 168,
            h: 630,
            t: 3,
            b: 1,
            r: 1,
            p: 85
        }, {
            f: '18.png',
            x: 342,
            y: 2,
            w: 173,
            h: 630,
            t: 2,
            p: 85
        }, {
            f: '33.png',
            x: 517,
            y: 2,
            w: 147,
            h: 628,
            t: 2,
            b: 1,
            r: 1,
            p: 85
        }, {
            f: '51.png',
            x: 2,
            y: 635,
            w: 158,
            h: 628,
            t: 3,
            p: 85
        }, {
            f: '30.png',
            x: 162,
            y: 635,
            w: 155,
            h: 628,
            t: 2,
            r: 1,
            p: 85
        }, {
            f: '24.png',
            x: 319,
            y: 634,
            w: 154,
            h: 628,
            t: 2,
            b: 1,
            r: 2,
            p: 85
        }, {
            f: '27.png',
            x: 475,
            y: 634,
            w: 160,
            h: 628,
            t: 3,
            r: 1,
            p: 85
        }, {
            f: '39.png',
            x: 666,
            y: 2,
            w: 150,
            h: 628,
            t: 3,
            r: 1,
            p: 85
        }, {
            f: '45.png',
            x: 637,
            y: 632,
            w: 158,
            h: 628,
            t: 3,
            p: 85
        }, {
            f: '42.png',
            x: 818,
            y: 2,
            w: 145,
            h: 627,
            t: 3,
            b: 1,
            r: 1,
            p: 85
        }, {
            f: '48.png',
            x: 797,
            y: 632,
            w: 155,
            h: 627,
            t: 4,
            b: 1,
            r: 1,
            p: 85
        }, {
            f: '15.png',
            x: 965,
            y: 2,
            w: 178,
            h: 626,
            t: 1,
            p: 85
        }, {
            f: '36.png',
            x: 954,
            y: 631,
            w: 145,
            h: 626,
            t: 4,
            b: 1,
            r: 1,
            p: 85
        }, {
            f: '62.png',
            x: 1145,
            y: 2,
            w: 443,
            h: 416,
            t: 2,
            l: 2,
            b: 2,
            r: 2,
            p: 85
        }, {
            f: '3.png',
            x: 1145,
            y: 420,
            w: 56,
            h: 138,
            p: 85
        }, {
            f: '7.png',
            x: 1203,
            y: 420,
            w: 46,
            h: 104,
            p: 85
        }, {
            f: '11.png',
            x: 1251,
            y: 420,
            w: 38,
            h: 72,
            p: 85
        }, {
            f: '59.png',
            x: 1291,
            y: 420,
            w: 61,
            h: 32,
            p: 85
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_3_anim1.png': [{
            f: '9.png',
            x: 2,
            y: 2,
            w: 72,
            h: 72,
            p: 86
        }, {
            f: '59.png',
            x: 76,
            y: 2,
            w: 47,
            h: 32,
            p: 86
        }, {
            f: '53.png',
            x: 76,
            y: 36,
            w: 46,
            h: 36,
            r: 1,
            p: 86
        }, {
            f: '49.png',
            x: 2,
            y: 76,
            w: 46,
            h: 41,
            p: 86
        }, {
            f: '50.png',
            x: 76,
            y: 74,
            w: 46,
            h: 37,
            r: 1,
            p: 86
        }, {
            f: '58.png',
            x: 2,
            y: 119,
            w: 44,
            h: 41,
            r: 1,
            p: 86
        }, {
            f: '51.png',
            x: 48,
            y: 119,
            w: 43,
            h: 32,
            p: 86
        }, {
            f: '48.png',
            x: 125,
            y: 2,
            w: 43,
            h: 39,
            r: 1,
            p: 86
        }, {
            f: '54.png',
            x: 124,
            y: 43,
            w: 42,
            h: 36,
            l: 1,
            p: 86
        }, {
            f: '57.png',
            x: 124,
            y: 81,
            w: 42,
            h: 40,
            r: 1,
            p: 86
        }, {
            f: '56.png',
            x: 2,
            y: 162,
            w: 41,
            h: 39,
            p: 86
        }, {
            f: '55.png',
            x: 45,
            y: 162,
            w: 40,
            h: 39,
            r: 1,
            p: 86
        }, {
            f: '52.png',
            x: 87,
            y: 153,
            w: 38,
            h: 34,
            r: 1,
            p: 86
        }, {
            f: '3.png',
            x: 50,
            y: 76,
            w: 24,
            h: 38,
            t: 7,
            p: 86
        }, {
            f: '38.png',
            x: 93,
            y: 123,
            w: 22,
            h: 28,
            p: 86
        }],
        'spritesheets/resources-animations-gymBackground-pm_gym_7_anim1.png': [{
            f: '16.png',
            x: 2,
            y: 2,
            w: 108,
            h: 135,
            p: 87
        }, {
            f: '12.png',
            x: 112,
            y: 2,
            w: 23,
            h: 14,
            r: 1,
            p: 87
        }, {
            f: '14.png',
            x: 112,
            y: 18,
            w: 23,
            h: 13,
            b: 1,
            r: 1,
            p: 87
        }, {
            f: '6.png',
            x: 112,
            y: 33,
            w: 23,
            h: 13,
            r: 1,
            p: 87
        }, {
            f: '8.png',
            x: 112,
            y: 48,
            w: 23,
            h: 14,
            r: 1,
            p: 87
        }, {
            f: '10.png',
            x: 112,
            y: 64,
            w: 6,
            h: 4,
            p: 87
        }],
        'spritesheets/resources-animations-hazards1.png': [{
            f: '4.png',
            x: 2,
            y: 2,
            w: 269,
            h: 252,
            b: 1,
            p: 88
        }, {
            f: '36.png',
            x: 2,
            y: 256,
            w: 268,
            h: 250,
            t: 2,
            p: 88
        }, {
            f: '3.png',
            x: 273,
            y: 2,
            w: 204,
            h: 187,
            b: 1,
            p: 88
        }, {
            f: '6.png',
            x: 273,
            y: 2,
            w: 204,
            h: 187,
            b: 1,
            p: 88
        }, {
            f: '33.png',
            x: 273,
            y: 191,
            w: 176,
            h: 160,
            t: 1,
            l: 1,
            r: 1,
            p: 88
        }, {
            f: '12.png',
            x: 272,
            y: 353,
            w: 151,
            h: 142,
            r: 1,
            p: 88
        }, {
            f: '15.png',
            x: 272,
            y: 353,
            w: 151,
            h: 142,
            r: 1,
            p: 88
        }, {
            f: '1.png',
            x: 479,
            y: 2,
            w: 148,
            h: 139,
            b: 1,
            r: 1,
            p: 88
        }, {
            f: '28.png',
            x: 479,
            y: 143,
            w: 148,
            h: 139,
            b: 1,
            r: 1,
            p: 88
        }, {
            f: '40.png',
            x: 425,
            y: 353,
            w: 123,
            h: 135,
            p: 88
        }, {
            f: '45.png',
            x: 2,
            y: 508,
            w: 132,
            h: 132,
            p: 88
        }, {
            f: '27.png',
            x: 136,
            y: 508,
            w: 70,
            h: 129,
            p: 88
        }, {
            f: '2.png',
            x: 208,
            y: 508,
            w: 114,
            h: 105,
            r: 1,
            p: 88
        }, {
            f: '26.png',
            x: 550,
            y: 284,
            w: 58,
            h: 107,
            r: 1,
            p: 88
        }, {
            f: '29.png',
            x: 550,
            y: 284,
            w: 58,
            h: 107,
            r: 1,
            p: 88
        }, {
            f: '14.png',
            x: 610,
            y: 284,
            w: 11,
            h: 94,
            p: 88
        }, {
            f: '17.png',
            x: 610,
            y: 284,
            w: 11,
            h: 94,
            p: 88
        }, {
            f: '65.png',
            x: 324,
            y: 497,
            w: 92,
            h: 78,
            p: 88
        }, {
            f: '52.png',
            x: 451,
            y: 284,
            w: 92,
            h: 46,
            p: 88
        }, {
            f: '43.png',
            x: 324,
            y: 577,
            w: 57,
            h: 52,
            p: 88
        }, {
            f: '71.png',
            x: 451,
            y: 332,
            w: 56,
            h: 11,
            p: 88
        }, {
            f: '68.png',
            x: 383,
            y: 577,
            w: 46,
            h: 49,
            t: 10,
            l: 2,
            b: 1,
            r: 2,
            p: 88
        }, {
            f: '90.png',
            x: 550,
            y: 393,
            w: 45,
            h: 30,
            p: 88
        }, {
            f: '16.png',
            x: 550,
            y: 425,
            w: 41,
            h: 41,
            b: 1,
            r: 1,
            p: 88
        }, {
            f: '19.png',
            x: 550,
            y: 425,
            w: 41,
            h: 41,
            b: 1,
            r: 1,
            p: 88
        }, {
            f: '11.png',
            x: 451,
            y: 191,
            w: 24,
            h: 40,
            r: 1,
            p: 88
        }, {
            f: '8.png',
            x: 451,
            y: 191,
            w: 24,
            h: 40,
            r: 1,
            p: 88
        }, {
            f: '9.png',
            x: 610,
            y: 380,
            w: 8,
            h: 39,
            p: 88
        }, {
            f: '59.png',
            x: 550,
            y: 468,
            w: 36,
            h: 36,
            p: 88
        }, {
            f: '5.png',
            x: 588,
            y: 468,
            w: 36,
            h: 36,
            p: 88
        }, {
            f: '10.png',
            x: 208,
            y: 615,
            w: 35,
            h: 21,
            b: 1,
            p: 88
        }, {
            f: '13.png',
            x: 208,
            y: 615,
            w: 35,
            h: 21,
            b: 1,
            p: 88
        }, {
            f: '24.png',
            x: 509,
            y: 332,
            w: 31,
            h: 17,
            b: 1,
            r: 1,
            p: 88
        }, {
            f: '18.png',
            x: 597,
            y: 421,
            w: 27,
            h: 27,
            p: 88
        }, {
            f: '21.png',
            x: 597,
            y: 421,
            w: 27,
            h: 27,
            p: 88
        }, {
            f: '70.png',
            x: 272,
            y: 497,
            w: 21,
            h: 7,
            p: 88
        }],
        'spritesheets/resources-animations-raidBackground-101.png': [{
            f: '2.png',
            x: 2,
            y: 2,
            w: 51,
            h: 317,
            p: 89
        }, {
            f: '4.png',
            x: 55,
            y: 2,
            w: 122,
            h: 247,
            t: 5,
            b: 1,
            p: 89
        }, {
            f: '10.png',
            x: 55,
            y: 251,
            w: 7,
            h: 7,
            p: 89
        }, {
            f: '7.png',
            x: 55,
            y: 260,
            w: 7,
            h: 7,
            p: 89
        }],
        'spritesheets/resources-animations-raidBackground-21.png': [{
            f: '2.png',
            x: 2,
            y: 2,
            w: 479,
            h: 225,
            p: 90
        }, {
            f: '5.png',
            x: 2,
            y: 229,
            w: 36,
            h: 36,
            p: 90
        }, {
            f: '8.png',
            x: 40,
            y: 229,
            w: 15,
            h: 15,
            p: 90
        }],
        'spritesheets/resources-animations-callouts1.png': [{
            f: '23.png',
            x: 2,
            y: 2,
            w: 995,
            h: 28,
            t: 5,
            l: 5,
            b: 5,
            r: 5,
            p: 91
        }, {
            f: '3.png',
            x: 2,
            y: 32,
            w: 995,
            h: 28,
            t: 5,
            l: 5,
            b: 5,
            r: 5,
            p: 91
        }, {
            f: '12.png',
            x: 2,
            y: 62,
            w: 490,
            h: 112,
            t: 3,
            l: 3,
            b: 2,
            r: 2,
            p: 91
        }, {
            f: '15.png',
            x: 494,
            y: 62,
            w: 474,
            h: 96,
            t: 11,
            l: 11,
            b: 10,
            r: 10,
            p: 91
        }, {
            f: '4.png',
            x: 2,
            y: 176,
            w: 471,
            h: 459,
            p: 91
        }, {
            f: '9.png',
            x: 475,
            y: 176,
            w: 424,
            h: 424,
            p: 91
        }, {
            f: '39.png',
            x: 2,
            y: 637,
            w: 396,
            h: 111,
            t: 3,
            l: 3,
            b: 2,
            r: 2,
            p: 91
        }, {
            f: '29.png',
            x: 400,
            y: 637,
            w: 388,
            h: 110,
            p: 91
        }, {
            f: '42.png',
            x: 2,
            y: 750,
            w: 379,
            h: 95,
            t: 11,
            l: 11,
            b: 10,
            r: 11,
            p: 91
        }, {
            f: '32.png',
            x: 383,
            y: 750,
            w: 372,
            h: 94,
            t: 8,
            l: 8,
            b: 8,
            r: 8,
            p: 91
        }, {
            f: '7.png',
            x: 2,
            y: 847,
            w: 261,
            h: 56,
            p: 91
        }, {
            f: '45.png',
            x: 383,
            y: 846,
            w: 224,
            h: 57,
            t: 1,
            b: 1,
            p: 91
        }, {
            f: '26.png',
            x: 609,
            y: 846,
            w: 220,
            h: 56,
            p: 91
        }, {
            f: '36.png',
            x: 757,
            y: 749,
            w: 211,
            h: 63,
            p: 91
        }, {
            f: '18.png',
            x: 831,
            y: 814,
            w: 48,
            h: 61,
            p: 91
        }, {
            f: '20.png',
            x: 475,
            y: 602,
            w: 34,
            h: 32,
            t: 1,
            l: 1,
            b: 1,
            p: 91
        }],
        'spritesheets/resources-animations-elementalBackground-efx_electric1.png': [{
            f: '2.png',
            x: 2,
            y: 2,
            w: 810,
            h: 810,
            p: 92
        }, {
            f: '6.png',
            x: 814,
            y: 2,
            w: 417,
            h: 324,
            p: 92
        }, {
            f: '14.png',
            x: 814,
            y: 328,
            w: 408,
            h: 368,
            p: 92
        }, {
            f: '48.png',
            x: 2,
            y: 814,
            w: 37,
            h: 199,
            t: 10,
            l: 9,
            b: 11,
            r: 10,
            p: 92
        }, {
            f: '49.png',
            x: 41,
            y: 814,
            w: 41,
            h: 173,
            t: 13,
            l: 13,
            b: 14,
            r: 13,
            p: 92
        }, {
            f: '18.png',
            x: 84,
            y: 814,
            w: 92,
            h: 81,
            r: 1,
            p: 92
        }, {
            f: '26.png',
            x: 84,
            y: 897,
            w: 47,
            h: 88,
            b: 1,
            p: 92
        }, {
            f: '28.png',
            x: 133,
            y: 897,
            w: 69,
            h: 85,
            p: 92
        }, {
            f: '27.png',
            x: 178,
            y: 814,
            w: 85,
            h: 76,
            b: 1,
            p: 92
        }, {
            f: '22.png',
            x: 204,
            y: 892,
            w: 31,
            h: 82,
            p: 92
        }, {
            f: '29.png',
            x: 237,
            y: 892,
            w: 77,
            h: 67,
            p: 92
        }, {
            f: '25.png',
            x: 265,
            y: 814,
            w: 77,
            h: 61,
            p: 92
        }, {
            f: '21.png',
            x: 316,
            y: 877,
            w: 66,
            h: 75,
            p: 92
        }, {
            f: '24.png',
            x: 384,
            y: 814,
            w: 41,
            h: 73,
            p: 92
        }, {
            f: '20.png',
            x: 384,
            y: 889,
            w: 60,
            h: 72,
            p: 92
        }, {
            f: '23.png',
            x: 427,
            y: 814,
            w: 55,
            h: 70,
            p: 92
        }, {
            f: '15.png',
            x: 446,
            y: 886,
            w: 23,
            h: 67,
            r: 1,
            p: 92
        }, {
            f: '19.png',
            x: 471,
            y: 886,
            w: 60,
            h: 64,
            p: 92
        }, {
            f: '38.png',
            x: 446,
            y: 955,
            w: 21,
            h: 56,
            b: 1,
            p: 92
        }, {
            f: '36.png',
            x: 469,
            y: 955,
            w: 42,
            h: 55,
            p: 92
        }, {
            f: '37.png',
            x: 316,
            y: 954,
            w: 39,
            h: 54,
            p: 92
        }, {
            f: '30.png',
            x: 204,
            y: 976,
            w: 53,
            h: 31,
            b: 1,
            p: 92
        }, {
            f: '16.png',
            x: 357,
            y: 963,
            w: 48,
            h: 44,
            p: 92
        }, {
            f: '31.png',
            x: 265,
            y: 877,
            w: 37,
            h: 13,
            r: 1,
            p: 92
        }, {
            f: '39.png',
            x: 407,
            y: 963,
            w: 23,
            h: 36,
            b: 1,
            p: 92
        }, {
            f: '35.png',
            x: 259,
            y: 961,
            w: 16,
            h: 34,
            p: 92
        }, {
            f: '34.png',
            x: 133,
            y: 984,
            w: 20,
            h: 29,
            r: 1,
            p: 92
        }, {
            f: '32.png',
            x: 41,
            y: 989,
            w: 27,
            h: 19,
            p: 92
        }, {
            f: '17.png',
            x: 70,
            y: 989,
            w: 15,
            h: 24,
            p: 92
        }, {
            f: '33.png',
            x: 407,
            y: 1001,
            w: 19,
            h: 11,
            p: 92
        }, {
            f: '40.png',
            x: 237,
            y: 961,
            w: 17,
            h: 11,
            p: 92
        }],
        'spritesheets/resources-animations-pokepack1.png': [{
            f: '26.png',
            x: 0,
            y: 0,
            w: 768,
            h: 3056,
            p: 93
        }],
        'spritesheets/resources-animations-pokepack2.png': [{
            f: '44.png',
            x: 2,
            y: 2,
            w: 1020,
            h: 1536,
            p: 93
        }, {
            f: '30.png',
            x: 1024,
            y: 2,
            w: 926,
            h: 1101,
            l: 7,
            r: 7,
            p: 93
        }, {
            f: '3.png',
            x: 1024,
            y: 1105,
            w: 341,
            h: 341,
            p: 93
        }, {
            f: '50.png',
            x: 1367,
            y: 1105,
            w: 263,
            h: 294,
            p: 93
        }, {
            f: '57.png',
            x: 1632,
            y: 1105,
            w: 128,
            h: 287,
            p: 93
        }, {
            f: '60.png',
            x: 1762,
            y: 1105,
            w: 128,
            h: 287,
            p: 93
        }, {
            f: '48.png',
            x: 2,
            y: 1540,
            w: 128,
            h: 287,
            p: 93
        }, {
            f: '63.png',
            x: 132,
            y: 1540,
            w: 128,
            h: 287,
            p: 93
        }, {
            f: '54.png',
            x: 262,
            y: 1540,
            w: 128,
            h: 287,
            p: 93
        }, {
            f: '22.png',
            x: 392,
            y: 1540,
            w: 265,
            h: 266,
            t: 2,
            l: 3,
            b: 7,
            r: 7,
            p: 93
        }, {
            f: '18.png',
            x: 659,
            y: 1540,
            w: 265,
            h: 266,
            t: 2,
            l: 3,
            b: 7,
            r: 7,
            p: 93
        }, {
            f: '7.png',
            x: 926,
            y: 1540,
            w: 87,
            h: 254,
            r: 1,
            p: 93
        }, {
            f: '92.png',
            x: 1632,
            y: 1394,
            w: 252,
            h: 170,
            l: 8,
            r: 8,
            p: 93
        }, {
            f: '220.png',
            x: 1015,
            y: 1566,
            w: 249,
            h: 249,
            p: 93
        }, {
            f: '105.png',
            x: 1367,
            y: 1401,
            w: 226,
            h: 158,
            p: 93
        }, {
            f: '110.png',
            x: 1266,
            y: 1566,
            w: 214,
            h: 176,
            p: 93
        }, {
            f: '237.png',
            x: 1482,
            y: 1561,
            w: 103,
            h: 190,
            p: 93
        }, {
            f: '127.png',
            x: 1892,
            y: 1105,
            w: 48,
            h: 190,
            p: 93
        }, {
            f: '221.png',
            x: 1587,
            y: 1566,
            w: 179,
            h: 179,
            p: 93
        }, {
            f: '81.png',
            x: 1024,
            y: 1448,
            w: 170,
            h: 105,
            p: 93
        }, {
            f: '195.png',
            x: 1196,
            y: 1448,
            w: 132,
            h: 96,
            p: 93
        }, {
            f: '201.png',
            x: 1266,
            y: 1744,
            w: 131,
            h: 82,
            p: 93
        }, {
            f: '98.png',
            x: 1399,
            y: 1753,
            w: 128,
            h: 49,
            r: 1,
            p: 93
        }, {
            f: '113.png',
            x: 1768,
            y: 1566,
            w: 98,
            h: 123,
            p: 93
        }, {
            f: '197.png',
            x: 1768,
            y: 1691,
            w: 118,
            h: 92,
            p: 93
        }, {
            f: '205.png',
            x: 1587,
            y: 1747,
            w: 115,
            h: 78,
            p: 93
        }, {
            f: '193.png',
            x: 2,
            y: 1829,
            w: 113,
            h: 82,
            p: 93
        }, {
            f: '157.png',
            x: 392,
            y: 1817,
            w: 113,
            h: 91,
            p: 93
        }, {
            f: '155.png',
            x: 117,
            y: 1829,
            w: 112,
            h: 79,
            p: 93
        }, {
            f: '203.png',
            x: 1868,
            y: 1566,
            w: 78,
            h: 110,
            p: 93
        }, {
            f: '179.png',
            x: 1399,
            y: 1827,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '177.png',
            x: 1507,
            y: 1827,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '183.png',
            x: 1615,
            y: 1827,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '175.png',
            x: 507,
            y: 1817,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '173.png',
            x: 615,
            y: 1817,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '185.png',
            x: 723,
            y: 1817,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '187.png',
            x: 831,
            y: 1817,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '189.png',
            x: 939,
            y: 1817,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '153.png',
            x: 1047,
            y: 1817,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '191.png',
            x: 1155,
            y: 1817,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '171.png',
            x: 1723,
            y: 1785,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '199.png',
            x: 1831,
            y: 1785,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '181.png',
            x: 2,
            y: 1913,
            w: 106,
            h: 84,
            b: 1,
            p: 93
        }, {
            f: '163.png',
            x: 110,
            y: 1913,
            w: 103,
            h: 84,
            l: 3,
            b: 1,
            p: 93
        }, {
            f: '117.png',
            x: 215,
            y: 1913,
            w: 103,
            h: 67,
            p: 93
        }, {
            f: '165.png',
            x: 320,
            y: 1913,
            w: 102,
            h: 84,
            p: 93
        }, {
            f: '167.png',
            x: 1723,
            y: 1871,
            w: 99,
            h: 101,
            p: 93
        }, {
            f: '131.png',
            x: 1824,
            y: 1871,
            w: 100,
            h: 99,
            b: 1,
            p: 93
        }, {
            f: '161.png',
            x: 231,
            y: 1829,
            w: 96,
            h: 73,
            p: 93
        }, {
            f: '169.png',
            x: 507,
            y: 1903,
            w: 96,
            h: 89,
            b: 1,
            p: 93
        }, {
            f: '75.png',
            x: 605,
            y: 1903,
            w: 93,
            h: 93,
            p: 93
        }, {
            f: '148.png',
            x: 700,
            y: 1903,
            w: 54,
            h: 92,
            p: 93
        }, {
            f: '85.png',
            x: 756,
            y: 1913,
            w: 83,
            h: 69,
            r: 1,
            p: 93
        }, {
            f: '14.png',
            x: 424,
            y: 1910,
            w: 81,
            h: 81,
            p: 93
        }, {
            f: '159.png',
            x: 841,
            y: 1913,
            w: 81,
            h: 68,
            p: 93
        }, {
            f: '122.png',
            x: 1399,
            y: 1804,
            w: 78,
            h: 21,
            p: 93
        }, {
            f: '219.png',
            x: 924,
            y: 1913,
            w: 74,
            h: 74,
            t: 3,
            l: 3,
            b: 3,
            r: 3,
            p: 93
        }, {
            f: '68.png',
            x: 1e3,
            y: 1913,
            w: 69,
            h: 69,
            p: 93
        }, {
            f: '28.png',
            x: 1886,
            y: 1394,
            w: 63,
            h: 30,
            p: 93
        }, {
            f: '72.png',
            x: 1888,
            y: 1678,
            w: 62,
            h: 62,
            p: 93
        }, {
            f: '66.png',
            x: 329,
            y: 1829,
            w: 60,
            h: 60,
            b: 1,
            r: 1,
            p: 93
        }, {
            f: '70.png',
            x: 1529,
            y: 1753,
            w: 55,
            h: 55,
            p: 93
        }, {
            f: '134.png',
            x: 1892,
            y: 1297,
            w: 48,
            h: 50,
            t: 2,
            l: 3,
            b: 4,
            r: 5,
            p: 93
        }, {
            f: '137.png',
            x: 1595,
            y: 1401,
            w: 28,
            h: 28,
            p: 93
        }, {
            f: '218.png',
            x: 1330,
            y: 1448,
            w: 28,
            h: 28,
            p: 93
        }, {
            f: '238.png',
            x: 1595,
            y: 1431,
            w: 26,
            h: 26,
            p: 93
        }, {
            f: '233.png',
            x: 1330,
            y: 1478,
            w: 26,
            h: 26,
            p: 93
        }, {
            f: '206.png',
            x: 1824,
            y: 1972,
            w: 25,
            h: 25,
            b: 2,
            r: 2,
            p: 93
        }, {
            f: '124.png',
            x: 1263,
            y: 1817,
            w: 1,
            h: 1,
            t: 66,
            l: 66,
            p: 93
        }],
        'spritesheets/resources-animations-pokepack3.png': [{
            f: '32.png',
            x: 2,
            y: 2,
            w: 1094,
            h: 1026,
            p: 93
        }, {
            f: '34.png',
            x: 2,
            y: 1030,
            w: 245,
            h: 753,
            p: 93
        }]
    }
};
